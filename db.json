{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Anisina/source/css/blog-style.css","path":"css/blog-style.css","modified":0,"renderable":1},{"_id":"themes/Anisina/source/css/syntax.styl","path":"css/syntax.styl","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/blog.js","path":"js/blog.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/Anisina/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1487124949739},{"_id":"themes/Anisina/README.md","hash":"412d514cbc7ba8705faaa614a322c63b48e91550","modified":1487124949739},{"_id":"themes/Anisina/_config.yml","hash":"1a6492e8ab3d6f3ab6a374d037dbff2b98a8eb22","modified":1487321135537},{"_id":"themes/Anisina/package.json","hash":"12541fbf56f785e4f5d486a55b4939f3033f625b","modified":1487124949743},{"_id":"source/_discarded/alentine-s-Day.md","hash":"7bddfe3e5ce1fefc950bde62b8ea589228fe3f84","modified":1487124949711},{"_id":"source/tags/index.md","hash":"8fa1a71f1ed06b30a030a72c38196f529624fd40","modified":1487321135537},{"_id":"source/_posts/Dockerfile的创建.md","hash":"b6fcdffd0016739c4e22dca88c24406f5b7f7dd0","modified":1487322812276},{"_id":"source/_posts/Valentine-s-Day.md","hash":"515ce890daf908ba44f1074bf8a6e8b9d41a2d2c","modified":1487124949711},{"_id":"source/_posts/docker-本地Registry的部署.md","hash":"11e99456f17ed0fdc8e74036127d638b4e06dbe7","modified":1487321398835},{"_id":"themes/Anisina/Screenshots/mobile-index.jpeg","hash":"cd75f77f5d865d42182e2233e354eeba9f114d98","modified":1487124949739},{"_id":"themes/Anisina/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1487124949743},{"_id":"themes/Anisina/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1487124949743},{"_id":"themes/Anisina/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1487124949743},{"_id":"themes/Anisina/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1487124949743},{"_id":"themes/Anisina/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1487124949743},{"_id":"themes/Anisina/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1487124949743},{"_id":"themes/Anisina/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1487124949743},{"_id":"themes/Anisina/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1487124949743},{"_id":"themes/Anisina/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1487124949743},{"_id":"themes/Anisina/layout/404.ejs","hash":"1fe05722bd1b32bbe0ae4e3e880866f935e0ae11","modified":1487124949743},{"_id":"themes/Anisina/layout/index.ejs","hash":"a94ac678f6b24a46824d45ec058b0ab2105a92c9","modified":1487124949743},{"_id":"themes/Anisina/layout/layout.ejs","hash":"9d3d82a707b107f42db34ef5a8016693da2be742","modified":1487124949743},{"_id":"themes/Anisina/layout/page.ejs","hash":"95bbc74aa6d10cddddd7a5cd5d2a06482f5ea173","modified":1487321135537},{"_id":"themes/Anisina/layout/poetry.ejs","hash":"6c955d419050825e13d39c780d45aceafbf6552d","modified":1487124949743},{"_id":"themes/Anisina/layout/post.ejs","hash":"07a81a2b5c3cdb0692935e4a876219e5a5c645bd","modified":1487124949743},{"_id":"themes/Anisina/layout/tags.ejs","hash":"a144c3b5f4a70f881333e4de392a265469cdb649","modified":1487124949743},{"_id":"themes/Anisina/layout/works.ejs","hash":"1df954e54098cc4845295836374abed870789dcd","modified":1487124949743},{"_id":"source/_posts/docker-本地Registry的部署/docker.jpg","hash":"681e91e982bb01c245d328be255c206aac328a27","modified":1487321135537},{"_id":"themes/Anisina/Screenshots/Anisina.png","hash":"146dd991f55a827a514259e20a51de1e9b07a13d","modified":1487124949739},{"_id":"themes/Anisina/layout/_partial/footer.ejs","hash":"3455a3cc578cfbdfc0c4340c768997c8a7f215ca","modified":1487321135537},{"_id":"themes/Anisina/layout/_partial/head.ejs","hash":"4e0d96cac503d4e3a5b254d8b8175c392971ce38","modified":1487124949743},{"_id":"themes/Anisina/layout/_partial/nav.ejs","hash":"3baa41d595e951efa1db34dd1789c6f8d3b094da","modified":1487124949743},{"_id":"themes/Anisina/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1487124949743},{"_id":"themes/Anisina/source/css/blog-style.css","hash":"d064f7fd3b16dabca768a06e9779cbb7ba608ce7","modified":1487124949743},{"_id":"themes/Anisina/source/css/syntax.styl","hash":"f3f9ff0d1ebc4f7fa18d7e367b2ba2f0899adbd4","modified":1487124949743},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1487124949743},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1487124949743},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1487124949743},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1487124949743},{"_id":"themes/Anisina/source/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1487124949747},{"_id":"themes/Anisina/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1487124949747},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1487124949747},{"_id":"themes/Anisina/source/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1487124949747},{"_id":"themes/Anisina/Screenshots/poetry-show.png","hash":"f5fdcd25026a87a0aafeebb1f19cdb3c0a81a666","modified":1487124949743},{"_id":"themes/Anisina/source/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1487124949743},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1487124949743},{"_id":"themes/Anisina/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1487124949747},{"_id":"themes/Anisina/Screenshots/mobile-post.jpeg","hash":"2081cdff23a9a8c185a48d9aabcc9dc8e77833ec","modified":1487124949739},{"_id":"themes/Anisina/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1487124949747},{"_id":"themes/Anisina/Screenshots/pc-index.png","hash":"b04094dac75cb656b4244c1dfaf246168a0f8926","modified":1487124949739},{"_id":"themes/Anisina/Screenshots/pc-post.png","hash":"cde56c0797b6ff8dd555fb1f8c3f9b21bceaa3be","modified":1487124949743},{"_id":"public/tags/index.html","hash":"ec539ca1497e3893ce990327e3c853b07f35a09b","modified":1487322250220},{"_id":"public/2017/02/17/docker-本地Registry的部署/index.html","hash":"93233cae436aa18979a00ad6f8225813bec120f3","modified":1487322250225},{"_id":"public/2017/02/14/Valentine-s-Day/index.html","hash":"b45bdfa2bd10d80fe97aa60ea630fee3a2582a43","modified":1487322250226},{"_id":"public/archives/index.html","hash":"376914bbd97cd6319590d7ff3944c9ce72bd181a","modified":1487322827910},{"_id":"public/archives/2017/index.html","hash":"2c7624f9d5179a1455198396b914daab6a3f4b26","modified":1487322827911},{"_id":"public/archives/2017/02/index.html","hash":"9f1ae0c28dcd35c65a8254242a5d4be1698d9f8e","modified":1487322827911},{"_id":"public/index.html","hash":"65742659416b61742dfa37f269e0efd6671564ed","modified":1487322827911},{"_id":"public/tags/docker/index.html","hash":"eeb08329f64dad6e44fc4ab90a913ef2be14af5d","modified":1487322827912},{"_id":"public/tags/Lover/index.html","hash":"22f219b9bc84a7e2c3bf144698e7d08180b9bc5f","modified":1487322250227},{"_id":"public/tags/智障/index.html","hash":"fee38ecacfccbeba312822ba1ac59ff8734faab2","modified":1487322250227},{"_id":"public/2017/02/17/Dockerfile的创建/index.html","hash":"c19e3cb17b575ec6d29dfc40e3d4601a8847fc55","modified":1487322827910},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1487322250232},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1487322250232},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1487322250232},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1487322250232},{"_id":"public/2017/02/17/docker-本地Registry的部署/docker.jpg","hash":"681e91e982bb01c245d328be255c206aac328a27","modified":1487322250232},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1487322250524},{"_id":"public/css/syntax.css","hash":"4616879fec214c9cc4f5835615348f0bbeabf2a9","modified":1487322250540},{"_id":"public/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1487322250540},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1487322250540},{"_id":"public/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1487322250541},{"_id":"public/css/blog-style.css","hash":"d064f7fd3b16dabca768a06e9779cbb7ba608ce7","modified":1487322250541},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1487322250541},{"_id":"public/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1487322250541},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1487322250541},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1487322250541},{"_id":"source/_posts/Dockerfile的创建/docker.jpg","hash":"681e91e982bb01c245d328be255c206aac328a27","modified":1487322321851},{"_id":"public/2017/02/17/Dockerfile的创建/docker.jpg","hash":"681e91e982bb01c245d328be255c206aac328a27","modified":1487322432348}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2017-02-16T16:02:29.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-02-17 00:02:29\nlayout: tags\n---\n","updated":"2017-02-17T08:45:35.537Z","path":"tags/index.html","comments":1,"_id":"ciz9l9ks60000q2m8tjk5qw8x","content":"","excerpt":"","more":""}],"Post":[{"title":"Dockerfile的创建","date":"2017-02-17T08:52:27.000Z","author":"月牙天冲","header-img":"http://images2015.cnblogs.com/blog/1003956/201609/1003956-20160929094610156-2054520507.png","cdn":"header-off","_content":"\n\n* FROM <image name>\n\n指定容器基于哪个基础镜像创建\n\n\n* MAINTAINER <author name>\n\n设置镜像的作者\n\n\n* RUN <commend>\n\n在容器中运行的命令\n\n\n* ADD <src> <destination>\n\n复制文件指令, destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件\n\n\n* CMD\n\n提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效,CMD有三种形式：\n```\nCMD [\"executable\",\"param1\",\"param2\"]\nCMD [\"param1\",\"param2\"]\nCMD command param1 param2\n```\n\n\n* EXPOSE <port>\n\n指定容器运行在监听的端口\n\n\n* ENTRYPOINT\n\n配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：\n```\nENTRYPOINT [\"executable\", \"param1\",\"param2\"]\nENTRYPOINT command param1 param2\n```\n\n\n* WORKDIR\n\n指定RUN、CMD与ENTRYPOINT命令的工作目录。语法如下：\n\n```\nWORKDIR /path/to/workdir\n```\n\n\n* ENV\n\n设置环境变量。它们使用键值对，增加运行程序的灵活性。语法如下：\n\n```\nENV <key> <value>\n```\n\n\n* USER\n镜像正在运行时设置一个UID。语法如下：\n\n```\nUSER <uid>\n```\n\n\n* VOLUME\n\n授权访问从容器内到主机上的目录。语法如下：\n\n```\nVOLUME [\"/data\"]\n```\n\n例子:\n```\nFROM localhost:5000/ubuntu:14.4\nMAINTAINER wudizhangzhi\nADD localfile.txt /home/targetfile.txt\nWORKDIR /home/\nRUN pip install -r targetfile.txt\nEXPOSE 7777\n```\n```bash\ndocker build -t wudizhangzhi/ubuntu:latest .\n```\n","source":"_posts/Dockerfile的创建.md","raw":"---\ntitle: Dockerfile的创建\ndate: 2017-02-17 16:52:27\nauthor: \"月牙天冲\"\nheader-img: \"http://images2015.cnblogs.com/blog/1003956/201609/1003956-20160929094610156-2054520507.png\"\ncdn: 'header-off'\ntags:\n  - docker\n---\n\n\n* FROM <image name>\n\n指定容器基于哪个基础镜像创建\n\n\n* MAINTAINER <author name>\n\n设置镜像的作者\n\n\n* RUN <commend>\n\n在容器中运行的命令\n\n\n* ADD <src> <destination>\n\n复制文件指令, destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件\n\n\n* CMD\n\n提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效,CMD有三种形式：\n```\nCMD [\"executable\",\"param1\",\"param2\"]\nCMD [\"param1\",\"param2\"]\nCMD command param1 param2\n```\n\n\n* EXPOSE <port>\n\n指定容器运行在监听的端口\n\n\n* ENTRYPOINT\n\n配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：\n```\nENTRYPOINT [\"executable\", \"param1\",\"param2\"]\nENTRYPOINT command param1 param2\n```\n\n\n* WORKDIR\n\n指定RUN、CMD与ENTRYPOINT命令的工作目录。语法如下：\n\n```\nWORKDIR /path/to/workdir\n```\n\n\n* ENV\n\n设置环境变量。它们使用键值对，增加运行程序的灵活性。语法如下：\n\n```\nENV <key> <value>\n```\n\n\n* USER\n镜像正在运行时设置一个UID。语法如下：\n\n```\nUSER <uid>\n```\n\n\n* VOLUME\n\n授权访问从容器内到主机上的目录。语法如下：\n\n```\nVOLUME [\"/data\"]\n```\n\n例子:\n```\nFROM localhost:5000/ubuntu:14.4\nMAINTAINER wudizhangzhi\nADD localfile.txt /home/targetfile.txt\nWORKDIR /home/\nRUN pip install -r targetfile.txt\nEXPOSE 7777\n```\n```bash\ndocker build -t wudizhangzhi/ubuntu:latest .\n```\n","slug":"Dockerfile的创建","published":1,"updated":"2017-02-17T09:13:32.276Z","_id":"ciz9l9ks80001q2m8i6d5hcxm","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>FROM <image name=\"\"></image></li>\n</ul>\n<p>指定容器基于哪个基础镜像创建</p>\n<ul>\n<li>MAINTAINER <author name=\"\"></author></li>\n</ul>\n<p>设置镜像的作者</p>\n<ul>\n<li>RUN <commend></commend></li>\n</ul>\n<p>在容器中运行的命令</p>\n<ul>\n<li>ADD <src> <destination></destination></src></li>\n</ul>\n<p>复制文件指令, destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件</p>\n<ul>\n<li>CMD</li>\n</ul>\n<p>提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效,CMD有三种形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</div><div class=\"line\">CMD [&quot;param1&quot;,&quot;param2&quot;]</div><div class=\"line\">CMD command param1 param2</div></pre></td></tr></table></figure></p>\n<ul>\n<li>EXPOSE <port></port></li>\n</ul>\n<p>指定容器运行在监听的端口</p>\n<ul>\n<li>ENTRYPOINT</li>\n</ul>\n<p>配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;,&quot;param2&quot;]</div><div class=\"line\">ENTRYPOINT command param1 param2</div></pre></td></tr></table></figure></p>\n<ul>\n<li>WORKDIR</li>\n</ul>\n<p>指定RUN、CMD与ENTRYPOINT命令的工作目录。语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">WORKDIR /path/to/workdir</div></pre></td></tr></table></figure>\n<ul>\n<li>ENV</li>\n</ul>\n<p>设置环境变量。它们使用键值对，增加运行程序的灵活性。语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ENV &lt;key&gt; &lt;value&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>USER<br>镜像正在运行时设置一个UID。语法如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">USER &lt;uid&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>VOLUME</li>\n</ul>\n<p>授权访问从容器内到主机上的目录。语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">VOLUME [&quot;/data&quot;]</div></pre></td></tr></table></figure>\n<p>例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">FROM localhost:5000/ubuntu:14.4</div><div class=\"line\">MAINTAINER wudizhangzhi</div><div class=\"line\">ADD localfile.txt /home/targetfile.txt</div><div class=\"line\">WORKDIR /home/</div><div class=\"line\">RUN pip install -r targetfile.txt</div><div class=\"line\">EXPOSE 7777</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">docker build -t wudizhangzhi/ubuntu:latest .</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<ul>\n<li>FROM <image name=\"\"></image></li>\n</ul>\n<p>指定容器基于哪个基础镜像创建</p>\n<ul>\n<li>MAINTAINER <author name=\"\"></author></li>\n</ul>\n<p>设置镜像的作者</p>\n<ul>\n<li>RUN <commend></commend></li>\n</ul>\n<p>在容器中运行的命令</p>\n<ul>\n<li>ADD <src> <destination></destination></src></li>\n</ul>\n<p>复制文件指令, destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件</p>\n<ul>\n<li>CMD</li>\n</ul>\n<p>提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效,CMD有三种形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</div><div class=\"line\">CMD [&quot;param1&quot;,&quot;param2&quot;]</div><div class=\"line\">CMD command param1 param2</div></pre></td></tr></table></figure></p>\n<ul>\n<li>EXPOSE <port></port></li>\n</ul>\n<p>指定容器运行在监听的端口</p>\n<ul>\n<li>ENTRYPOINT</li>\n</ul>\n<p>配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;,&quot;param2&quot;]</div><div class=\"line\">ENTRYPOINT command param1 param2</div></pre></td></tr></table></figure></p>\n<ul>\n<li>WORKDIR</li>\n</ul>\n<p>指定RUN、CMD与ENTRYPOINT命令的工作目录。语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">WORKDIR /path/to/workdir</div></pre></td></tr></table></figure>\n<ul>\n<li>ENV</li>\n</ul>\n<p>设置环境变量。它们使用键值对，增加运行程序的灵活性。语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ENV &lt;key&gt; &lt;value&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>USER<br>镜像正在运行时设置一个UID。语法如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">USER &lt;uid&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>VOLUME</li>\n</ul>\n<p>授权访问从容器内到主机上的目录。语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">VOLUME [&quot;/data&quot;]</div></pre></td></tr></table></figure>\n<p>例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">FROM localhost:5000/ubuntu:14.4</div><div class=\"line\">MAINTAINER wudizhangzhi</div><div class=\"line\">ADD localfile.txt /home/targetfile.txt</div><div class=\"line\">WORKDIR /home/</div><div class=\"line\">RUN pip install -r targetfile.txt</div><div class=\"line\">EXPOSE 7777</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">docker build -t wudizhangzhi/ubuntu:latest .</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Valentine's Day","subtitle":"for yumengqian","date":"2017-02-14T05:00:00.000Z","author":"月牙天冲","header-img":"http://olch8050n.bkt.clouddn.com/bac2.jpeg","cdn":"header-off","_content":"\n\nValentine's Day\n===\n\n\n![lover](http://olch8050n.bkt.clouddn.com/bac2.jpeg)\n* 用此文纪念和小于的第一个情人节\n","source":"_posts/Valentine-s-Day.md","raw":"---\nlayout: post\ntitle: Valentine's Day\nsubtitle: \"for yumengqian\"\ndate: 2017-02-14 13:00\nauthor: \"月牙天冲\"\nheader-img: \"http://olch8050n.bkt.clouddn.com/bac2.jpeg\"\ncdn: 'header-off'\ntags:\n\t- Lover\n\t- 智障\n---\n\n\nValentine's Day\n===\n\n\n![lover](http://olch8050n.bkt.clouddn.com/bac2.jpeg)\n* 用此文纪念和小于的第一个情人节\n","slug":"Valentine-s-Day","published":1,"updated":"2017-02-15T02:15:49.711Z","comments":1,"photos":[],"link":"","_id":"ciz9l9ksc0002q2m8bin83hsz","content":"<h1 id=\"Valentine’s-Day\"><a href=\"#Valentine’s-Day\" class=\"headerlink\" title=\"Valentine’s Day\"></a>Valentine’s Day</h1><p><img src=\"http://olch8050n.bkt.clouddn.com/bac2.jpeg\" alt=\"lover\"></p>\n<ul>\n<li>用此文纪念和小于的第一个情人节</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Valentine’s-Day\"><a href=\"#Valentine’s-Day\" class=\"headerlink\" title=\"Valentine’s Day\"></a>Valentine’s Day</h1><p><img src=\"http://olch8050n.bkt.clouddn.com/bac2.jpeg\" alt=\"lover\"></p>\n<ul>\n<li>用此文纪念和小于的第一个情人节</li>\n</ul>\n"},{"title":"docker 本地Registry的部署","date":"2017-02-16T16:41:36.000Z","author":"月牙天冲","header-img":"docker.jpg","cdn":"header-off","_content":"\n# 1.本地Registry的部署\n运行下面命令获取registry镜像\n\n```bash\nsudo docker pull registry:2.1.1 # tag版本号随意设置\n```\n\n然后启动一个容器\n```bash\nsudo docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry:2.1.1\n```\n\nRegistry服务默认会将上传的镜像保存在容器的/var/lib/registry，我们将主机的/opt/registry目录挂载到该目录，即可实现将镜像保存到主机的/opt/registry目录了。\n\n运行docker ps 查看容易运行情况\n```bash\ndocker ps\n```\n\n启动了registry服务，打开浏览器输入http://127.0.0.1:5000/v2 ，出现下面情况说明registry运行正常\n```bash\ncurl localhost:5000/v2\n```\n返回{}\n\n# 2.验证\n我的机器上有个hello-world的镜像，我们要通过docker tag将该镜像标志为要推送到私有仓库，\n\n```bash\nsudo docker tag hello-world:1.0.0 127.0.0.1:5000/hello-world:1.0.0\n\nsudo docker push 127.0.0.1:5000/hello-world:1.0.0\n```\n验证\n```bash\ncurl http://127.0.0.1:5000/v2/_catalog\n```\n返回json\n\n\n![logo](docker-本地Registry的部署/docker.jpg)\n","source":"_posts/docker-本地Registry的部署.md","raw":"---\ntitle: docker 本地Registry的部署\ndate: 2017-02-17 00:41:36\nauthor: \"月牙天冲\"\nheader-img: \"docker.jpg\"\ncdn: 'header-off'\ntags:\n    - docker\n---\n\n# 1.本地Registry的部署\n运行下面命令获取registry镜像\n\n```bash\nsudo docker pull registry:2.1.1 # tag版本号随意设置\n```\n\n然后启动一个容器\n```bash\nsudo docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry:2.1.1\n```\n\nRegistry服务默认会将上传的镜像保存在容器的/var/lib/registry，我们将主机的/opt/registry目录挂载到该目录，即可实现将镜像保存到主机的/opt/registry目录了。\n\n运行docker ps 查看容易运行情况\n```bash\ndocker ps\n```\n\n启动了registry服务，打开浏览器输入http://127.0.0.1:5000/v2 ，出现下面情况说明registry运行正常\n```bash\ncurl localhost:5000/v2\n```\n返回{}\n\n# 2.验证\n我的机器上有个hello-world的镜像，我们要通过docker tag将该镜像标志为要推送到私有仓库，\n\n```bash\nsudo docker tag hello-world:1.0.0 127.0.0.1:5000/hello-world:1.0.0\n\nsudo docker push 127.0.0.1:5000/hello-world:1.0.0\n```\n验证\n```bash\ncurl http://127.0.0.1:5000/v2/_catalog\n```\n返回json\n\n\n![logo](docker-本地Registry的部署/docker.jpg)\n","slug":"docker-本地Registry的部署","published":1,"updated":"2017-02-17T08:49:58.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz9l9ksk0004q2m8ewm3g64x","content":"<h1 id=\"1-本地Registry的部署\"><a href=\"#1-本地Registry的部署\" class=\"headerlink\" title=\"1.本地Registry的部署\"></a>1.本地Registry的部署</h1><p>运行下面命令获取registry镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo docker pull registry:2.1.1 <span class=\"comment\"># tag版本号随意设置</span></div></pre></td></tr></table></figure>\n<p>然后启动一个容器<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo docker run <span class=\"_\">-d</span> -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry:2.1.1</div></pre></td></tr></table></figure></p>\n<p>Registry服务默认会将上传的镜像保存在容器的/var/lib/registry，我们将主机的/opt/registry目录挂载到该目录，即可实现将镜像保存到主机的/opt/registry目录了。</p>\n<p>运行docker ps 查看容易运行情况<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">docker ps</div></pre></td></tr></table></figure></p>\n<p>启动了registry服务，打开浏览器输入<a href=\"http://127.0.0.1:5000/v2\" target=\"_blank\" rel=\"external\">http://127.0.0.1:5000/v2</a> ，出现下面情况说明registry运行正常<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl localhost:5000/v2</div></pre></td></tr></table></figure></p>\n<p>返回{}</p>\n<h1 id=\"2-验证\"><a href=\"#2-验证\" class=\"headerlink\" title=\"2.验证\"></a>2.验证</h1><p>我的机器上有个hello-world的镜像，我们要通过docker tag将该镜像标志为要推送到私有仓库，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo docker tag hello-world:1.0.0 127.0.0.1:5000/hello-world:1.0.0</div><div class=\"line\"></div><div class=\"line\">sudo docker push 127.0.0.1:5000/hello-world:1.0.0</div></pre></td></tr></table></figure>\n<p>验证<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl http://127.0.0.1:5000/v2/_catalog</div></pre></td></tr></table></figure></p>\n<p>返回json</p>\n<p><img src=\"/2017/02/17/docker-本地Registry的部署/docker.jpg\" alt=\"logo\"></p>\n","excerpt":"","more":"<h1 id=\"1-本地Registry的部署\"><a href=\"#1-本地Registry的部署\" class=\"headerlink\" title=\"1.本地Registry的部署\"></a>1.本地Registry的部署</h1><p>运行下面命令获取registry镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo docker pull registry:2.1.1 <span class=\"comment\"># tag版本号随意设置</span></div></pre></td></tr></table></figure>\n<p>然后启动一个容器<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo docker run <span class=\"_\">-d</span> -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry:2.1.1</div></pre></td></tr></table></figure></p>\n<p>Registry服务默认会将上传的镜像保存在容器的/var/lib/registry，我们将主机的/opt/registry目录挂载到该目录，即可实现将镜像保存到主机的/opt/registry目录了。</p>\n<p>运行docker ps 查看容易运行情况<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">docker ps</div></pre></td></tr></table></figure></p>\n<p>启动了registry服务，打开浏览器输入<a href=\"http://127.0.0.1:5000/v2\">http://127.0.0.1:5000/v2</a> ，出现下面情况说明registry运行正常<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl localhost:5000/v2</div></pre></td></tr></table></figure></p>\n<p>返回{}</p>\n<h1 id=\"2-验证\"><a href=\"#2-验证\" class=\"headerlink\" title=\"2.验证\"></a>2.验证</h1><p>我的机器上有个hello-world的镜像，我们要通过docker tag将该镜像标志为要推送到私有仓库，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo docker tag hello-world:1.0.0 127.0.0.1:5000/hello-world:1.0.0</div><div class=\"line\"></div><div class=\"line\">sudo docker push 127.0.0.1:5000/hello-world:1.0.0</div></pre></td></tr></table></figure>\n<p>验证<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl http://127.0.0.1:5000/v2/_catalog</div></pre></td></tr></table></figure></p>\n<p>返回json</p>\n<p><img src=\"/2017/02/17/docker-本地Registry的部署/docker.jpg\" alt=\"logo\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/docker-本地Registry的部署/docker.jpg","slug":"docker.jpg","post":"ciz9l9ksk0004q2m8ewm3g64x","modified":0,"renderable":0},{"_id":"source/_posts/Dockerfile的创建/docker.jpg","slug":"docker.jpg","post":"ciz9l9ks80001q2m8i6d5hcxm","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ciz9l9ksc0002q2m8bin83hsz","tag_id":"ciz9l9ksl0005q2m8u4of200k","_id":"ciz9l9ksp0009q2m8m588hnio"},{"post_id":"ciz9l9ksc0002q2m8bin83hsz","tag_id":"ciz9l9ksn0007q2m8ja2q4rzu","_id":"ciz9l9ksp000aq2m8sx3nyczy"},{"post_id":"ciz9l9ksk0004q2m8ewm3g64x","tag_id":"ciz9l9ksf0003q2m8r2uqf2af","_id":"ciz9l9ksp000bq2m8il6j2seb"},{"post_id":"ciz9l9ks80001q2m8i6d5hcxm","tag_id":"ciz9l9ksf0003q2m8r2uqf2af","_id":"ciz9lhg8d0000o8m8jugsvuwx"}],"Tag":[{"name":"docker","_id":"ciz9l9ksf0003q2m8r2uqf2af"},{"name":"Lover","_id":"ciz9l9ksl0005q2m8u4of200k"},{"name":"智障","_id":"ciz9l9ksn0007q2m8ja2q4rzu"}]}}