{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Anisina/source/css/blog-style.css","path":"css/blog-style.css","modified":1,"renderable":1},{"_id":"themes/Anisina/source/css/syntax.styl","path":"css/syntax.styl","modified":1,"renderable":1},{"_id":"themes/Anisina/source/css/syntax_bck.styl","path":"css/syntax_bck.styl","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/blog.js","path":"js/blog.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/Anisina/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/Anisina/_config.yml","hash":"1a6492e8ab3d6f3ab6a374d037dbff2b98a8eb22","modified":1493310461000},{"_id":"themes/Anisina/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1493310461000},{"_id":"source/.DS_Store","hash":"290269ae083bf3c0eca189d3a17984e5353034c4","modified":1494948481000},{"_id":"themes/Anisina/README.md","hash":"412d514cbc7ba8705faaa614a322c63b48e91550","modified":1493310461000},{"_id":"themes/Anisina/package.json","hash":"12541fbf56f785e4f5d486a55b4939f3033f625b","modified":1493310461000},{"_id":"source/_discarded/alentine-s-Day.md","hash":"7bddfe3e5ce1fefc950bde62b8ea589228fe3f84","modified":1493310461000},{"_id":"source/_posts/Dockerfile的创建.md","hash":"b6fcdffd0016739c4e22dca88c24406f5b7f7dd0","modified":1493310461000},{"_id":"source/_posts/.DS_Store","hash":"915f0df3b239a70c7e2483b8acc90f3738888ab3","modified":1494948481000},{"_id":"source/_posts/docker-pull被重置的问题.md","hash":"83f1c306ca1a5e57460460fdd13951d87bd001aa","modified":1493310461000},{"_id":"source/_posts/mysql主从配置.md","hash":"257a4a04436aa3da6b334aa3f59011c9becf99c4","modified":1493310461000},{"_id":"source/_posts/docker-本地Registry的部署.md","hash":"11e99456f17ed0fdc8e74036127d638b4e06dbe7","modified":1493310461000},{"_id":"source/_posts/my-promise.md","hash":"7d7304876fdb3dec8a46ad0db5e16567463e2aa3","modified":1495867300000},{"_id":"source/_posts/mysql增量备份和恢复.md","hash":"5dd6e54e178650c7719b1d688796855162d58056","modified":1495805104000},{"_id":"source/_posts/【SOAR】cosplay社.md","hash":"1ceb143d60d53454f95874f8fc811413a57f1128","modified":1494948708000},{"_id":"source/_posts/常用命令-不定期更新.md","hash":"93ec668b7682ae2be1c16ed1738d834f5047b969","modified":1495805166000},{"_id":"source/_posts/第十三章-红黑树.md","hash":"2d78191083071df94cbfbaa9d3a2fba9f40e7e5d","modified":1496157125000},{"_id":"source/_posts/机器学习-一-简单线性回归.md","hash":"e64bb8a8f45cc48e24d5f9a1221df0a83ccad4de","modified":1493310461000},{"_id":"source/tags/index.md","hash":"8fa1a71f1ed06b30a030a72c38196f529624fd40","modified":1493310461000},{"_id":"source/_posts/算法导论-第二章-算法基础.md","hash":"179851e29af9df03fcc5bb30d5bb435d763dc2e4","modified":1493310461000},{"_id":"themes/Anisina/Screenshots/mobile-index.jpeg","hash":"cd75f77f5d865d42182e2233e354eeba9f114d98","modified":1493310461000},{"_id":"themes/Anisina/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1493310461000},{"_id":"themes/Anisina/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1493310461000},{"_id":"themes/Anisina/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1493310461000},{"_id":"themes/Anisina/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1493310461000},{"_id":"themes/Anisina/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1493310461000},{"_id":"themes/Anisina/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1493310461000},{"_id":"themes/Anisina/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1493310461000},{"_id":"themes/Anisina/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1493310461000},{"_id":"themes/Anisina/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1493310461000},{"_id":"themes/Anisina/layout/404.ejs","hash":"1fe05722bd1b32bbe0ae4e3e880866f935e0ae11","modified":1493310461000},{"_id":"themes/Anisina/layout/index.ejs","hash":"a94ac678f6b24a46824d45ec058b0ab2105a92c9","modified":1493310461000},{"_id":"themes/Anisina/layout/layout.ejs","hash":"9d3d82a707b107f42db34ef5a8016693da2be742","modified":1493310461000},{"_id":"themes/Anisina/layout/page.ejs","hash":"95bbc74aa6d10cddddd7a5cd5d2a06482f5ea173","modified":1493310461000},{"_id":"themes/Anisina/layout/poetry.ejs","hash":"6c955d419050825e13d39c780d45aceafbf6552d","modified":1493310461000},{"_id":"themes/Anisina/layout/post.ejs","hash":"2ab80066538d3729afcee5056792e8d37e6be00d","modified":1493310461000},{"_id":"themes/Anisina/layout/tags.ejs","hash":"a144c3b5f4a70f881333e4de392a265469cdb649","modified":1493310461000},{"_id":"themes/Anisina/layout/works.ejs","hash":"1df954e54098cc4845295836374abed870789dcd","modified":1493310461000},{"_id":"source/_posts/awesome-python.md","hash":"6a95f56e626e1d02a54484d908132fe9da784541","modified":1493310461000},{"_id":"source/_posts/Dockerfile的创建/docker.jpg","hash":"681e91e982bb01c245d328be255c206aac328a27","modified":1493310461000},{"_id":"source/_posts/my-promise/yueshujun.png","hash":"e5242ba175203bd4a23ef4f314f6ab58ff27c009","modified":1495805680000},{"_id":"source/_posts/docker-本地Registry的部署/docker.jpg","hash":"681e91e982bb01c245d328be255c206aac328a27","modified":1493310461000},{"_id":"source/_posts/机器学习-一-简单线性回归/ex1data1.txt","hash":"0c3804a5f2517fb2e1651cfdba74c347c27f3221","modified":1493310461000},{"_id":"source/_posts/机器学习-一-简单线性回归/figure1.png","hash":"c762f0f72ac5973f28a7f73a913faec8d745b325","modified":1493310461000},{"_id":"source/_posts/机器学习-一-简单线性回归/figure2.png","hash":"d8644f2737edf9197444e9b88c0197e4256e0042","modified":1493310461000},{"_id":"source/_posts/机器学习-一-简单线性回归/formula1.png","hash":"3723e9bf5fb97f9e4677dcd3b3d1bbfd192c4af0","modified":1493310461000},{"_id":"source/_posts/机器学习-一-简单线性回归/formula3.png","hash":"6e602dec70a264e28489071b223e4534a85834a1","modified":1493310461000},{"_id":"source/_posts/机器学习-一-简单线性回归/figure3.png","hash":"0fddd9aae082d241704e0cde476829949df73650","modified":1493310461000},{"_id":"source/_posts/第十三章-红黑树/13_2_1.png","hash":"eb995555cb7619d1ce9d275811f91eb6d88cffb0","modified":1496155993000},{"_id":"source/_posts/机器学习-一-简单线性回归/formula4.png","hash":"c3ec653220f7e4f7ac1806bcb9620a5569f2d9a2","modified":1493310461000},{"_id":"source/_posts/机器学习-一-简单线性回归/formula2.png","hash":"97d59bf0ab811eb85281ce9846c460be5bb89685","modified":1493310461000},{"_id":"source/_posts/算法导论-第二章-算法基础/pic1.png","hash":"ef85b448ac50b28aefff2edbafa8700f51b52d95","modified":1493310461000},{"_id":"themes/Anisina/Screenshots/Anisina.png","hash":"146dd991f55a827a514259e20a51de1e9b07a13d","modified":1493310461000},{"_id":"themes/Anisina/layout/_partial/pagination.ejs","hash":"c9143f4c5a5c7f136ecb75eb87a14030620e105a","modified":1493310461000},{"_id":"themes/Anisina/layout/_partial/head.ejs","hash":"4e0d96cac503d4e3a5b254d8b8175c392971ce38","modified":1493310461000},{"_id":"themes/Anisina/layout/_partial/footer.ejs","hash":"827e747a2c7653e4f1c0e9432c888f889167f5d2","modified":1493310461000},{"_id":"themes/Anisina/layout/_partial/nav.ejs","hash":"3baa41d595e951efa1db34dd1789c6f8d3b094da","modified":1493310461000},{"_id":"themes/Anisina/source/css/blog-style.css","hash":"d064f7fd3b16dabca768a06e9779cbb7ba608ce7","modified":1493310461000},{"_id":"themes/Anisina/source/css/syntax.styl","hash":"a880a540401856e8e01e614450096dd790518b66","modified":1493310461000},{"_id":"themes/Anisina/source/css/syntax_bck.styl","hash":"9c8cfb792a6ba38174358c8879dbada2e18d1f09","modified":1493310461000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1493310461000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1493310461000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1493310461000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1493310461000},{"_id":"themes/Anisina/source/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1493310461000},{"_id":"themes/Anisina/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1493310461000},{"_id":"themes/Anisina/source/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1493310461000},{"_id":"themes/Anisina/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1493310461000},{"_id":"themes/Anisina/Screenshots/poetry-show.png","hash":"f5fdcd25026a87a0aafeebb1f19cdb3c0a81a666","modified":1493310461000},{"_id":"themes/Anisina/source/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1493310461000},{"_id":"themes/Anisina/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1493310461000},{"_id":"themes/Anisina/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1493310461000},{"_id":"themes/Anisina/Screenshots/mobile-post.jpeg","hash":"2081cdff23a9a8c185a48d9aabcc9dc8e77833ec","modified":1493310461000},{"_id":"themes/Anisina/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1493310461000},{"_id":"themes/Anisina/Screenshots/pc-index.png","hash":"b04094dac75cb656b4244c1dfaf246168a0f8926","modified":1493310461000},{"_id":"themes/Anisina/Screenshots/pc-post.png","hash":"cde56c0797b6ff8dd555fb1f8c3f9b21bceaa3be","modified":1493310461000},{"_id":"source/_posts/【SOAR】cosplay社/QQ20170516-0.jpg","hash":"30e2e8c603fe64c09029c88460d70cf8b83d7014","modified":1495293446000},{"_id":"public/tags/index.html","hash":"d40d9f857c9b308576c3a27d2d039d3c8ccbecac","modified":1496157842143},{"_id":"public/2017/05/26/my-promise/index.html","hash":"6e2fa6bf99a6ebaf643fb0bfcbfd762a7c1fadec","modified":1496157842147},{"_id":"public/2017/05/26/mysql增量备份和恢复/index.html","hash":"64c496385751b93fd43ab22e9173e22a9824f487","modified":1496157842150},{"_id":"public/2017/05/20/常用命令-不定期更新/index.html","hash":"f7dc5958da96a8d473f0577c02fcec65567a382e","modified":1496157842150},{"_id":"public/2017/05/16/【SOAR】cosplay社/index.html","hash":"6a474fe2653dcdb8f5e31988cf85f10c54efe86b","modified":1496157842150},{"_id":"public/2017/02/17/Dockerfile的创建/index.html","hash":"ca8f4a0d569956a5ffde0997511c410b19fb1b0d","modified":1496157842150},{"_id":"public/2017/02/17/docker-本地Registry的部署/index.html","hash":"58945e5aadb16d127e33e8485500e5b33514fd98","modified":1496157842150},{"_id":"public/archives/page/2/index.html","hash":"48ee4301a08463377f4f9b2850bfcc255c77a7ba","modified":1496157842151},{"_id":"public/archives/2017/page/2/index.html","hash":"5593b60c9c42295ea0597636f63d79e6d3e0c75e","modified":1496157842151},{"_id":"public/archives/2017/02/index.html","hash":"53d5c2d9271538e7d73f0960503ee1a9f4d5ba6d","modified":1496157842151},{"_id":"public/archives/2017/03/index.html","hash":"e65654f793be63b5655ed1509154fb734dba7c64","modified":1496157842151},{"_id":"public/archives/2017/05/index.html","hash":"415e3a34a43161b4b8fb6f1eccb8d8529eb71725","modified":1496157842151},{"_id":"public/page/2/index.html","hash":"43c6c215d90954d22f4de7721f539deab962c4d2","modified":1496157842151},{"_id":"public/tags/docker/index.html","hash":"6289e3b9502d92c7e9ea322fbbef07aeb1eef971","modified":1496157842151},{"_id":"public/tags/mysql/index.html","hash":"1588e4f1d9a332567972b56d06652b995248a1cd","modified":1496157842151},{"_id":"public/tags/学习笔记/index.html","hash":"500cc253cdf1cdefb9170daeb4a12d0211cad77c","modified":1496157842151},{"_id":"public/tags/动漫/index.html","hash":"1bfb61f21b3a98495b04a2f59c0c54d7e24e5e02","modified":1496157842151},{"_id":"public/tags/算法导论/index.html","hash":"f4916914b9afdf0602e9b44bc81fbdd7c17cbc28","modified":1496157842151},{"_id":"public/tags/机器学习/index.html","hash":"306f753d9c552b82315738d0d042c8a6dab3cf62","modified":1496157842151},{"_id":"public/tags/python/index.html","hash":"02ff141d0b3b62281a24fb4cef9642df563529dc","modified":1496157842151},{"_id":"public/2017/03/17/mysql主从配置/index.html","hash":"107760a68b535918b66ac2f663b02db6a238c846","modified":1496157842151},{"_id":"public/2017/03/17/docker-pull被重置的问题/index.html","hash":"e6fa59f1dd069cab3548b30a39a425a3f89b03e4","modified":1496157842151},{"_id":"public/2017/03/02/算法导论-第二章-算法基础/index.html","hash":"1b8a8f81f3a5fb1899e608d50abaf0ab01d29b38","modified":1496157842151},{"_id":"public/2017/02/22/awesome-python/index.html","hash":"27c999a4a4a9614202bc5534b127851c4285ec3c","modified":1496157842152},{"_id":"public/2017/02/21/机器学习-一-简单线性回归/index.html","hash":"7b695b6d2b85999123eb6a6855f410a2dc01e1bf","modified":1496157842152},{"_id":"public/archives/index.html","hash":"c94df3bd3a14ca088aae9deac5cbcc80a31e36b7","modified":1496157842152},{"_id":"public/archives/2017/index.html","hash":"9a009832b8ae396f13c13e637a2a416b5494dfa6","modified":1496157842152},{"_id":"public/index.html","hash":"74e9de82c1743ea2de08a140fc9915df2806866a","modified":1496157842152},{"_id":"public/2017/05/30/第十三章-红黑树/index.html","hash":"7f069446e36b48fe377b311f2256d48abde31dbd","modified":1496157842159},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1496157842171},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1496157842171},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1496157842172},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1496157842172},{"_id":"public/2017/02/17/Dockerfile的创建/docker.jpg","hash":"681e91e982bb01c245d328be255c206aac328a27","modified":1496157842172},{"_id":"public/2017/02/17/docker-本地Registry的部署/docker.jpg","hash":"681e91e982bb01c245d328be255c206aac328a27","modified":1496157842172},{"_id":"public/2017/05/26/my-promise/yueshujun.png","hash":"e5242ba175203bd4a23ef4f314f6ab58ff27c009","modified":1496157842172},{"_id":"public/2017/03/02/算法导论-第二章-算法基础/pic1.png","hash":"ef85b448ac50b28aefff2edbafa8700f51b52d95","modified":1496157842172},{"_id":"public/2017/02/21/机器学习-一-简单线性回归/ex1data1.txt","hash":"0c3804a5f2517fb2e1651cfdba74c347c27f3221","modified":1496157842172},{"_id":"public/2017/02/21/机器学习-一-简单线性回归/figure1.png","hash":"c762f0f72ac5973f28a7f73a913faec8d745b325","modified":1496157842172},{"_id":"public/2017/02/21/机器学习-一-简单线性回归/figure2.png","hash":"d8644f2737edf9197444e9b88c0197e4256e0042","modified":1496157842172},{"_id":"public/2017/02/21/机器学习-一-简单线性回归/figure3.png","hash":"0fddd9aae082d241704e0cde476829949df73650","modified":1496157842172},{"_id":"public/2017/02/21/机器学习-一-简单线性回归/formula1.png","hash":"3723e9bf5fb97f9e4677dcd3b3d1bbfd192c4af0","modified":1496157842172},{"_id":"public/2017/02/21/机器学习-一-简单线性回归/formula2.png","hash":"97d59bf0ab811eb85281ce9846c460be5bb89685","modified":1496157842172},{"_id":"public/2017/02/21/机器学习-一-简单线性回归/formula4.png","hash":"c3ec653220f7e4f7ac1806bcb9620a5569f2d9a2","modified":1496157842172},{"_id":"public/2017/02/21/机器学习-一-简单线性回归/formula3.png","hash":"6e602dec70a264e28489071b223e4534a85834a1","modified":1496157842172},{"_id":"public/2017/05/30/第十三章-红黑树/13_2_1.png","hash":"eb995555cb7619d1ce9d275811f91eb6d88cffb0","modified":1496157842172},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1496157842591},{"_id":"public/css/syntax_bck.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496157842601},{"_id":"public/css/syntax.css","hash":"4616879fec214c9cc4f5835615348f0bbeabf2a9","modified":1496157842601},{"_id":"public/js/blog.js","hash":"0f805c744ef8a48c0abdd9d204cfc19ee6cafc14","modified":1496157842601},{"_id":"public/js/totop.js","hash":"11ede60fccb7c763d6973f80efc78b47c0843746","modified":1496157842601},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1496157842601},{"_id":"public/css/blog-style.css","hash":"d064f7fd3b16dabca768a06e9779cbb7ba608ce7","modified":1496157842601},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1496157842601},{"_id":"public/css/bootstrap.min.css","hash":"c5db932e115ff97af7b4512b947cde3ba2964db8","modified":1496157842601},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1496157842601},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1496157842601},{"_id":"public/2017/05/16/【SOAR】cosplay社/QQ20170516-0.jpg","hash":"30e2e8c603fe64c09029c88460d70cf8b83d7014","modified":1496157842620}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2017-02-16T16:02:29.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-02-17 00:02:29\nlayout: tags\n---\n","updated":"2017-04-27T16:27:41.000Z","path":"tags/index.html","comments":1,"_id":"cj3bpqyop0001sof1p662kl41","content":"","excerpt":"","more":""}],"Post":[{"title":"Dockerfile的创建","date":"2017-02-17T08:52:27.000Z","author":"月牙天冲","header-img":"http://images2015.cnblogs.com/blog/1003956/201609/1003956-20160929094610156-2054520507.png","cdn":"header-off","_content":"\n\n* FROM <image name>\n\n指定容器基于哪个基础镜像创建\n\n\n* MAINTAINER <author name>\n\n设置镜像的作者\n\n\n* RUN <commend>\n\n在容器中运行的命令\n\n\n* ADD <src> <destination>\n\n复制文件指令, destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件\n\n\n* CMD\n\n提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效,CMD有三种形式：\n```\nCMD [\"executable\",\"param1\",\"param2\"]\nCMD [\"param1\",\"param2\"]\nCMD command param1 param2\n```\n\n\n* EXPOSE <port>\n\n指定容器运行在监听的端口\n\n\n* ENTRYPOINT\n\n配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：\n```\nENTRYPOINT [\"executable\", \"param1\",\"param2\"]\nENTRYPOINT command param1 param2\n```\n\n\n* WORKDIR\n\n指定RUN、CMD与ENTRYPOINT命令的工作目录。语法如下：\n\n```\nWORKDIR /path/to/workdir\n```\n\n\n* ENV\n\n设置环境变量。它们使用键值对，增加运行程序的灵活性。语法如下：\n\n```\nENV <key> <value>\n```\n\n\n* USER\n镜像正在运行时设置一个UID。语法如下：\n\n```\nUSER <uid>\n```\n\n\n* VOLUME\n\n授权访问从容器内到主机上的目录。语法如下：\n\n```\nVOLUME [\"/data\"]\n```\n\n例子:\n```\nFROM localhost:5000/ubuntu:14.4\nMAINTAINER wudizhangzhi\nADD localfile.txt /home/targetfile.txt\nWORKDIR /home/\nRUN pip install -r targetfile.txt\nEXPOSE 7777\n```\n```bash\ndocker build -t wudizhangzhi/ubuntu:latest .\n```\n","source":"_posts/Dockerfile的创建.md","raw":"---\ntitle: Dockerfile的创建\ndate: 2017-02-17 16:52:27\nauthor: \"月牙天冲\"\nheader-img: \"http://images2015.cnblogs.com/blog/1003956/201609/1003956-20160929094610156-2054520507.png\"\ncdn: 'header-off'\ntags:\n  - docker\n---\n\n\n* FROM <image name>\n\n指定容器基于哪个基础镜像创建\n\n\n* MAINTAINER <author name>\n\n设置镜像的作者\n\n\n* RUN <commend>\n\n在容器中运行的命令\n\n\n* ADD <src> <destination>\n\n复制文件指令, destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件\n\n\n* CMD\n\n提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效,CMD有三种形式：\n```\nCMD [\"executable\",\"param1\",\"param2\"]\nCMD [\"param1\",\"param2\"]\nCMD command param1 param2\n```\n\n\n* EXPOSE <port>\n\n指定容器运行在监听的端口\n\n\n* ENTRYPOINT\n\n配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：\n```\nENTRYPOINT [\"executable\", \"param1\",\"param2\"]\nENTRYPOINT command param1 param2\n```\n\n\n* WORKDIR\n\n指定RUN、CMD与ENTRYPOINT命令的工作目录。语法如下：\n\n```\nWORKDIR /path/to/workdir\n```\n\n\n* ENV\n\n设置环境变量。它们使用键值对，增加运行程序的灵活性。语法如下：\n\n```\nENV <key> <value>\n```\n\n\n* USER\n镜像正在运行时设置一个UID。语法如下：\n\n```\nUSER <uid>\n```\n\n\n* VOLUME\n\n授权访问从容器内到主机上的目录。语法如下：\n\n```\nVOLUME [\"/data\"]\n```\n\n例子:\n```\nFROM localhost:5000/ubuntu:14.4\nMAINTAINER wudizhangzhi\nADD localfile.txt /home/targetfile.txt\nWORKDIR /home/\nRUN pip install -r targetfile.txt\nEXPOSE 7777\n```\n```bash\ndocker build -t wudizhangzhi/ubuntu:latest .\n```\n","slug":"Dockerfile的创建","published":1,"updated":"2017-04-27T16:27:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3bpqyok0000sof1wcf2ep55","content":"<ul>\n<li>FROM <image name=\"\"></image></li>\n</ul>\n<p>指定容器基于哪个基础镜像创建</p>\n<ul>\n<li>MAINTAINER <author name=\"\"></author></li>\n</ul>\n<p>设置镜像的作者</p>\n<ul>\n<li>RUN <commend></commend></li>\n</ul>\n<p>在容器中运行的命令</p>\n<ul>\n<li>ADD <src> <destination></destination></src></li>\n</ul>\n<p>复制文件指令, destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件</p>\n<ul>\n<li>CMD</li>\n</ul>\n<p>提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效,CMD有三种形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</div><div class=\"line\">CMD [&quot;param1&quot;,&quot;param2&quot;]</div><div class=\"line\">CMD command param1 param2</div></pre></td></tr></table></figure></p>\n<ul>\n<li>EXPOSE <port></port></li>\n</ul>\n<p>指定容器运行在监听的端口</p>\n<ul>\n<li>ENTRYPOINT</li>\n</ul>\n<p>配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;,&quot;param2&quot;]</div><div class=\"line\">ENTRYPOINT command param1 param2</div></pre></td></tr></table></figure></p>\n<ul>\n<li>WORKDIR</li>\n</ul>\n<p>指定RUN、CMD与ENTRYPOINT命令的工作目录。语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">WORKDIR /path/to/workdir</div></pre></td></tr></table></figure>\n<ul>\n<li>ENV</li>\n</ul>\n<p>设置环境变量。它们使用键值对，增加运行程序的灵活性。语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ENV &lt;key&gt; &lt;value&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>USER<br>镜像正在运行时设置一个UID。语法如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">USER &lt;uid&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>VOLUME</li>\n</ul>\n<p>授权访问从容器内到主机上的目录。语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">VOLUME [&quot;/data&quot;]</div></pre></td></tr></table></figure>\n<p>例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">FROM localhost:5000/ubuntu:14.4</div><div class=\"line\">MAINTAINER wudizhangzhi</div><div class=\"line\">ADD localfile.txt /home/targetfile.txt</div><div class=\"line\">WORKDIR /home/</div><div class=\"line\">RUN pip install -r targetfile.txt</div><div class=\"line\">EXPOSE 7777</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">docker build -t wudizhangzhi/ubuntu:latest .</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<ul>\n<li>FROM <image name=\"\"></image></li>\n</ul>\n<p>指定容器基于哪个基础镜像创建</p>\n<ul>\n<li>MAINTAINER <author name=\"\"></author></li>\n</ul>\n<p>设置镜像的作者</p>\n<ul>\n<li>RUN <commend></commend></li>\n</ul>\n<p>在容器中运行的命令</p>\n<ul>\n<li>ADD <src> <destination></destination></src></li>\n</ul>\n<p>复制文件指令, destination是容器内的路径。source可以是URL或者是启动配置上下文中的一个文件</p>\n<ul>\n<li>CMD</li>\n</ul>\n<p>提供了容器默认的执行命令。 Dockerfile只允许使用一次CMD指令。 使用多个CMD会抵消之前所有的指令，只有最后一个指令生效,CMD有三种形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</div><div class=\"line\">CMD [&quot;param1&quot;,&quot;param2&quot;]</div><div class=\"line\">CMD command param1 param2</div></pre></td></tr></table></figure></p>\n<ul>\n<li>EXPOSE <port></port></li>\n</ul>\n<p>指定容器运行在监听的端口</p>\n<ul>\n<li>ENTRYPOINT</li>\n</ul>\n<p>配置给容器一个可执行的命令，这意味着在每次使用镜像创建容器时一个特定的应用程序可以被设置为默认程序。同时也意味着该镜像每次被调用时仅能运行指定的应用。类似于CMD，Docker只允许一个ENTRYPOINT，多个ENTRYPOINT会抵消之前所有的指令，只执行最后的ENTRYPOINT指令。语法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;,&quot;param2&quot;]</div><div class=\"line\">ENTRYPOINT command param1 param2</div></pre></td></tr></table></figure></p>\n<ul>\n<li>WORKDIR</li>\n</ul>\n<p>指定RUN、CMD与ENTRYPOINT命令的工作目录。语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">WORKDIR /path/to/workdir</div></pre></td></tr></table></figure>\n<ul>\n<li>ENV</li>\n</ul>\n<p>设置环境变量。它们使用键值对，增加运行程序的灵活性。语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ENV &lt;key&gt; &lt;value&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>USER<br>镜像正在运行时设置一个UID。语法如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">USER &lt;uid&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>VOLUME</li>\n</ul>\n<p>授权访问从容器内到主机上的目录。语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">VOLUME [&quot;/data&quot;]</div></pre></td></tr></table></figure>\n<p>例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">FROM localhost:5000/ubuntu:14.4</div><div class=\"line\">MAINTAINER wudizhangzhi</div><div class=\"line\">ADD localfile.txt /home/targetfile.txt</div><div class=\"line\">WORKDIR /home/</div><div class=\"line\">RUN pip install -r targetfile.txt</div><div class=\"line\">EXPOSE 7777</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">docker build -t wudizhangzhi/ubuntu:latest .</div></pre></td></tr></table></figure>\n"},{"title":"docker pull被重置的问题","date":"2017-03-17T06:12:20.000Z","author":"月牙天冲","_content":"\n\n\n\n例如：\n\n```bash\n$ docker pull ubuntu:16.04\nTrying to pull repository docker.io/library/ubuntu ...\nGet https://registry-1.docker.io/v2/library/ubuntu/manifests/sha256:dd7808d8792c9841d0b460122f1acf0a2dd1f56404f8d1e56298048885e45535:\nGet https://auth.docker.io/token?scope=repository%3Alibrary%2Fubuntu%3Apull&service=registry.docker.io:\nread tcp *.*.*.*:41348->50.17.62.194:443:\nread: connection reset by peer\n```\n\n- 原因：目测50.17.62.194被TCP重置。\n\n- 解决方法：\n\n    找到其可用IP：\n\n    ```bash\n    $ dig auth.docker.io\n    ```\n\n    ```bash\n     <<>> DiG 9.10.4-P6-RedHat-9.10.4-4.P6.fc25 <<>> auth.docker.io\n    ;; global options: +cmd\n    ;; Got answer:\n    ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 7119\n    ;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1\n\n    ;; OPT PSEUDOSECTION:\n    ; EDNS: version: 0, flags:; udp: 4096\n    ;; QUESTION SECTION:\n    ;auth.docker.io.\t\t\tIN\tA\n\n    ;; ANSWER SECTION:\n    auth.docker.io.\t\t60\tIN\tA\t34.193.147.40\n    auth.docker.io.\t\t60\tIN\tA\t50.17.62.194\n    auth.docker.io.\t\t60\tIN\tA\t52.5.246.212\n\n    ;; Query time: 130 msec\n    ;; SERVER: *.*.*.*#53(.*.*.*.*)\n    ;; WHEN: Tue Mar 07 11:03:29 CST 2017\n    ;; MSG SIZE  rcvd: 91\n    ```\n    改/etc/hosts强制docker.io相关的域名解析到其它可用IP：\n\n    ```\n    vi /etc/hosts\n    ```\n    ```\n    34.193.147.40 registry-1.docker.io auth.docker.io\n    ```\n\n\n\n顺便附上关于镜像的描述以及现在有哪些镜像提供商\n\n首先，需要明确一个问题：Mirror 与 Private Registry 有什么区别？\n\n抄自daocloud的说明：\n\n二者有着本质的差别。\n\nPrivate Registry 是开发者或者企业自建的镜像存储库，通常用来保存企业内部的 Docker 镜像，用于内部开发流程和产品的发布、版本控制。 Mirror 是一种代理中转服务，我们(指daocloud)提供的 Mirror 服务，直接对接 Docker Hub 的官方 Registry。Docker Hub 上有数以十万计的各类 Docker 镜像。 在使用 Private Registry 时，需要在 Docker Pull 或 Dockerfile 中直接键入 Private Registry 的地址，通常这样会导致与 Private Registry 的绑定，缺乏灵活性。 使用 Mirror 服务，只需要在 Docker 守护进程（Daemon）的配置文件中加入 Mirror 参数，即可在全局范围内透明的访问官方的 Docker Hub，避免了对 Dockerfile 镜像引用来源的修改。\n\n简单来说，Mirror类似CDN，本质是官方的cache；Private Registry类似私服，跟官方没什么关系。对我来说，由于我是要拖docker hub上的image，对应的是Mirror。 yum/apt的mirror又有点不一样，它其实是把官方的库文件整个拖到自己的服务器上做镜像（不管有没有用），并定时与官方做同步；而Docker mirror只会缓存曾经使用过的image。\n\n目前国内访问docker hub非常便秘，使用docker mirror势在必行。现有提供服务的有三家：ustc、daocloud、aliyun，下面会一一介绍。\n\n\n## 1. 网易163 docker镜像\n\n```bash\n$ sudo echo \"DOCKER_OPTS=\\\"\\$DOCKER_OPTS --registry-mirror=http://hub-mirror.c.163.com\\\"\" >> /etc/default/docker\n$ service docker restart\n```\n\n## 2. ustc的镜像\n\nustc是老牌的Linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。之前在blog里有提到可以用ustc的docker仓库镜像，使用方法参考ustc docker 镜像使用帮助。\n\nustc的docker镜像速度不错，一直用的挺happy。但是今天发现不好使了，可能跟这件事有关系吧，今天尝试去pull ubuntu，非常慢，应该是直接去docker hub上去拉了，基本没有加速效果。\n\nustc docker mirror的优势之一是，不需要注册，公共服务(这才是我熟悉的ustc嘛)。\n\n## 3. daocloud\n\nDaoCloud也提供了docker加速器，但是跟ustc不同，需要用户注册后才能使用，并且每月限制流量10GB。linux上使用比较简单，一条命令搞定：\n\n```bash\ncurl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://{your_id}.m.daocloud.io\n```\n\n实际改的是/usr/lib/systemd/system/docker.service，加了个–registry-mirror参数，：\n\nExecStart=/usr/bin/docker-current daemon --registry-mirror=http://{your_id}.m.daocloud.io\\\n\n设置后，需要重新加载配置&重启：\n\n```bash\nsystemctl enable docker; systemctl daemon-reload ; systemctl restart docker\n```\n\n但是！今天使用DaoCloud的docker加速器体验非常差，加速效果基本没感觉，果断放弃。\n## 4. alicloud\n\n阿里云也提供了docker加速器，不过比ustc更麻烦：不光要注册为阿里云的用户，还得加入开发者平台。不过捏着鼻子昨晚这些以后，它的服务还真是不错，基本1MB/s的pull速度(部分原因可能是因为我也在杭州吧)。配置方法跟daocloud类似，也是开通加速器以后给一个url。\n\n我直接去改/usr/lib/systemd/system/docker.service了：\n\n```bash\nExecStart=/usr/bin/docker-current daemon --registry-mirror=https://{your_id}.mirror.aliyuncs.com\\\n```\n\n重新加载配置&重启：\n\n```\nsystemctl enable docker; systemctl daemon-reload ; systemctl restart docker\n```\n\npull的时候还是显示docker.io，但速度一点都不docker.io。\n\n```bash\n# docker pull ubuntu\nUsing default tag: latest\nTrying to pull repository docker.io/library/ubuntu ...\nlatest: Pulling from docker.io/library/ubuntu\ncad964aed91d: Pull complete\n3a80a22fea63: Pull complete\n50de990d7957: Pull complete\n61e032b8f2cb: Pull complete\n9f03ce1741bf: Pull complete\nDigest: sha256:28d4c5234db8d5a634d5e621c363d900f8f241240ee0a6a978784c978fe9c737\nStatus: Downloaded newer image for docker.io/ubuntu:latest\n```\n","source":"_posts/docker-pull被重置的问题.md","raw":"---\ntitle: docker pull被重置的问题\ndate: 2017-03-17 14:12:20\nauthor: \"月牙天冲\"\ntags:\n    - docker\n---\n\n\n\n\n例如：\n\n```bash\n$ docker pull ubuntu:16.04\nTrying to pull repository docker.io/library/ubuntu ...\nGet https://registry-1.docker.io/v2/library/ubuntu/manifests/sha256:dd7808d8792c9841d0b460122f1acf0a2dd1f56404f8d1e56298048885e45535:\nGet https://auth.docker.io/token?scope=repository%3Alibrary%2Fubuntu%3Apull&service=registry.docker.io:\nread tcp *.*.*.*:41348->50.17.62.194:443:\nread: connection reset by peer\n```\n\n- 原因：目测50.17.62.194被TCP重置。\n\n- 解决方法：\n\n    找到其可用IP：\n\n    ```bash\n    $ dig auth.docker.io\n    ```\n\n    ```bash\n     <<>> DiG 9.10.4-P6-RedHat-9.10.4-4.P6.fc25 <<>> auth.docker.io\n    ;; global options: +cmd\n    ;; Got answer:\n    ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 7119\n    ;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1\n\n    ;; OPT PSEUDOSECTION:\n    ; EDNS: version: 0, flags:; udp: 4096\n    ;; QUESTION SECTION:\n    ;auth.docker.io.\t\t\tIN\tA\n\n    ;; ANSWER SECTION:\n    auth.docker.io.\t\t60\tIN\tA\t34.193.147.40\n    auth.docker.io.\t\t60\tIN\tA\t50.17.62.194\n    auth.docker.io.\t\t60\tIN\tA\t52.5.246.212\n\n    ;; Query time: 130 msec\n    ;; SERVER: *.*.*.*#53(.*.*.*.*)\n    ;; WHEN: Tue Mar 07 11:03:29 CST 2017\n    ;; MSG SIZE  rcvd: 91\n    ```\n    改/etc/hosts强制docker.io相关的域名解析到其它可用IP：\n\n    ```\n    vi /etc/hosts\n    ```\n    ```\n    34.193.147.40 registry-1.docker.io auth.docker.io\n    ```\n\n\n\n顺便附上关于镜像的描述以及现在有哪些镜像提供商\n\n首先，需要明确一个问题：Mirror 与 Private Registry 有什么区别？\n\n抄自daocloud的说明：\n\n二者有着本质的差别。\n\nPrivate Registry 是开发者或者企业自建的镜像存储库，通常用来保存企业内部的 Docker 镜像，用于内部开发流程和产品的发布、版本控制。 Mirror 是一种代理中转服务，我们(指daocloud)提供的 Mirror 服务，直接对接 Docker Hub 的官方 Registry。Docker Hub 上有数以十万计的各类 Docker 镜像。 在使用 Private Registry 时，需要在 Docker Pull 或 Dockerfile 中直接键入 Private Registry 的地址，通常这样会导致与 Private Registry 的绑定，缺乏灵活性。 使用 Mirror 服务，只需要在 Docker 守护进程（Daemon）的配置文件中加入 Mirror 参数，即可在全局范围内透明的访问官方的 Docker Hub，避免了对 Dockerfile 镜像引用来源的修改。\n\n简单来说，Mirror类似CDN，本质是官方的cache；Private Registry类似私服，跟官方没什么关系。对我来说，由于我是要拖docker hub上的image，对应的是Mirror。 yum/apt的mirror又有点不一样，它其实是把官方的库文件整个拖到自己的服务器上做镜像（不管有没有用），并定时与官方做同步；而Docker mirror只会缓存曾经使用过的image。\n\n目前国内访问docker hub非常便秘，使用docker mirror势在必行。现有提供服务的有三家：ustc、daocloud、aliyun，下面会一一介绍。\n\n\n## 1. 网易163 docker镜像\n\n```bash\n$ sudo echo \"DOCKER_OPTS=\\\"\\$DOCKER_OPTS --registry-mirror=http://hub-mirror.c.163.com\\\"\" >> /etc/default/docker\n$ service docker restart\n```\n\n## 2. ustc的镜像\n\nustc是老牌的Linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。之前在blog里有提到可以用ustc的docker仓库镜像，使用方法参考ustc docker 镜像使用帮助。\n\nustc的docker镜像速度不错，一直用的挺happy。但是今天发现不好使了，可能跟这件事有关系吧，今天尝试去pull ubuntu，非常慢，应该是直接去docker hub上去拉了，基本没有加速效果。\n\nustc docker mirror的优势之一是，不需要注册，公共服务(这才是我熟悉的ustc嘛)。\n\n## 3. daocloud\n\nDaoCloud也提供了docker加速器，但是跟ustc不同，需要用户注册后才能使用，并且每月限制流量10GB。linux上使用比较简单，一条命令搞定：\n\n```bash\ncurl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://{your_id}.m.daocloud.io\n```\n\n实际改的是/usr/lib/systemd/system/docker.service，加了个–registry-mirror参数，：\n\nExecStart=/usr/bin/docker-current daemon --registry-mirror=http://{your_id}.m.daocloud.io\\\n\n设置后，需要重新加载配置&重启：\n\n```bash\nsystemctl enable docker; systemctl daemon-reload ; systemctl restart docker\n```\n\n但是！今天使用DaoCloud的docker加速器体验非常差，加速效果基本没感觉，果断放弃。\n## 4. alicloud\n\n阿里云也提供了docker加速器，不过比ustc更麻烦：不光要注册为阿里云的用户，还得加入开发者平台。不过捏着鼻子昨晚这些以后，它的服务还真是不错，基本1MB/s的pull速度(部分原因可能是因为我也在杭州吧)。配置方法跟daocloud类似，也是开通加速器以后给一个url。\n\n我直接去改/usr/lib/systemd/system/docker.service了：\n\n```bash\nExecStart=/usr/bin/docker-current daemon --registry-mirror=https://{your_id}.mirror.aliyuncs.com\\\n```\n\n重新加载配置&重启：\n\n```\nsystemctl enable docker; systemctl daemon-reload ; systemctl restart docker\n```\n\npull的时候还是显示docker.io，但速度一点都不docker.io。\n\n```bash\n# docker pull ubuntu\nUsing default tag: latest\nTrying to pull repository docker.io/library/ubuntu ...\nlatest: Pulling from docker.io/library/ubuntu\ncad964aed91d: Pull complete\n3a80a22fea63: Pull complete\n50de990d7957: Pull complete\n61e032b8f2cb: Pull complete\n9f03ce1741bf: Pull complete\nDigest: sha256:28d4c5234db8d5a634d5e621c363d900f8f241240ee0a6a978784c978fe9c737\nStatus: Downloaded newer image for docker.io/ubuntu:latest\n```\n","slug":"docker-pull被重置的问题","published":1,"updated":"2017-04-27T16:27:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3bpqyoq0002sof1y4oml7qk","content":"<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ docker pull ubuntu:16.04</div><div class=\"line\">Trying to pull repository docker.io/library/ubuntu ...</div><div class=\"line\">Get https://registry-1.docker.io/v2/library/ubuntu/manifests/sha256:dd7808d8792c9841d0b460122f1acf0a2dd1f56404f8d1e56298048885e45535:</div><div class=\"line\">Get https://auth.docker.io/token?scope=repository%3Alibrary%2Fubuntu%3Apull&amp;service=registry.docker.io:</div><div class=\"line\"><span class=\"built_in\">read</span> tcp *.*.*.*:41348-&gt;50.17.62.194:443:</div><div class=\"line\"><span class=\"built_in\">read</span>: connection reset by peer</div></pre></td></tr></table></figure>\n<ul>\n<li><p>原因：目测50.17.62.194被TCP重置。</p>\n</li>\n<li><p>解决方法：</p>\n<p>  找到其可用IP：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ dig auth.docker.io</div></pre></td></tr></table></figure>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"> &lt;&lt;&gt;&gt; DiG 9.10.4-P6-RedHat-9.10.4-4.P6.fc25 &lt;&lt;&gt;&gt; auth.docker.io</div><div class=\"line\">;; global options: +cmd</div><div class=\"line\">;; Got answer:</div><div class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 7119</div><div class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1</div><div class=\"line\"></div><div class=\"line\">;; OPT PSEUDOSECTION:</div><div class=\"line\">; EDNS: version: 0, flags:; udp: 4096</div><div class=\"line\">;; QUESTION SECTION:</div><div class=\"line\">;auth.docker.io.\t\t\tIN\tA</div><div class=\"line\"></div><div class=\"line\">;; ANSWER SECTION:</div><div class=\"line\">auth.docker.io.\t\t60\tIN\tA\t34.193.147.40</div><div class=\"line\">auth.docker.io.\t\t60\tIN\tA\t50.17.62.194</div><div class=\"line\">auth.docker.io.\t\t60\tIN\tA\t52.5.246.212</div><div class=\"line\"></div><div class=\"line\">;; Query time: 130 msec</div><div class=\"line\">;; SERVER: *.*.*.*<span class=\"comment\">#53(.*.*.*.*)</span></div><div class=\"line\">;; WHEN: Tue Mar 07 11:03:29 CST 2017</div><div class=\"line\">;; MSG SIZE  rcvd: 91</div></pre></td></tr></table></figure>\n<p>  改/etc/hosts强制docker.io相关的域名解析到其它可用IP：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">vi /etc/hosts</div></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">34.193.147.40 registry-1.docker.io auth.docker.io</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>顺便附上关于镜像的描述以及现在有哪些镜像提供商</p>\n<p>首先，需要明确一个问题：Mirror 与 Private Registry 有什么区别？</p>\n<p>抄自daocloud的说明：</p>\n<p>二者有着本质的差别。</p>\n<p>Private Registry 是开发者或者企业自建的镜像存储库，通常用来保存企业内部的 Docker 镜像，用于内部开发流程和产品的发布、版本控制。 Mirror 是一种代理中转服务，我们(指daocloud)提供的 Mirror 服务，直接对接 Docker Hub 的官方 Registry。Docker Hub 上有数以十万计的各类 Docker 镜像。 在使用 Private Registry 时，需要在 Docker Pull 或 Dockerfile 中直接键入 Private Registry 的地址，通常这样会导致与 Private Registry 的绑定，缺乏灵活性。 使用 Mirror 服务，只需要在 Docker 守护进程（Daemon）的配置文件中加入 Mirror 参数，即可在全局范围内透明的访问官方的 Docker Hub，避免了对 Dockerfile 镜像引用来源的修改。</p>\n<p>简单来说，Mirror类似CDN，本质是官方的cache；Private Registry类似私服，跟官方没什么关系。对我来说，由于我是要拖docker hub上的image，对应的是Mirror。 yum/apt的mirror又有点不一样，它其实是把官方的库文件整个拖到自己的服务器上做镜像（不管有没有用），并定时与官方做同步；而Docker mirror只会缓存曾经使用过的image。</p>\n<p>目前国内访问docker hub非常便秘，使用docker mirror势在必行。现有提供服务的有三家：ustc、daocloud、aliyun，下面会一一介绍。</p>\n<h2 id=\"1-网易163-docker镜像\"><a href=\"#1-网易163-docker镜像\" class=\"headerlink\" title=\"1. 网易163 docker镜像\"></a>1. 网易163 docker镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo <span class=\"built_in\">echo</span> <span class=\"string\">\"DOCKER_OPTS=\\\"\\$DOCKER_OPTS --registry-mirror=http://hub-mirror.c.163.com\\\"\"</span> &gt;&gt; /etc/default/docker</div><div class=\"line\">$ service docker restart</div></pre></td></tr></table></figure>\n<h2 id=\"2-ustc的镜像\"><a href=\"#2-ustc的镜像\" class=\"headerlink\" title=\"2. ustc的镜像\"></a>2. ustc的镜像</h2><p>ustc是老牌的Linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。之前在blog里有提到可以用ustc的docker仓库镜像，使用方法参考ustc docker 镜像使用帮助。</p>\n<p>ustc的docker镜像速度不错，一直用的挺happy。但是今天发现不好使了，可能跟这件事有关系吧，今天尝试去pull ubuntu，非常慢，应该是直接去docker hub上去拉了，基本没有加速效果。</p>\n<p>ustc docker mirror的优势之一是，不需要注册，公共服务(这才是我熟悉的ustc嘛)。</p>\n<h2 id=\"3-daocloud\"><a href=\"#3-daocloud\" class=\"headerlink\" title=\"3. daocloud\"></a>3. daocloud</h2><p>DaoCloud也提供了docker加速器，但是跟ustc不同，需要用户注册后才能使用，并且每月限制流量10GB。linux上使用比较简单，一条命令搞定：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl <span class=\"_\">-s</span>SL https://get.daocloud.io/daotools/set_mirror.sh | sh <span class=\"_\">-s</span> http://&#123;your_id&#125;.m.daocloud.io</div></pre></td></tr></table></figure>\n<p>实际改的是/usr/lib/systemd/system/docker.service，加了个–registry-mirror参数，：</p>\n<p>ExecStart=/usr/bin/docker-current daemon –registry-mirror=<a href=\"http://{your_id}.m.daocloud.io\\\" target=\"_blank\" rel=\"external\">http://{your_id}.m.daocloud.io\\</a></p>\n<p>设置后，需要重新加载配置&amp;重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">systemctl <span class=\"built_in\">enable</span> docker; systemctl daemon-reload ; systemctl restart docker</div></pre></td></tr></table></figure>\n<p>但是！今天使用DaoCloud的docker加速器体验非常差，加速效果基本没感觉，果断放弃。</p>\n<h2 id=\"4-alicloud\"><a href=\"#4-alicloud\" class=\"headerlink\" title=\"4. alicloud\"></a>4. alicloud</h2><p>阿里云也提供了docker加速器，不过比ustc更麻烦：不光要注册为阿里云的用户，还得加入开发者平台。不过捏着鼻子昨晚这些以后，它的服务还真是不错，基本1MB/s的pull速度(部分原因可能是因为我也在杭州吧)。配置方法跟daocloud类似，也是开通加速器以后给一个url。</p>\n<p>我直接去改/usr/lib/systemd/system/docker.service了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">ExecStart=/usr/bin/docker-current daemon --registry-mirror=https://&#123;your_id&#125;.mirror.aliyuncs.com\\</div></pre></td></tr></table></figure>\n<p>重新加载配置&amp;重启：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">systemctl enable docker; systemctl daemon-reload ; systemctl restart docker</div></pre></td></tr></table></figure>\n<p>pull的时候还是显示docker.io，但速度一点都不docker.io。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># docker pull ubuntu</span></div><div class=\"line\">Using default tag: latest</div><div class=\"line\">Trying to pull repository docker.io/library/ubuntu ...</div><div class=\"line\">latest: Pulling from docker.io/library/ubuntu</div><div class=\"line\">cad964aed91d: Pull complete</div><div class=\"line\">3a80a22fea63: Pull complete</div><div class=\"line\">50de990d7957: Pull complete</div><div class=\"line\">61e032b8f2cb: Pull complete</div><div class=\"line\">9f03ce1741bf: Pull complete</div><div class=\"line\">Digest: sha256:28d4c5234db8d5a634d5e621c363d900f8f241240ee0a6a978784c978fe9c737</div><div class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> docker.io/ubuntu:latest</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ docker pull ubuntu:16.04</div><div class=\"line\">Trying to pull repository docker.io/library/ubuntu ...</div><div class=\"line\">Get https://registry-1.docker.io/v2/library/ubuntu/manifests/sha256:dd7808d8792c9841d0b460122f1acf0a2dd1f56404f8d1e56298048885e45535:</div><div class=\"line\">Get https://auth.docker.io/token?scope=repository%3Alibrary%2Fubuntu%3Apull&amp;service=registry.docker.io:</div><div class=\"line\"><span class=\"built_in\">read</span> tcp *.*.*.*:41348-&gt;50.17.62.194:443:</div><div class=\"line\"><span class=\"built_in\">read</span>: connection reset by peer</div></pre></td></tr></table></figure>\n<ul>\n<li><p>原因：目测50.17.62.194被TCP重置。</p>\n</li>\n<li><p>解决方法：</p>\n<p>  找到其可用IP：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ dig auth.docker.io</div></pre></td></tr></table></figure>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"> &lt;&lt;&gt;&gt; DiG 9.10.4-P6-RedHat-9.10.4-4.P6.fc25 &lt;&lt;&gt;&gt; auth.docker.io</div><div class=\"line\">;; global options: +cmd</div><div class=\"line\">;; Got answer:</div><div class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 7119</div><div class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1</div><div class=\"line\"></div><div class=\"line\">;; OPT PSEUDOSECTION:</div><div class=\"line\">; EDNS: version: 0, flags:; udp: 4096</div><div class=\"line\">;; QUESTION SECTION:</div><div class=\"line\">;auth.docker.io.\t\t\tIN\tA</div><div class=\"line\"></div><div class=\"line\">;; ANSWER SECTION:</div><div class=\"line\">auth.docker.io.\t\t60\tIN\tA\t34.193.147.40</div><div class=\"line\">auth.docker.io.\t\t60\tIN\tA\t50.17.62.194</div><div class=\"line\">auth.docker.io.\t\t60\tIN\tA\t52.5.246.212</div><div class=\"line\"></div><div class=\"line\">;; Query time: 130 msec</div><div class=\"line\">;; SERVER: *.*.*.*<span class=\"comment\">#53(.*.*.*.*)</span></div><div class=\"line\">;; WHEN: Tue Mar 07 11:03:29 CST 2017</div><div class=\"line\">;; MSG SIZE  rcvd: 91</div></pre></td></tr></table></figure>\n<p>  改/etc/hosts强制docker.io相关的域名解析到其它可用IP：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">vi /etc/hosts</div></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">34.193.147.40 registry-1.docker.io auth.docker.io</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>顺便附上关于镜像的描述以及现在有哪些镜像提供商</p>\n<p>首先，需要明确一个问题：Mirror 与 Private Registry 有什么区别？</p>\n<p>抄自daocloud的说明：</p>\n<p>二者有着本质的差别。</p>\n<p>Private Registry 是开发者或者企业自建的镜像存储库，通常用来保存企业内部的 Docker 镜像，用于内部开发流程和产品的发布、版本控制。 Mirror 是一种代理中转服务，我们(指daocloud)提供的 Mirror 服务，直接对接 Docker Hub 的官方 Registry。Docker Hub 上有数以十万计的各类 Docker 镜像。 在使用 Private Registry 时，需要在 Docker Pull 或 Dockerfile 中直接键入 Private Registry 的地址，通常这样会导致与 Private Registry 的绑定，缺乏灵活性。 使用 Mirror 服务，只需要在 Docker 守护进程（Daemon）的配置文件中加入 Mirror 参数，即可在全局范围内透明的访问官方的 Docker Hub，避免了对 Dockerfile 镜像引用来源的修改。</p>\n<p>简单来说，Mirror类似CDN，本质是官方的cache；Private Registry类似私服，跟官方没什么关系。对我来说，由于我是要拖docker hub上的image，对应的是Mirror。 yum/apt的mirror又有点不一样，它其实是把官方的库文件整个拖到自己的服务器上做镜像（不管有没有用），并定时与官方做同步；而Docker mirror只会缓存曾经使用过的image。</p>\n<p>目前国内访问docker hub非常便秘，使用docker mirror势在必行。现有提供服务的有三家：ustc、daocloud、aliyun，下面会一一介绍。</p>\n<h2 id=\"1-网易163-docker镜像\"><a href=\"#1-网易163-docker镜像\" class=\"headerlink\" title=\"1. 网易163 docker镜像\"></a>1. 网易163 docker镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo <span class=\"built_in\">echo</span> <span class=\"string\">\"DOCKER_OPTS=\\\"\\$DOCKER_OPTS --registry-mirror=http://hub-mirror.c.163.com\\\"\"</span> &gt;&gt; /etc/default/docker</div><div class=\"line\">$ service docker restart</div></pre></td></tr></table></figure>\n<h2 id=\"2-ustc的镜像\"><a href=\"#2-ustc的镜像\" class=\"headerlink\" title=\"2. ustc的镜像\"></a>2. ustc的镜像</h2><p>ustc是老牌的Linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。之前在blog里有提到可以用ustc的docker仓库镜像，使用方法参考ustc docker 镜像使用帮助。</p>\n<p>ustc的docker镜像速度不错，一直用的挺happy。但是今天发现不好使了，可能跟这件事有关系吧，今天尝试去pull ubuntu，非常慢，应该是直接去docker hub上去拉了，基本没有加速效果。</p>\n<p>ustc docker mirror的优势之一是，不需要注册，公共服务(这才是我熟悉的ustc嘛)。</p>\n<h2 id=\"3-daocloud\"><a href=\"#3-daocloud\" class=\"headerlink\" title=\"3. daocloud\"></a>3. daocloud</h2><p>DaoCloud也提供了docker加速器，但是跟ustc不同，需要用户注册后才能使用，并且每月限制流量10GB。linux上使用比较简单，一条命令搞定：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl <span class=\"_\">-s</span>SL https://get.daocloud.io/daotools/set_mirror.sh | sh <span class=\"_\">-s</span> http://&#123;your_id&#125;.m.daocloud.io</div></pre></td></tr></table></figure>\n<p>实际改的是/usr/lib/systemd/system/docker.service，加了个–registry-mirror参数，：</p>\n<p>ExecStart=/usr/bin/docker-current daemon –registry-mirror=<a href=\"http://{your_id}.m.daocloud.io\\\">http://{your_id}.m.daocloud.io\\</a></p>\n<p>设置后，需要重新加载配置&amp;重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">systemctl <span class=\"built_in\">enable</span> docker; systemctl daemon-reload ; systemctl restart docker</div></pre></td></tr></table></figure>\n<p>但是！今天使用DaoCloud的docker加速器体验非常差，加速效果基本没感觉，果断放弃。</p>\n<h2 id=\"4-alicloud\"><a href=\"#4-alicloud\" class=\"headerlink\" title=\"4. alicloud\"></a>4. alicloud</h2><p>阿里云也提供了docker加速器，不过比ustc更麻烦：不光要注册为阿里云的用户，还得加入开发者平台。不过捏着鼻子昨晚这些以后，它的服务还真是不错，基本1MB/s的pull速度(部分原因可能是因为我也在杭州吧)。配置方法跟daocloud类似，也是开通加速器以后给一个url。</p>\n<p>我直接去改/usr/lib/systemd/system/docker.service了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">ExecStart=/usr/bin/docker-current daemon --registry-mirror=https://&#123;your_id&#125;.mirror.aliyuncs.com\\</div></pre></td></tr></table></figure>\n<p>重新加载配置&amp;重启：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">systemctl enable docker; systemctl daemon-reload ; systemctl restart docker</div></pre></td></tr></table></figure>\n<p>pull的时候还是显示docker.io，但速度一点都不docker.io。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># docker pull ubuntu</span></div><div class=\"line\">Using default tag: latest</div><div class=\"line\">Trying to pull repository docker.io/library/ubuntu ...</div><div class=\"line\">latest: Pulling from docker.io/library/ubuntu</div><div class=\"line\">cad964aed91d: Pull complete</div><div class=\"line\">3a80a22fea63: Pull complete</div><div class=\"line\">50de990d7957: Pull complete</div><div class=\"line\">61e032b8f2cb: Pull complete</div><div class=\"line\">9f03ce1741bf: Pull complete</div><div class=\"line\">Digest: sha256:28d4c5234db8d5a634d5e621c363d900f8f241240ee0a6a978784c978fe9c737</div><div class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> docker.io/ubuntu:latest</div></pre></td></tr></table></figure>\n"},{"title":"mysql主从配置","date":"2017-03-17T08:05:11.000Z","author":"月牙天冲","_content":"\n\n\n## 1.主服务器\n\n### 1.1 设置好配置文件\n\n> cnf配置文件一般会有四个，可以根据命令 # ll /usr/share/mysql/\\*.cnf 查看；\n\n> my-small.cnf    内存少于或等于64M，只提供很少的的数据库服务；\n\n> my-medium.cnf   内存在32M--64M之间而且和其他服务一起使用，例如web；\n\n> my-large.cnf    内存有512M主要提供数据库服务；\n\n> my-huge.cnf     内存有1G到2G，主要提供数据库服务；\n\n> my-innodb-heavy-4G.cnf 内存有4G，主要提供较大负载数据库服务（一般服务器都使用这个）；\n\n> 可以根据服务器配置的不同选择不同的cnf配置文件。\n\nmy.cnf\n```\n[mysqld]\nserver-id       = 1 # 必须，id，一般取IP最后一段\nlog-bin = mysql-bin # 必须，二进制日志文件\nexpire_logs_days    = 10\nmax_binlog_size   = 100M\nbinlog_do_db       = include_database_name # 包括的库名称 多个可换行多次设置\nbinlog_ignore_db   = include_database_name # 不包括的库名称 多个可换行多次设置\n```\n\n### 1.2 配置好给从服务器登陆的账号,重启\n  ```\n  grant replication slave on *.* to `tom`@`192.168.1.196` identified by 'password';\n  ```\n### 1.3 查看主服务器状态\n  ```bash\n  mysql> show master status;\n  ```\n### 1.4 备份数据库(如果从服务器也为新建库，则不需要此操作)\n\n> 备份数据库的方法有很多种：如果在同一局域网可以直接复制数据库，也可以用工具直接进行数据导入。\n\n> 复制数据库用打包的方法：\n\n> cd/data  转到存放Mysql数据库的路径下\n\n> tarcvfz testcreate.tar.gz db/\n\n> 再从数据库中进行复制解压\n\n> cd/data\n\n> scp 192.168.1.61:/data/testcreate.tar.gz\n\n> tar xvfz testcreate.tar.gz\n\n## 2 从服务器\n### 2.1.    配置从库服务my.cnf文件\n\n    # vi etc/my.cnf 对其进行如下修改：\n\n    Server-id = 2 # 这里ID改为2 因为主库为1;\n\n    log-bin = mysql-bin  # 必填项，用于数据同步;\n\n    master-host = 192.168.1.60 # 主库IP;\n\n    master-user = test # 同步用的账户;\n\n    master-password = 123456 # 同步账户密码，主库时的设置;\n\n    master-port = 3306 # 同步数据库的端口号。\n\n### 2.2    重启从库服务器\n\n    #service mysqld restart\n\n    如果重启失败则配置文件有问题，需重新检查配置。\n\n### 2.3   调整复制过来的数据库的权限（如果有从主库复制过来的数据库）\n\n    主库复制过来的数据库权限都为root权限，需要修改为mysql权限\n\n    #chown–R mysql:mysql /var/lib/mysql\n\n    如果从库是新建的库就不需要进行此步骤\n\n### 2.4    显示从服务器状态\n\n    进行mysql服务器：\n\n    mysql>showslave status\\G;\n    查看Slave_IO_Running和Slave_SQL_Running都是yes则成功\n","source":"_posts/mysql主从配置.md","raw":"---\ntitle: mysql主从配置\ndate: 2017-03-17 16:05:11\nauthor: \"月牙天冲\"\ntags:\n  - mysql\n---\n\n\n\n## 1.主服务器\n\n### 1.1 设置好配置文件\n\n> cnf配置文件一般会有四个，可以根据命令 # ll /usr/share/mysql/\\*.cnf 查看；\n\n> my-small.cnf    内存少于或等于64M，只提供很少的的数据库服务；\n\n> my-medium.cnf   内存在32M--64M之间而且和其他服务一起使用，例如web；\n\n> my-large.cnf    内存有512M主要提供数据库服务；\n\n> my-huge.cnf     内存有1G到2G，主要提供数据库服务；\n\n> my-innodb-heavy-4G.cnf 内存有4G，主要提供较大负载数据库服务（一般服务器都使用这个）；\n\n> 可以根据服务器配置的不同选择不同的cnf配置文件。\n\nmy.cnf\n```\n[mysqld]\nserver-id       = 1 # 必须，id，一般取IP最后一段\nlog-bin = mysql-bin # 必须，二进制日志文件\nexpire_logs_days    = 10\nmax_binlog_size   = 100M\nbinlog_do_db       = include_database_name # 包括的库名称 多个可换行多次设置\nbinlog_ignore_db   = include_database_name # 不包括的库名称 多个可换行多次设置\n```\n\n### 1.2 配置好给从服务器登陆的账号,重启\n  ```\n  grant replication slave on *.* to `tom`@`192.168.1.196` identified by 'password';\n  ```\n### 1.3 查看主服务器状态\n  ```bash\n  mysql> show master status;\n  ```\n### 1.4 备份数据库(如果从服务器也为新建库，则不需要此操作)\n\n> 备份数据库的方法有很多种：如果在同一局域网可以直接复制数据库，也可以用工具直接进行数据导入。\n\n> 复制数据库用打包的方法：\n\n> cd/data  转到存放Mysql数据库的路径下\n\n> tarcvfz testcreate.tar.gz db/\n\n> 再从数据库中进行复制解压\n\n> cd/data\n\n> scp 192.168.1.61:/data/testcreate.tar.gz\n\n> tar xvfz testcreate.tar.gz\n\n## 2 从服务器\n### 2.1.    配置从库服务my.cnf文件\n\n    # vi etc/my.cnf 对其进行如下修改：\n\n    Server-id = 2 # 这里ID改为2 因为主库为1;\n\n    log-bin = mysql-bin  # 必填项，用于数据同步;\n\n    master-host = 192.168.1.60 # 主库IP;\n\n    master-user = test # 同步用的账户;\n\n    master-password = 123456 # 同步账户密码，主库时的设置;\n\n    master-port = 3306 # 同步数据库的端口号。\n\n### 2.2    重启从库服务器\n\n    #service mysqld restart\n\n    如果重启失败则配置文件有问题，需重新检查配置。\n\n### 2.3   调整复制过来的数据库的权限（如果有从主库复制过来的数据库）\n\n    主库复制过来的数据库权限都为root权限，需要修改为mysql权限\n\n    #chown–R mysql:mysql /var/lib/mysql\n\n    如果从库是新建的库就不需要进行此步骤\n\n### 2.4    显示从服务器状态\n\n    进行mysql服务器：\n\n    mysql>showslave status\\G;\n    查看Slave_IO_Running和Slave_SQL_Running都是yes则成功\n","slug":"mysql主从配置","published":1,"updated":"2017-04-27T16:27:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3bpqyow0004sof14rtkaa02","content":"<h2 id=\"1-主服务器\"><a href=\"#1-主服务器\" class=\"headerlink\" title=\"1.主服务器\"></a>1.主服务器</h2><h3 id=\"1-1-设置好配置文件\"><a href=\"#1-1-设置好配置文件\" class=\"headerlink\" title=\"1.1 设置好配置文件\"></a>1.1 设置好配置文件</h3><blockquote>\n<p>cnf配置文件一般会有四个，可以根据命令 # ll /usr/share/mysql/*.cnf 查看；</p>\n<p>my-small.cnf    内存少于或等于64M，只提供很少的的数据库服务；</p>\n<p>my-medium.cnf   内存在32M–64M之间而且和其他服务一起使用，例如web；</p>\n<p>my-large.cnf    内存有512M主要提供数据库服务；</p>\n<p>my-huge.cnf     内存有1G到2G，主要提供数据库服务；</p>\n<p>my-innodb-heavy-4G.cnf 内存有4G，主要提供较大负载数据库服务（一般服务器都使用这个）；</p>\n<p>可以根据服务器配置的不同选择不同的cnf配置文件。</p>\n</blockquote>\n<p>my.cnf<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">server-id       = 1 # 必须，id，一般取IP最后一段</div><div class=\"line\">log-bin = mysql-bin # 必须，二进制日志文件</div><div class=\"line\">expire_logs_days    = 10</div><div class=\"line\">max_binlog_size   = 100M</div><div class=\"line\">binlog_do_db       = include_database_name # 包括的库名称 多个可换行多次设置</div><div class=\"line\">binlog_ignore_db   = include_database_name # 不包括的库名称 多个可换行多次设置</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-2-配置好给从服务器登陆的账号-重启\"><a href=\"#1-2-配置好给从服务器登陆的账号-重启\" class=\"headerlink\" title=\"1.2 配置好给从服务器登陆的账号,重启\"></a>1.2 配置好给从服务器登陆的账号,重启</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">grant replication slave on *.* to `tom`@`192.168.1.196` identified by &apos;password&apos;;</div></pre></td></tr></table></figure>\n<h3 id=\"1-3-查看主服务器状态\"><a href=\"#1-3-查看主服务器状态\" class=\"headerlink\" title=\"1.3 查看主服务器状态\"></a>1.3 查看主服务器状态</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">mysql&gt; show master status;</div></pre></td></tr></table></figure>\n<h3 id=\"1-4-备份数据库-如果从服务器也为新建库，则不需要此操作\"><a href=\"#1-4-备份数据库-如果从服务器也为新建库，则不需要此操作\" class=\"headerlink\" title=\"1.4 备份数据库(如果从服务器也为新建库，则不需要此操作)\"></a>1.4 备份数据库(如果从服务器也为新建库，则不需要此操作)</h3><blockquote>\n<p>备份数据库的方法有很多种：如果在同一局域网可以直接复制数据库，也可以用工具直接进行数据导入。</p>\n<p>复制数据库用打包的方法：</p>\n<p>cd/data  转到存放Mysql数据库的路径下</p>\n<p>tarcvfz testcreate.tar.gz db/</p>\n<p>再从数据库中进行复制解压</p>\n<p>cd/data</p>\n<p>scp 192.168.1.61:/data/testcreate.tar.gz</p>\n<p>tar xvfz testcreate.tar.gz</p>\n</blockquote>\n<h2 id=\"2-从服务器\"><a href=\"#2-从服务器\" class=\"headerlink\" title=\"2 从服务器\"></a>2 从服务器</h2><h3 id=\"2-1-配置从库服务my-cnf文件\"><a href=\"#2-1-配置从库服务my-cnf文件\" class=\"headerlink\" title=\"2.1.    配置从库服务my.cnf文件\"></a>2.1.    配置从库服务my.cnf文件</h3><pre><code># vi etc/my.cnf 对其进行如下修改：\n\nServer-id = 2 # 这里ID改为2 因为主库为1;\n\nlog-bin = mysql-bin  # 必填项，用于数据同步;\n\nmaster-host = 192.168.1.60 # 主库IP;\n\nmaster-user = test # 同步用的账户;\n\nmaster-password = 123456 # 同步账户密码，主库时的设置;\n\nmaster-port = 3306 # 同步数据库的端口号。\n</code></pre><h3 id=\"2-2-重启从库服务器\"><a href=\"#2-2-重启从库服务器\" class=\"headerlink\" title=\"2.2    重启从库服务器\"></a>2.2    重启从库服务器</h3><pre><code>#service mysqld restart\n\n如果重启失败则配置文件有问题，需重新检查配置。\n</code></pre><h3 id=\"2-3-调整复制过来的数据库的权限（如果有从主库复制过来的数据库）\"><a href=\"#2-3-调整复制过来的数据库的权限（如果有从主库复制过来的数据库）\" class=\"headerlink\" title=\"2.3   调整复制过来的数据库的权限（如果有从主库复制过来的数据库）\"></a>2.3   调整复制过来的数据库的权限（如果有从主库复制过来的数据库）</h3><pre><code>主库复制过来的数据库权限都为root权限，需要修改为mysql权限\n\n#chown–R mysql:mysql /var/lib/mysql\n\n如果从库是新建的库就不需要进行此步骤\n</code></pre><h3 id=\"2-4-显示从服务器状态\"><a href=\"#2-4-显示从服务器状态\" class=\"headerlink\" title=\"2.4    显示从服务器状态\"></a>2.4    显示从服务器状态</h3><pre><code>进行mysql服务器：\n\nmysql&gt;showslave status\\G;\n查看Slave_IO_Running和Slave_SQL_Running都是yes则成功\n</code></pre>","excerpt":"","more":"<h2 id=\"1-主服务器\"><a href=\"#1-主服务器\" class=\"headerlink\" title=\"1.主服务器\"></a>1.主服务器</h2><h3 id=\"1-1-设置好配置文件\"><a href=\"#1-1-设置好配置文件\" class=\"headerlink\" title=\"1.1 设置好配置文件\"></a>1.1 设置好配置文件</h3><blockquote>\n<p>cnf配置文件一般会有四个，可以根据命令 # ll /usr/share/mysql/*.cnf 查看；</p>\n<p>my-small.cnf    内存少于或等于64M，只提供很少的的数据库服务；</p>\n<p>my-medium.cnf   内存在32M–64M之间而且和其他服务一起使用，例如web；</p>\n<p>my-large.cnf    内存有512M主要提供数据库服务；</p>\n<p>my-huge.cnf     内存有1G到2G，主要提供数据库服务；</p>\n<p>my-innodb-heavy-4G.cnf 内存有4G，主要提供较大负载数据库服务（一般服务器都使用这个）；</p>\n<p>可以根据服务器配置的不同选择不同的cnf配置文件。</p>\n</blockquote>\n<p>my.cnf<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">server-id       = 1 # 必须，id，一般取IP最后一段</div><div class=\"line\">log-bin = mysql-bin # 必须，二进制日志文件</div><div class=\"line\">expire_logs_days    = 10</div><div class=\"line\">max_binlog_size   = 100M</div><div class=\"line\">binlog_do_db       = include_database_name # 包括的库名称 多个可换行多次设置</div><div class=\"line\">binlog_ignore_db   = include_database_name # 不包括的库名称 多个可换行多次设置</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-2-配置好给从服务器登陆的账号-重启\"><a href=\"#1-2-配置好给从服务器登陆的账号-重启\" class=\"headerlink\" title=\"1.2 配置好给从服务器登陆的账号,重启\"></a>1.2 配置好给从服务器登陆的账号,重启</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">grant replication slave on *.* to `tom`@`192.168.1.196` identified by &apos;password&apos;;</div></pre></td></tr></table></figure>\n<h3 id=\"1-3-查看主服务器状态\"><a href=\"#1-3-查看主服务器状态\" class=\"headerlink\" title=\"1.3 查看主服务器状态\"></a>1.3 查看主服务器状态</h3>  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">mysql&gt; show master status;</div></pre></td></tr></table></figure>\n<h3 id=\"1-4-备份数据库-如果从服务器也为新建库，则不需要此操作\"><a href=\"#1-4-备份数据库-如果从服务器也为新建库，则不需要此操作\" class=\"headerlink\" title=\"1.4 备份数据库(如果从服务器也为新建库，则不需要此操作)\"></a>1.4 备份数据库(如果从服务器也为新建库，则不需要此操作)</h3><blockquote>\n<p>备份数据库的方法有很多种：如果在同一局域网可以直接复制数据库，也可以用工具直接进行数据导入。</p>\n<p>复制数据库用打包的方法：</p>\n<p>cd/data  转到存放Mysql数据库的路径下</p>\n<p>tarcvfz testcreate.tar.gz db/</p>\n<p>再从数据库中进行复制解压</p>\n<p>cd/data</p>\n<p>scp 192.168.1.61:/data/testcreate.tar.gz</p>\n<p>tar xvfz testcreate.tar.gz</p>\n</blockquote>\n<h2 id=\"2-从服务器\"><a href=\"#2-从服务器\" class=\"headerlink\" title=\"2 从服务器\"></a>2 从服务器</h2><h3 id=\"2-1-配置从库服务my-cnf文件\"><a href=\"#2-1-配置从库服务my-cnf文件\" class=\"headerlink\" title=\"2.1.    配置从库服务my.cnf文件\"></a>2.1.    配置从库服务my.cnf文件</h3><pre><code># vi etc/my.cnf 对其进行如下修改：\n\nServer-id = 2 # 这里ID改为2 因为主库为1;\n\nlog-bin = mysql-bin  # 必填项，用于数据同步;\n\nmaster-host = 192.168.1.60 # 主库IP;\n\nmaster-user = test # 同步用的账户;\n\nmaster-password = 123456 # 同步账户密码，主库时的设置;\n\nmaster-port = 3306 # 同步数据库的端口号。\n</code></pre><h3 id=\"2-2-重启从库服务器\"><a href=\"#2-2-重启从库服务器\" class=\"headerlink\" title=\"2.2    重启从库服务器\"></a>2.2    重启从库服务器</h3><pre><code>#service mysqld restart\n\n如果重启失败则配置文件有问题，需重新检查配置。\n</code></pre><h3 id=\"2-3-调整复制过来的数据库的权限（如果有从主库复制过来的数据库）\"><a href=\"#2-3-调整复制过来的数据库的权限（如果有从主库复制过来的数据库）\" class=\"headerlink\" title=\"2.3   调整复制过来的数据库的权限（如果有从主库复制过来的数据库）\"></a>2.3   调整复制过来的数据库的权限（如果有从主库复制过来的数据库）</h3><pre><code>主库复制过来的数据库权限都为root权限，需要修改为mysql权限\n\n#chown–R mysql:mysql /var/lib/mysql\n\n如果从库是新建的库就不需要进行此步骤\n</code></pre><h3 id=\"2-4-显示从服务器状态\"><a href=\"#2-4-显示从服务器状态\" class=\"headerlink\" title=\"2.4    显示从服务器状态\"></a>2.4    显示从服务器状态</h3><pre><code>进行mysql服务器：\n\nmysql&gt;showslave status\\G;\n查看Slave_IO_Running和Slave_SQL_Running都是yes则成功\n</code></pre>"},{"title":"docker 本地Registry的部署","date":"2017-02-16T16:41:36.000Z","author":"月牙天冲","header-img":"docker.jpg","cdn":"header-off","_content":"\n# 1.本地Registry的部署\n运行下面命令获取registry镜像\n\n```bash\nsudo docker pull registry:2.1.1 # tag版本号随意设置\n```\n\n然后启动一个容器\n```bash\nsudo docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry:2.1.1\n```\n\nRegistry服务默认会将上传的镜像保存在容器的/var/lib/registry，我们将主机的/opt/registry目录挂载到该目录，即可实现将镜像保存到主机的/opt/registry目录了。\n\n运行docker ps 查看容易运行情况\n```bash\ndocker ps\n```\n\n启动了registry服务，打开浏览器输入http://127.0.0.1:5000/v2 ，出现下面情况说明registry运行正常\n```bash\ncurl localhost:5000/v2\n```\n返回{}\n\n# 2.验证\n我的机器上有个hello-world的镜像，我们要通过docker tag将该镜像标志为要推送到私有仓库，\n\n```bash\nsudo docker tag hello-world:1.0.0 127.0.0.1:5000/hello-world:1.0.0\n\nsudo docker push 127.0.0.1:5000/hello-world:1.0.0\n```\n验证\n```bash\ncurl http://127.0.0.1:5000/v2/_catalog\n```\n返回json\n\n\n![logo](docker-本地Registry的部署/docker.jpg)\n","source":"_posts/docker-本地Registry的部署.md","raw":"---\ntitle: docker 本地Registry的部署\ndate: 2017-02-17 00:41:36\nauthor: \"月牙天冲\"\nheader-img: \"docker.jpg\"\ncdn: 'header-off'\ntags:\n    - docker\n---\n\n# 1.本地Registry的部署\n运行下面命令获取registry镜像\n\n```bash\nsudo docker pull registry:2.1.1 # tag版本号随意设置\n```\n\n然后启动一个容器\n```bash\nsudo docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry:2.1.1\n```\n\nRegistry服务默认会将上传的镜像保存在容器的/var/lib/registry，我们将主机的/opt/registry目录挂载到该目录，即可实现将镜像保存到主机的/opt/registry目录了。\n\n运行docker ps 查看容易运行情况\n```bash\ndocker ps\n```\n\n启动了registry服务，打开浏览器输入http://127.0.0.1:5000/v2 ，出现下面情况说明registry运行正常\n```bash\ncurl localhost:5000/v2\n```\n返回{}\n\n# 2.验证\n我的机器上有个hello-world的镜像，我们要通过docker tag将该镜像标志为要推送到私有仓库，\n\n```bash\nsudo docker tag hello-world:1.0.0 127.0.0.1:5000/hello-world:1.0.0\n\nsudo docker push 127.0.0.1:5000/hello-world:1.0.0\n```\n验证\n```bash\ncurl http://127.0.0.1:5000/v2/_catalog\n```\n返回json\n\n\n![logo](docker-本地Registry的部署/docker.jpg)\n","slug":"docker-本地Registry的部署","published":1,"updated":"2017-04-27T16:27:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3bpqyoz0005sof181h8t60u","content":"<h1 id=\"1-本地Registry的部署\"><a href=\"#1-本地Registry的部署\" class=\"headerlink\" title=\"1.本地Registry的部署\"></a>1.本地Registry的部署</h1><p>运行下面命令获取registry镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo docker pull registry:2.1.1 <span class=\"comment\"># tag版本号随意设置</span></div></pre></td></tr></table></figure>\n<p>然后启动一个容器<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo docker run <span class=\"_\">-d</span> -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry:2.1.1</div></pre></td></tr></table></figure></p>\n<p>Registry服务默认会将上传的镜像保存在容器的/var/lib/registry，我们将主机的/opt/registry目录挂载到该目录，即可实现将镜像保存到主机的/opt/registry目录了。</p>\n<p>运行docker ps 查看容易运行情况<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">docker ps</div></pre></td></tr></table></figure></p>\n<p>启动了registry服务，打开浏览器输入<a href=\"http://127.0.0.1:5000/v2\" target=\"_blank\" rel=\"external\">http://127.0.0.1:5000/v2</a> ，出现下面情况说明registry运行正常<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl localhost:5000/v2</div></pre></td></tr></table></figure></p>\n<p>返回{}</p>\n<h1 id=\"2-验证\"><a href=\"#2-验证\" class=\"headerlink\" title=\"2.验证\"></a>2.验证</h1><p>我的机器上有个hello-world的镜像，我们要通过docker tag将该镜像标志为要推送到私有仓库，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo docker tag hello-world:1.0.0 127.0.0.1:5000/hello-world:1.0.0</div><div class=\"line\"></div><div class=\"line\">sudo docker push 127.0.0.1:5000/hello-world:1.0.0</div></pre></td></tr></table></figure>\n<p>验证<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl http://127.0.0.1:5000/v2/_catalog</div></pre></td></tr></table></figure></p>\n<p>返回json</p>\n<p><img src=\"/2017/02/17/docker-本地Registry的部署/docker.jpg\" alt=\"logo\"></p>\n","excerpt":"","more":"<h1 id=\"1-本地Registry的部署\"><a href=\"#1-本地Registry的部署\" class=\"headerlink\" title=\"1.本地Registry的部署\"></a>1.本地Registry的部署</h1><p>运行下面命令获取registry镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo docker pull registry:2.1.1 <span class=\"comment\"># tag版本号随意设置</span></div></pre></td></tr></table></figure>\n<p>然后启动一个容器<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo docker run <span class=\"_\">-d</span> -v /opt/registry:/var/lib/registry -p 5000:5000 --restart=always --name registry registry:2.1.1</div></pre></td></tr></table></figure></p>\n<p>Registry服务默认会将上传的镜像保存在容器的/var/lib/registry，我们将主机的/opt/registry目录挂载到该目录，即可实现将镜像保存到主机的/opt/registry目录了。</p>\n<p>运行docker ps 查看容易运行情况<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">docker ps</div></pre></td></tr></table></figure></p>\n<p>启动了registry服务，打开浏览器输入<a href=\"http://127.0.0.1:5000/v2\">http://127.0.0.1:5000/v2</a> ，出现下面情况说明registry运行正常<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl localhost:5000/v2</div></pre></td></tr></table></figure></p>\n<p>返回{}</p>\n<h1 id=\"2-验证\"><a href=\"#2-验证\" class=\"headerlink\" title=\"2.验证\"></a>2.验证</h1><p>我的机器上有个hello-world的镜像，我们要通过docker tag将该镜像标志为要推送到私有仓库，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo docker tag hello-world:1.0.0 127.0.0.1:5000/hello-world:1.0.0</div><div class=\"line\"></div><div class=\"line\">sudo docker push 127.0.0.1:5000/hello-world:1.0.0</div></pre></td></tr></table></figure>\n<p>验证<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">curl http://127.0.0.1:5000/v2/_catalog</div></pre></td></tr></table></figure></p>\n<p>返回json</p>\n<p><img src=\"/2017/02/17/docker-本地Registry的部署/docker.jpg\" alt=\"logo\"></p>\n"},{"title":"my promise","date":"2017-05-26T13:37:57.000Z","author":"月牙天冲","_content":"\n\n![logo](my-promise/yueshujun.png)\n","source":"_posts/my-promise.md","raw":"---\ntitle: my promise\ndate: 2017-05-26 21:37:57\nauthor: \"月牙天冲\"\ntags:\n---\n\n\n![logo](my-promise/yueshujun.png)\n","slug":"my-promise","published":1,"updated":"2017-05-27T06:41:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3bpqyp00006sof13x9wafkb","content":"<p><img src=\"/2017/05/26/my-promise/yueshujun.png\" alt=\"logo\"></p>\n","excerpt":"","more":"<p><img src=\"/2017/05/26/my-promise/yueshujun.png\" alt=\"logo\"></p>\n"},{"title":"mysql增量备份和恢复","date":"2017-05-26T13:21:42.000Z","author":"月牙天冲","_content":"\n\n## 1.设置文件my.conf中的mysqld添加配置\n```shell\nserver_id       = 1\nlog_bin         = /var/log/mysql/mysql-bin.log # 二进制日志保存的路径\nexpire_logs_days    = 10\nmax_binlog_size   = 100M\nbinlog_ignore_db    = mysql # 不写入日志的数据库\nbinlog_ignore_db    = test # 多个需要重复设置\n```\n\n## 2.重启进入mysql查看\n```\nmysql> show binary logs;\n+--------------+-----------+\n| Log_name     | File_size |\n+--------------+-----------+\n| mysql.000001 |  20437849 |\n| mysql.000002 |    102119 |\n| mysql.000003 |    488825 |\n| mysql.000004 |  18150699 |\n| mysql.000005 |  36176222 |\n+--------------+-----------+\n\n```\n```\nmysql> show master status;\n+--------------+----------+--------------+------------------+-------------------+\n| File         | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+--------------+----------+--------------+------------------+-------------------+\n| mysql.000005 | 36205491 |              | mysql,test       |                   |\n+--------------+----------+--------------+------------------+-------------------+\n```\n\n## 3. 全量备份\n```\nshell> mysqldump --single-transaction --flush-logs --master-data=2 \\\n         --all-databases > backup_sunday_1_PM.sql\n```\n--single-transaction 单独的事务\n--flush-logs 刷新二进制日志\n--master-data\n","source":"_posts/mysql增量备份和恢复.md","raw":"---\ntitle: mysql增量备份和恢复\ndate: 2017-05-26 21:21:42\nauthor: \"月牙天冲\"\ntags:\n  - mysql\n---\n\n\n## 1.设置文件my.conf中的mysqld添加配置\n```shell\nserver_id       = 1\nlog_bin         = /var/log/mysql/mysql-bin.log # 二进制日志保存的路径\nexpire_logs_days    = 10\nmax_binlog_size   = 100M\nbinlog_ignore_db    = mysql # 不写入日志的数据库\nbinlog_ignore_db    = test # 多个需要重复设置\n```\n\n## 2.重启进入mysql查看\n```\nmysql> show binary logs;\n+--------------+-----------+\n| Log_name     | File_size |\n+--------------+-----------+\n| mysql.000001 |  20437849 |\n| mysql.000002 |    102119 |\n| mysql.000003 |    488825 |\n| mysql.000004 |  18150699 |\n| mysql.000005 |  36176222 |\n+--------------+-----------+\n\n```\n```\nmysql> show master status;\n+--------------+----------+--------------+------------------+-------------------+\n| File         | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |\n+--------------+----------+--------------+------------------+-------------------+\n| mysql.000005 | 36205491 |              | mysql,test       |                   |\n+--------------+----------+--------------+------------------+-------------------+\n```\n\n## 3. 全量备份\n```\nshell> mysqldump --single-transaction --flush-logs --master-data=2 \\\n         --all-databases > backup_sunday_1_PM.sql\n```\n--single-transaction 单独的事务\n--flush-logs 刷新二进制日志\n--master-data\n","slug":"mysql增量备份和恢复","published":1,"updated":"2017-05-26T13:25:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3bpqyp30009sof1vu7n8uzp","content":"<h2 id=\"1-设置文件my-conf中的mysqld添加配置\"><a href=\"#1-设置文件my-conf中的mysqld添加配置\" class=\"headerlink\" title=\"1.设置文件my.conf中的mysqld添加配置\"></a>1.设置文件my.conf中的mysqld添加配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">server_id       = 1</div><div class=\"line\">log_bin         = /var/log/mysql/mysql-bin.log # 二进制日志保存的路径</div><div class=\"line\">expire_logs_days    = 10</div><div class=\"line\">max_binlog_size   = 100M</div><div class=\"line\">binlog_ignore_db    = mysql # 不写入日志的数据库</div><div class=\"line\">binlog_ignore_db    = test # 多个需要重复设置</div></pre></td></tr></table></figure>\n<h2 id=\"2-重启进入mysql查看\"><a href=\"#2-重启进入mysql查看\" class=\"headerlink\" title=\"2.重启进入mysql查看\"></a>2.重启进入mysql查看</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">mysql&gt; show binary logs;</div><div class=\"line\">+--------------+-----------+</div><div class=\"line\">| Log_name     | File_size |</div><div class=\"line\">+--------------+-----------+</div><div class=\"line\">| mysql.000001 |  20437849 |</div><div class=\"line\">| mysql.000002 |    102119 |</div><div class=\"line\">| mysql.000003 |    488825 |</div><div class=\"line\">| mysql.000004 |  18150699 |</div><div class=\"line\">| mysql.000005 |  36176222 |</div><div class=\"line\">+--------------+-----------+</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">mysql&gt; show master status;</div><div class=\"line\">+--------------+----------+--------------+------------------+-------------------+</div><div class=\"line\">| File         | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</div><div class=\"line\">+--------------+----------+--------------+------------------+-------------------+</div><div class=\"line\">| mysql.000005 | 36205491 |              | mysql,test       |                   |</div><div class=\"line\">+--------------+----------+--------------+------------------+-------------------+</div></pre></td></tr></table></figure>\n<h2 id=\"3-全量备份\"><a href=\"#3-全量备份\" class=\"headerlink\" title=\"3. 全量备份\"></a>3. 全量备份</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">shell&gt; mysqldump --single-transaction --flush-logs --master-data=2 \\</div><div class=\"line\">         --all-databases &gt; backup_sunday_1_PM.sql</div></pre></td></tr></table></figure>\n<p>–single-transaction 单独的事务<br>–flush-logs 刷新二进制日志<br>–master-data</p>\n","excerpt":"","more":"<h2 id=\"1-设置文件my-conf中的mysqld添加配置\"><a href=\"#1-设置文件my-conf中的mysqld添加配置\" class=\"headerlink\" title=\"1.设置文件my.conf中的mysqld添加配置\"></a>1.设置文件my.conf中的mysqld添加配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">server_id       = 1</div><div class=\"line\">log_bin         = /var/log/mysql/mysql-bin.log # 二进制日志保存的路径</div><div class=\"line\">expire_logs_days    = 10</div><div class=\"line\">max_binlog_size   = 100M</div><div class=\"line\">binlog_ignore_db    = mysql # 不写入日志的数据库</div><div class=\"line\">binlog_ignore_db    = test # 多个需要重复设置</div></pre></td></tr></table></figure>\n<h2 id=\"2-重启进入mysql查看\"><a href=\"#2-重启进入mysql查看\" class=\"headerlink\" title=\"2.重启进入mysql查看\"></a>2.重启进入mysql查看</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">mysql&gt; show binary logs;</div><div class=\"line\">+--------------+-----------+</div><div class=\"line\">| Log_name     | File_size |</div><div class=\"line\">+--------------+-----------+</div><div class=\"line\">| mysql.000001 |  20437849 |</div><div class=\"line\">| mysql.000002 |    102119 |</div><div class=\"line\">| mysql.000003 |    488825 |</div><div class=\"line\">| mysql.000004 |  18150699 |</div><div class=\"line\">| mysql.000005 |  36176222 |</div><div class=\"line\">+--------------+-----------+</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">mysql&gt; show master status;</div><div class=\"line\">+--------------+----------+--------------+------------------+-------------------+</div><div class=\"line\">| File         | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</div><div class=\"line\">+--------------+----------+--------------+------------------+-------------------+</div><div class=\"line\">| mysql.000005 | 36205491 |              | mysql,test       |                   |</div><div class=\"line\">+--------------+----------+--------------+------------------+-------------------+</div></pre></td></tr></table></figure>\n<h2 id=\"3-全量备份\"><a href=\"#3-全量备份\" class=\"headerlink\" title=\"3. 全量备份\"></a>3. 全量备份</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">shell&gt; mysqldump --single-transaction --flush-logs --master-data=2 \\</div><div class=\"line\">         --all-databases &gt; backup_sunday_1_PM.sql</div></pre></td></tr></table></figure>\n<p>–single-transaction 单独的事务<br>–flush-logs 刷新二进制日志<br>–master-data</p>\n"},{"title":"常用命令(不定期更新)","date":"2017-05-20T15:31:52.000Z","author":"月牙天冲","_content":"\n\n# 1.转换图片大小\n```shell\nconvert -resize 50% old.jpg new.jpg\n```\n\n# 2.项目启动celery服务\n\n```shell\ncelery worker --app=taidii  --loglevel=info --logfile=celery-worker-default-out.log\n\ncelery beat --app=taidii --loglevel=info\n```\n# 3.项目修改js之前\n\n```shell\ncd static/js/app/modules/\nbabel --presets react --watch reactSrc/ --out-dir reactBuild/\n```\n\n# 4.ssh保持连接\n```\nssh -o TCPKeepAlive=yes -o ServerAliveInterval=300\n```\n\n# 5.django south\n```\npython manage.py syncdb\npython manage.py convert_to_south appname\np\npython manage.py schemagration appname --initial\npython manage.py schemagration appname --auto\npython manage.py schemagration appname --fake 00001.xxx\npython manage.py migrate appname\n```\n","source":"_posts/常用命令-不定期更新.md","raw":"---\ntitle: 常用命令(不定期更新)\ndate: 2017-05-20 23:31:52\nauthor: \"月牙天冲\"\ntags:\n  - 学习笔记\n---\n\n\n# 1.转换图片大小\n```shell\nconvert -resize 50% old.jpg new.jpg\n```\n\n# 2.项目启动celery服务\n\n```shell\ncelery worker --app=taidii  --loglevel=info --logfile=celery-worker-default-out.log\n\ncelery beat --app=taidii --loglevel=info\n```\n# 3.项目修改js之前\n\n```shell\ncd static/js/app/modules/\nbabel --presets react --watch reactSrc/ --out-dir reactBuild/\n```\n\n# 4.ssh保持连接\n```\nssh -o TCPKeepAlive=yes -o ServerAliveInterval=300\n```\n\n# 5.django south\n```\npython manage.py syncdb\npython manage.py convert_to_south appname\np\npython manage.py schemagration appname --initial\npython manage.py schemagration appname --auto\npython manage.py schemagration appname --fake 00001.xxx\npython manage.py migrate appname\n```\n","slug":"常用命令-不定期更新","published":1,"updated":"2017-05-26T13:26:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3bpqyp5000bsof1wd3ybwkl","content":"<h1 id=\"1-转换图片大小\"><a href=\"#1-转换图片大小\" class=\"headerlink\" title=\"1.转换图片大小\"></a>1.转换图片大小</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">convert -resize 50% old.jpg new.jpg</div></pre></td></tr></table></figure>\n<h1 id=\"2-项目启动celery服务\"><a href=\"#2-项目启动celery服务\" class=\"headerlink\" title=\"2.项目启动celery服务\"></a>2.项目启动celery服务</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">celery worker --app=taidii  --loglevel=info --logfile=celery-worker-default-out.log</div><div class=\"line\"></div><div class=\"line\">celery beat --app=taidii --loglevel=info</div></pre></td></tr></table></figure>\n<h1 id=\"3-项目修改js之前\"><a href=\"#3-项目修改js之前\" class=\"headerlink\" title=\"3.项目修改js之前\"></a>3.项目修改js之前</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">cd static/js/app/modules/</div><div class=\"line\">babel --presets react --watch reactSrc/ --out-dir reactBuild/</div></pre></td></tr></table></figure>\n<h1 id=\"4-ssh保持连接\"><a href=\"#4-ssh保持连接\" class=\"headerlink\" title=\"4.ssh保持连接\"></a>4.ssh保持连接</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ssh -o TCPKeepAlive=yes -o ServerAliveInterval=300</div></pre></td></tr></table></figure>\n<h1 id=\"5-django-south\"><a href=\"#5-django-south\" class=\"headerlink\" title=\"5.django south\"></a>5.django south</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">python manage.py syncdb</div><div class=\"line\">python manage.py convert_to_south appname</div><div class=\"line\">p</div><div class=\"line\">python manage.py schemagration appname --initial</div><div class=\"line\">python manage.py schemagration appname --auto</div><div class=\"line\">python manage.py schemagration appname --fake 00001.xxx</div><div class=\"line\">python manage.py migrate appname</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"1-转换图片大小\"><a href=\"#1-转换图片大小\" class=\"headerlink\" title=\"1.转换图片大小\"></a>1.转换图片大小</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">convert -resize 50% old.jpg new.jpg</div></pre></td></tr></table></figure>\n<h1 id=\"2-项目启动celery服务\"><a href=\"#2-项目启动celery服务\" class=\"headerlink\" title=\"2.项目启动celery服务\"></a>2.项目启动celery服务</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">celery worker --app=taidii  --loglevel=info --logfile=celery-worker-default-out.log</div><div class=\"line\"></div><div class=\"line\">celery beat --app=taidii --loglevel=info</div></pre></td></tr></table></figure>\n<h1 id=\"3-项目修改js之前\"><a href=\"#3-项目修改js之前\" class=\"headerlink\" title=\"3.项目修改js之前\"></a>3.项目修改js之前</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">cd static/js/app/modules/</div><div class=\"line\">babel --presets react --watch reactSrc/ --out-dir reactBuild/</div></pre></td></tr></table></figure>\n<h1 id=\"4-ssh保持连接\"><a href=\"#4-ssh保持连接\" class=\"headerlink\" title=\"4.ssh保持连接\"></a>4.ssh保持连接</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">ssh -o TCPKeepAlive=yes -o ServerAliveInterval=300</div></pre></td></tr></table></figure>\n<h1 id=\"5-django-south\"><a href=\"#5-django-south\" class=\"headerlink\" title=\"5.django south\"></a>5.django south</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">python manage.py syncdb</div><div class=\"line\">python manage.py convert_to_south appname</div><div class=\"line\">p</div><div class=\"line\">python manage.py schemagration appname --initial</div><div class=\"line\">python manage.py schemagration appname --auto</div><div class=\"line\">python manage.py schemagration appname --fake 00001.xxx</div><div class=\"line\">python manage.py migrate appname</div></pre></td></tr></table></figure>\n"},{"title":"【SOAR】cosplay社","date":"2017-05-16T15:25:56.000Z","header-img":"QQ20170516-0.jpg","cdn":"header-off","author":"月牙天冲","_content":"\n\n![example1](【SOAR】cosplay社/QQ20170516-0.jpg)\n","source":"_posts/【SOAR】cosplay社.md","raw":"---\ntitle: 【SOAR】cosplay社\ndate: 2017-05-16 23:25:56\nheader-img: \"QQ20170516-0.jpg\"\ncdn: 'header-off'\nauthor: \"月牙天冲\"\ntags:\n  - 动漫\n---\n\n\n![example1](【SOAR】cosplay社/QQ20170516-0.jpg)\n","slug":"【SOAR】cosplay社","published":1,"updated":"2017-05-16T15:31:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3bpqyp8000esof1wnk1lnfq","content":"<p><img src=\"/2017/05/16/【SOAR】cosplay社/QQ20170516-0.jpg\" alt=\"example1\"></p>\n","excerpt":"","more":"<p><img src=\"/2017/05/16/【SOAR】cosplay社/QQ20170516-0.jpg\" alt=\"example1\"></p>\n"},{"title":"第十三章 红黑树","date":"2017-05-30T05:17:26.000Z","author":"月牙天冲","_content":"\n# 十三章 红黑树(red-black tree)\n\n## 13.1 红黑树的性质\n\n红黑树是一个二叉搜索树，增加了一个存储位保存结点的颜色， black 或者 red\n树中的结点包含5个属性: color, key, left, right, p\n* 1.每个结点或是红色， 或是黑色\n* 2.根结点是黑色\n* 3.每个叶结点(nil)都是黑色的\n* 4.如果一个结点是红色， 则它的2个子结点都是黑色\n* 5.对于每个结点， 到其所有后代叶结点的简单路径上，均包含相同数量的黑色结点\n\n> 黑高: 从某个结点x出发，到达一个叶结点的任意一条简单路径上的黑色结点的个数称为该结点的黑高\n\n> 一个有n个内部结点的红黑树高度最多为 2log(n + 1)\n```\n证明:\n  假设红黑树的高为h，由性质4可知：从根结点到叶结点一条简单路径上至少有一半是黑色的。即：bh(x) >= h/2\n  由性质4可知, 结点数量 n >= 2**bh(x) - 1\n  log(n+1) >= bh(x)\n  log(n+1) >= h/2\n  所以：h <= 2log(n+1)\n```\n\n## 13.2 旋转(rotation)\n![rotation](第十三章-红黑树/13_2_1.png)\n* 左旋(left-rotation)\n```\ndef left_rotation(T, x):\n    y = x.right\n    x.right = y.left\n    if y.left != T.nil:\n        y.left.p = x\n    if x.p == T.nil:\n        T.root = y\n    elif x == x.p.left:\n        x.p.left = y\n    else:\n        x.p.right = y\n    x.p = y\n    y.left = x\n```\n* 右旋(right-rotation)\n```\ndef right_rotation(T, x):\n    y = x.p\n    y.left = x.right\n    if x.right != nil:\n        x.right.p = y\n    if y.p == T.nil:\n        T.root = x\n    elif y.p.left == y:\n        y.p.left = x\n    else:\n        y.p.right = x\n    x.right = y\n    y.p = x\n```\n## 13.3 插入\nRB-INSERT插入结点后后需要一个辅助程序RB-INSERT-FIXUP对结点重新着色并旋转\n```\ndef RB_INSERT(T, z):\n    pass\n```\n\n## 13.4 删除\n","source":"_posts/第十三章-红黑树.md","raw":"---\ntitle: 第十三章 红黑树\ndate: 2017-05-30 13:17:26\nauthor: \"月牙天冲\"\ntags:\n    - 算法导论\n---\n\n# 十三章 红黑树(red-black tree)\n\n## 13.1 红黑树的性质\n\n红黑树是一个二叉搜索树，增加了一个存储位保存结点的颜色， black 或者 red\n树中的结点包含5个属性: color, key, left, right, p\n* 1.每个结点或是红色， 或是黑色\n* 2.根结点是黑色\n* 3.每个叶结点(nil)都是黑色的\n* 4.如果一个结点是红色， 则它的2个子结点都是黑色\n* 5.对于每个结点， 到其所有后代叶结点的简单路径上，均包含相同数量的黑色结点\n\n> 黑高: 从某个结点x出发，到达一个叶结点的任意一条简单路径上的黑色结点的个数称为该结点的黑高\n\n> 一个有n个内部结点的红黑树高度最多为 2log(n + 1)\n```\n证明:\n  假设红黑树的高为h，由性质4可知：从根结点到叶结点一条简单路径上至少有一半是黑色的。即：bh(x) >= h/2\n  由性质4可知, 结点数量 n >= 2**bh(x) - 1\n  log(n+1) >= bh(x)\n  log(n+1) >= h/2\n  所以：h <= 2log(n+1)\n```\n\n## 13.2 旋转(rotation)\n![rotation](第十三章-红黑树/13_2_1.png)\n* 左旋(left-rotation)\n```\ndef left_rotation(T, x):\n    y = x.right\n    x.right = y.left\n    if y.left != T.nil:\n        y.left.p = x\n    if x.p == T.nil:\n        T.root = y\n    elif x == x.p.left:\n        x.p.left = y\n    else:\n        x.p.right = y\n    x.p = y\n    y.left = x\n```\n* 右旋(right-rotation)\n```\ndef right_rotation(T, x):\n    y = x.p\n    y.left = x.right\n    if x.right != nil:\n        x.right.p = y\n    if y.p == T.nil:\n        T.root = x\n    elif y.p.left == y:\n        y.p.left = x\n    else:\n        y.p.right = x\n    x.right = y\n    y.p = x\n```\n## 13.3 插入\nRB-INSERT插入结点后后需要一个辅助程序RB-INSERT-FIXUP对结点重新着色并旋转\n```\ndef RB_INSERT(T, z):\n    pass\n```\n\n## 13.4 删除\n","slug":"第十三章-红黑树","published":1,"updated":"2017-05-30T15:12:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3bpqyp9000fsof1pg18nxcg","content":"<h1 id=\"十三章-红黑树-red-black-tree\"><a href=\"#十三章-红黑树-red-black-tree\" class=\"headerlink\" title=\"十三章 红黑树(red-black tree)\"></a>十三章 红黑树(red-black tree)</h1><h2 id=\"13-1-红黑树的性质\"><a href=\"#13-1-红黑树的性质\" class=\"headerlink\" title=\"13.1 红黑树的性质\"></a>13.1 红黑树的性质</h2><p>红黑树是一个二叉搜索树，增加了一个存储位保存结点的颜色， black 或者 red<br>树中的结点包含5个属性: color, key, left, right, p</p>\n<ul>\n<li>1.每个结点或是红色， 或是黑色</li>\n<li>2.根结点是黑色</li>\n<li>3.每个叶结点(nil)都是黑色的</li>\n<li>4.如果一个结点是红色， 则它的2个子结点都是黑色</li>\n<li>5.对于每个结点， 到其所有后代叶结点的简单路径上，均包含相同数量的黑色结点</li>\n</ul>\n<blockquote>\n<p>黑高: 从某个结点x出发，到达一个叶结点的任意一条简单路径上的黑色结点的个数称为该结点的黑高</p>\n<p>一个有n个内部结点的红黑树高度最多为 2log(n + 1)<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">证明:</div><div class=\"line\">  假设红黑树的高为h，由性质4可知：从根结点到叶结点一条简单路径上至少有一半是黑色的。即：bh(x) &gt;= h/2</div><div class=\"line\">  由性质4可知, 结点数量 n &gt;= 2**bh(x) - 1</div><div class=\"line\">  log(n+1) &gt;= bh(x)</div><div class=\"line\">  log(n+1) &gt;= h/2</div><div class=\"line\">  所以：h &lt;= 2log(n+1)</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"13-2-旋转-rotation\"><a href=\"#13-2-旋转-rotation\" class=\"headerlink\" title=\"13.2 旋转(rotation)\"></a>13.2 旋转(rotation)</h2><p><img src=\"/2017/05/30/第十三章-红黑树/13_2_1.png\" alt=\"rotation\"></p>\n<ul>\n<li><p>左旋(left-rotation)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">def left_rotation(T, x):</div><div class=\"line\">    y = x.right</div><div class=\"line\">    x.right = y.left</div><div class=\"line\">    if y.left != T.nil:</div><div class=\"line\">        y.left.p = x</div><div class=\"line\">    if x.p == T.nil:</div><div class=\"line\">        T.root = y</div><div class=\"line\">    elif x == x.p.left:</div><div class=\"line\">        x.p.left = y</div><div class=\"line\">    else:</div><div class=\"line\">        x.p.right = y</div><div class=\"line\">    x.p = y</div><div class=\"line\">    y.left = x</div></pre></td></tr></table></figure>\n</li>\n<li><p>右旋(right-rotation)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">def right_rotation(T, x):</div><div class=\"line\">    y = x.p</div><div class=\"line\">    y.left = x.right</div><div class=\"line\">    if x.right != nil:</div><div class=\"line\">        x.right.p = y</div><div class=\"line\">    if y.p == T.nil:</div><div class=\"line\">        T.root = x</div><div class=\"line\">    elif y.p.left == y:</div><div class=\"line\">        y.p.left = x</div><div class=\"line\">    else:</div><div class=\"line\">        y.p.right = x</div><div class=\"line\">    x.right = y</div><div class=\"line\">    y.p = x</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"13-3-插入\"><a href=\"#13-3-插入\" class=\"headerlink\" title=\"13.3 插入\"></a>13.3 插入</h2><p>RB-INSERT插入结点后后需要一个辅助程序RB-INSERT-FIXUP对结点重新着色并旋转<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">def RB_INSERT(T, z):</div><div class=\"line\">    pass</div></pre></td></tr></table></figure></p>\n<h2 id=\"13-4-删除\"><a href=\"#13-4-删除\" class=\"headerlink\" title=\"13.4 删除\"></a>13.4 删除</h2>","excerpt":"","more":"<h1 id=\"十三章-红黑树-red-black-tree\"><a href=\"#十三章-红黑树-red-black-tree\" class=\"headerlink\" title=\"十三章 红黑树(red-black tree)\"></a>十三章 红黑树(red-black tree)</h1><h2 id=\"13-1-红黑树的性质\"><a href=\"#13-1-红黑树的性质\" class=\"headerlink\" title=\"13.1 红黑树的性质\"></a>13.1 红黑树的性质</h2><p>红黑树是一个二叉搜索树，增加了一个存储位保存结点的颜色， black 或者 red<br>树中的结点包含5个属性: color, key, left, right, p</p>\n<ul>\n<li>1.每个结点或是红色， 或是黑色</li>\n<li>2.根结点是黑色</li>\n<li>3.每个叶结点(nil)都是黑色的</li>\n<li>4.如果一个结点是红色， 则它的2个子结点都是黑色</li>\n<li>5.对于每个结点， 到其所有后代叶结点的简单路径上，均包含相同数量的黑色结点</li>\n</ul>\n<blockquote>\n<p>黑高: 从某个结点x出发，到达一个叶结点的任意一条简单路径上的黑色结点的个数称为该结点的黑高</p>\n<p>一个有n个内部结点的红黑树高度最多为 2log(n + 1)<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">证明:</div><div class=\"line\">  假设红黑树的高为h，由性质4可知：从根结点到叶结点一条简单路径上至少有一半是黑色的。即：bh(x) &gt;= h/2</div><div class=\"line\">  由性质4可知, 结点数量 n &gt;= 2**bh(x) - 1</div><div class=\"line\">  log(n+1) &gt;= bh(x)</div><div class=\"line\">  log(n+1) &gt;= h/2</div><div class=\"line\">  所以：h &lt;= 2log(n+1)</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"13-2-旋转-rotation\"><a href=\"#13-2-旋转-rotation\" class=\"headerlink\" title=\"13.2 旋转(rotation)\"></a>13.2 旋转(rotation)</h2><p><img src=\"/2017/05/30/第十三章-红黑树/13_2_1.png\" alt=\"rotation\"></p>\n<ul>\n<li><p>左旋(left-rotation)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">def left_rotation(T, x):</div><div class=\"line\">    y = x.right</div><div class=\"line\">    x.right = y.left</div><div class=\"line\">    if y.left != T.nil:</div><div class=\"line\">        y.left.p = x</div><div class=\"line\">    if x.p == T.nil:</div><div class=\"line\">        T.root = y</div><div class=\"line\">    elif x == x.p.left:</div><div class=\"line\">        x.p.left = y</div><div class=\"line\">    else:</div><div class=\"line\">        x.p.right = y</div><div class=\"line\">    x.p = y</div><div class=\"line\">    y.left = x</div></pre></td></tr></table></figure>\n</li>\n<li><p>右旋(right-rotation)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">def right_rotation(T, x):</div><div class=\"line\">    y = x.p</div><div class=\"line\">    y.left = x.right</div><div class=\"line\">    if x.right != nil:</div><div class=\"line\">        x.right.p = y</div><div class=\"line\">    if y.p == T.nil:</div><div class=\"line\">        T.root = x</div><div class=\"line\">    elif y.p.left == y:</div><div class=\"line\">        y.p.left = x</div><div class=\"line\">    else:</div><div class=\"line\">        y.p.right = x</div><div class=\"line\">    x.right = y</div><div class=\"line\">    y.p = x</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"13-3-插入\"><a href=\"#13-3-插入\" class=\"headerlink\" title=\"13.3 插入\"></a>13.3 插入</h2><p>RB-INSERT插入结点后后需要一个辅助程序RB-INSERT-FIXUP对结点重新着色并旋转<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">def RB_INSERT(T, z):</div><div class=\"line\">    pass</div></pre></td></tr></table></figure></p>\n<h2 id=\"13-4-删除\"><a href=\"#13-4-删除\" class=\"headerlink\" title=\"13.4 删除\"></a>13.4 删除</h2>"},{"title":"机器学习(一):简单线性回归","date":"2017-02-21T02:31:06.000Z","author":"月牙天冲","_content":"\n## 1. 获取数据\n假设你是一家连锁店的老板，希望在另一个城市开分店，现在有一组城市的人口与利润的关系图，\n通过这些数据预测不同人口的城市的利润\n数据可以通过这个连接[下载](ex1data1.txt)\n\n\n```python\n# 导入模块\nimport numpy as np\nimport pandas as pd\nimport matlib.pyplot as plt\n\n# 读取数据\ndata = pd.read_csv('ex1data1.txt', names=['Population','Profit'], header=None) #设置列名\n# 画出数据的散点图查看\ndata.plot(kind='scatter', x='Population', y='Profit', figsize=(12,8))\nplt.show()\n```\n\n如图:  \n![example1](机器学习-一-简单线性回归/figure1.png)\n\n## 2.梯度下降\n\n>梯度下降:\n>假设 y = f(x), 求y最小值时候的x.\n>则 梯度 Δ = f'(x)\n>设定好一定的步长 λ\n>x <-- x - λ*Δ\n>代理初始的x后每次迭代x都往梯度下降的方向挪动一定的步长(其中Δ控制方向)。\n>迭代多次后,当两次x带入后获取的y数值相差极小时,此时的x为最优解\n\n\n## 3.实现简单的线性回归\n只有一个因素影响数据, 假设直线 Y = theta0 + theta1*X1  \n转换为向量的思想，则:Y = theta * (1, X)\n![formula](机器学习-一-简单线性回归/formula4.png)\n\n误差计算方法:\n![formula](机器学习-一-简单线性回归/formula1.png)\n\n即:\n![formula](机器学习-一-简单线性回归/formula2.png)\n\n```Python\ndef computeCast(X, Y, theta):\n  \"\"\"\n  计算误差的方法\n  X: 输入的数据,格式：[[1,2],[1,3],[1,4]...]\n  Y: 实际结果, 格式：[[1],[2],[3]...]\n  theta: 参数, 向量，格式：[0,0]\n  \"\"\"\n  error = np.sqrt(np.power(((X*theta.T) - Y), 2))\n  return np.sum(error)/(len(X)*2) #TODO 为什么要多除一个2？\n\n# 例\ntheta  = np.matrix(np.array([0,0]))\ncost = computeCast(X, Y, theta)\nprint cost # 32.0727338775\n\n```\n\n\n\n使用梯度下降的方法调节参数theta,获取最小数据差异的结果  \n具体为:\n\n>根据复合函数求导,对误差e求theta偏导,获取梯度Δ:\n![formula](机器学习-一-简单线性回归/formula3.png)\n> 根据梯度下降的公式:x <-- x - λ*Δ，每次迭代，重复梯度下降的过程.\n> 代码流程为:\n> 1. 设定初始的theta值，迭代次数iters，步长alpha\n> 2. 根据 梯度下降的公式不断修改 theta\n> 2. 根据迭代次数重复上一个步骤\n\n\n```python\ndef gradientDescent(X, Y, theta, alpha, inters):\n  \"\"\"\n  梯度下降方法\n  alpha: 步长\n  inters: 迭代次数\n  \"\"\"\n  temp = np.zeros(theta.shape) # 用于缓存theta\n  arguments = int(theta.ravel().shape[0]) # theta的元素数量\n  cost = np.zeros(len(X)) # 用于保存每次迭代后theta所对应的误差\n  for i in xrange(iters):\n    error = X*theta.T - Y\n    for j in xrange(arguments): # 修改参数的每一个元素\n      term = np.multiply(error, X[:,j])\n      temp[:,j] = theta[:,j] - (alpha/len(x)) * np.sum(term)\n    theta = temp\n    cost[i] = computeCast(X, Y, theta)\n    return theta, cost\n```\n## 4. 观察结果\n设定一些参数,运行\n```Python\ntheta = np.matrix(np.array([0,0]))\nalpha = 0.01\ninters = 1000\ng, cost = gradientDescent(X, Y,theta, alpha, iters)\nprint g # [[-3.24140214  1.1272942 ]]\nprint cost[-1] # 4.51595550308\n```\n\n根据得到的theta画出预测的直线\n```python\nx_array = np.linspace(data.Populcation.min(), data.Populocation.max(), 1000)\ny_array = theta[:,0] + theta[:,1] * x_array\nfig, ax = plt.subplots(figsize=(12,8))\n\nax.plot(x_array, y_array, 'r', label='Prediction') # 画出预测曲线，红色\nax.scatter(data.Populcation, data.Profit, label='traning data') # 画出训练数据\nax.legend(loc=2) # 提示，标注\nax.set_xlabel('Populocation') # 横坐标\nax.set_ylabel('Profit') # 纵坐标\nax.set_title('Predicted Profit vs. Population Size')\nplt.show()\n```\n如图:  \n![example2](机器学习-一-简单线性回归/figure2.png)\n\n## 5.查看迭代次数与误差的关系\n```python\n# 尝试画出 iters - cost 的曲线\nfig , ax = plt.subplots(figsize=(12,8))\nax.plot(np.arange(iters), cost, 'r')\nax.set_xlabel('iters')\nax.set_ylabel('cost')\nax.set_title('iters vs cost')\nplt.show()\n```\n如图:  \n![example3](机器学习-一-简单线性回归/figure3.png)\n","source":"_posts/机器学习-一-简单线性回归.md","raw":"---\ntitle: '机器学习(一):简单线性回归'\ndate: 2017-02-21 10:31:06\nauthor: \"月牙天冲\"\ntags:\n  - 机器学习\n  - 学习笔记\n  - python\n---\n\n## 1. 获取数据\n假设你是一家连锁店的老板，希望在另一个城市开分店，现在有一组城市的人口与利润的关系图，\n通过这些数据预测不同人口的城市的利润\n数据可以通过这个连接[下载](ex1data1.txt)\n\n\n```python\n# 导入模块\nimport numpy as np\nimport pandas as pd\nimport matlib.pyplot as plt\n\n# 读取数据\ndata = pd.read_csv('ex1data1.txt', names=['Population','Profit'], header=None) #设置列名\n# 画出数据的散点图查看\ndata.plot(kind='scatter', x='Population', y='Profit', figsize=(12,8))\nplt.show()\n```\n\n如图:  \n![example1](机器学习-一-简单线性回归/figure1.png)\n\n## 2.梯度下降\n\n>梯度下降:\n>假设 y = f(x), 求y最小值时候的x.\n>则 梯度 Δ = f'(x)\n>设定好一定的步长 λ\n>x <-- x - λ*Δ\n>代理初始的x后每次迭代x都往梯度下降的方向挪动一定的步长(其中Δ控制方向)。\n>迭代多次后,当两次x带入后获取的y数值相差极小时,此时的x为最优解\n\n\n## 3.实现简单的线性回归\n只有一个因素影响数据, 假设直线 Y = theta0 + theta1*X1  \n转换为向量的思想，则:Y = theta * (1, X)\n![formula](机器学习-一-简单线性回归/formula4.png)\n\n误差计算方法:\n![formula](机器学习-一-简单线性回归/formula1.png)\n\n即:\n![formula](机器学习-一-简单线性回归/formula2.png)\n\n```Python\ndef computeCast(X, Y, theta):\n  \"\"\"\n  计算误差的方法\n  X: 输入的数据,格式：[[1,2],[1,3],[1,4]...]\n  Y: 实际结果, 格式：[[1],[2],[3]...]\n  theta: 参数, 向量，格式：[0,0]\n  \"\"\"\n  error = np.sqrt(np.power(((X*theta.T) - Y), 2))\n  return np.sum(error)/(len(X)*2) #TODO 为什么要多除一个2？\n\n# 例\ntheta  = np.matrix(np.array([0,0]))\ncost = computeCast(X, Y, theta)\nprint cost # 32.0727338775\n\n```\n\n\n\n使用梯度下降的方法调节参数theta,获取最小数据差异的结果  \n具体为:\n\n>根据复合函数求导,对误差e求theta偏导,获取梯度Δ:\n![formula](机器学习-一-简单线性回归/formula3.png)\n> 根据梯度下降的公式:x <-- x - λ*Δ，每次迭代，重复梯度下降的过程.\n> 代码流程为:\n> 1. 设定初始的theta值，迭代次数iters，步长alpha\n> 2. 根据 梯度下降的公式不断修改 theta\n> 2. 根据迭代次数重复上一个步骤\n\n\n```python\ndef gradientDescent(X, Y, theta, alpha, inters):\n  \"\"\"\n  梯度下降方法\n  alpha: 步长\n  inters: 迭代次数\n  \"\"\"\n  temp = np.zeros(theta.shape) # 用于缓存theta\n  arguments = int(theta.ravel().shape[0]) # theta的元素数量\n  cost = np.zeros(len(X)) # 用于保存每次迭代后theta所对应的误差\n  for i in xrange(iters):\n    error = X*theta.T - Y\n    for j in xrange(arguments): # 修改参数的每一个元素\n      term = np.multiply(error, X[:,j])\n      temp[:,j] = theta[:,j] - (alpha/len(x)) * np.sum(term)\n    theta = temp\n    cost[i] = computeCast(X, Y, theta)\n    return theta, cost\n```\n## 4. 观察结果\n设定一些参数,运行\n```Python\ntheta = np.matrix(np.array([0,0]))\nalpha = 0.01\ninters = 1000\ng, cost = gradientDescent(X, Y,theta, alpha, iters)\nprint g # [[-3.24140214  1.1272942 ]]\nprint cost[-1] # 4.51595550308\n```\n\n根据得到的theta画出预测的直线\n```python\nx_array = np.linspace(data.Populcation.min(), data.Populocation.max(), 1000)\ny_array = theta[:,0] + theta[:,1] * x_array\nfig, ax = plt.subplots(figsize=(12,8))\n\nax.plot(x_array, y_array, 'r', label='Prediction') # 画出预测曲线，红色\nax.scatter(data.Populcation, data.Profit, label='traning data') # 画出训练数据\nax.legend(loc=2) # 提示，标注\nax.set_xlabel('Populocation') # 横坐标\nax.set_ylabel('Profit') # 纵坐标\nax.set_title('Predicted Profit vs. Population Size')\nplt.show()\n```\n如图:  \n![example2](机器学习-一-简单线性回归/figure2.png)\n\n## 5.查看迭代次数与误差的关系\n```python\n# 尝试画出 iters - cost 的曲线\nfig , ax = plt.subplots(figsize=(12,8))\nax.plot(np.arange(iters), cost, 'r')\nax.set_xlabel('iters')\nax.set_ylabel('cost')\nax.set_title('iters vs cost')\nplt.show()\n```\n如图:  \n![example3](机器学习-一-简单线性回归/figure3.png)\n","slug":"机器学习-一-简单线性回归","published":1,"updated":"2017-04-27T16:27:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3bpqypb000hsof19kkpo3gh","content":"<h2 id=\"1-获取数据\"><a href=\"#1-获取数据\" class=\"headerlink\" title=\"1. 获取数据\"></a>1. 获取数据</h2><p>假设你是一家连锁店的老板，希望在另一个城市开分店，现在有一组城市的人口与利润的关系图，<br>通过这些数据预测不同人口的城市的利润<br>数据可以通过这个连接<a href=\"ex1data1.txt\">下载</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 导入模块</span></div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</div><div class=\"line\"><span class=\"keyword\">import</span> matlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 读取数据</span></div><div class=\"line\">data = pd.read_csv(<span class=\"string\">'ex1data1.txt'</span>, names=[<span class=\"string\">'Population'</span>,<span class=\"string\">'Profit'</span>], header=<span class=\"keyword\">None</span>) <span class=\"comment\">#设置列名</span></div><div class=\"line\"><span class=\"comment\"># 画出数据的散点图查看</span></div><div class=\"line\">data.plot(kind=<span class=\"string\">'scatter'</span>, x=<span class=\"string\">'Population'</span>, y=<span class=\"string\">'Profit'</span>, figsize=(<span class=\"number\">12</span>,<span class=\"number\">8</span>))</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p>如图:<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/figure1.png\" alt=\"example1\"></p>\n<h2 id=\"2-梯度下降\"><a href=\"#2-梯度下降\" class=\"headerlink\" title=\"2.梯度下降\"></a>2.梯度下降</h2><blockquote>\n<p>梯度下降:<br>假设 y = f(x), 求y最小值时候的x.<br>则 梯度 Δ = f’(x)<br>设定好一定的步长 λ<br>x &lt;– x - λ*Δ<br>代理初始的x后每次迭代x都往梯度下降的方向挪动一定的步长(其中Δ控制方向)。<br>迭代多次后,当两次x带入后获取的y数值相差极小时,此时的x为最优解</p>\n</blockquote>\n<h2 id=\"3-实现简单的线性回归\"><a href=\"#3-实现简单的线性回归\" class=\"headerlink\" title=\"3.实现简单的线性回归\"></a>3.实现简单的线性回归</h2><p>只有一个因素影响数据, 假设直线 Y = theta0 + theta1<em>X1<br>转换为向量的思想，则:Y = theta </em> (1, X)<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/formula4.png\" alt=\"formula\"></p>\n<p>误差计算方法:<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/formula1.png\" alt=\"formula\"></p>\n<p>即:<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/formula2.png\" alt=\"formula\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeCast</span><span class=\"params\">(X, Y, theta)</span>:</span></div><div class=\"line\">  <span class=\"string\">\"\"\"</span></div><div class=\"line\">  计算误差的方法</div><div class=\"line\">  X: 输入的数据,格式：[[1,2],[1,3],[1,4]...]</div><div class=\"line\">  Y: 实际结果, 格式：[[1],[2],[3]...]</div><div class=\"line\">  theta: 参数, 向量，格式：[0,0]</div><div class=\"line\">  \"\"\"</div><div class=\"line\">  error = np.sqrt(np.power(((X*theta.T) - Y), <span class=\"number\">2</span>))</div><div class=\"line\">  <span class=\"keyword\">return</span> np.sum(error)/(len(X)*<span class=\"number\">2</span>) <span class=\"comment\">#TODO 为什么要多除一个2？</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 例</span></div><div class=\"line\">theta  = np.matrix(np.array([<span class=\"number\">0</span>,<span class=\"number\">0</span>]))</div><div class=\"line\">cost = computeCast(X, Y, theta)</div><div class=\"line\"><span class=\"keyword\">print</span> cost <span class=\"comment\"># 32.0727338775</span></div></pre></td></tr></table></figure>\n<p>使用梯度下降的方法调节参数theta,获取最小数据差异的结果<br>具体为:</p>\n<blockquote>\n<p>根据复合函数求导,对误差e求theta偏导,获取梯度Δ:<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/formula3.png\" alt=\"formula\"><br>根据梯度下降的公式:x &lt;– x - λ*Δ，每次迭代，重复梯度下降的过程.<br>代码流程为:</p>\n<ol>\n<li>设定初始的theta值，迭代次数iters，步长alpha</li>\n<li>根据 梯度下降的公式不断修改 theta</li>\n<li>根据迭代次数重复上一个步骤</li>\n</ol>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gradientDescent</span><span class=\"params\">(X, Y, theta, alpha, inters)</span>:</span></div><div class=\"line\">  <span class=\"string\">\"\"\"</span></div><div class=\"line\">  梯度下降方法</div><div class=\"line\">  alpha: 步长</div><div class=\"line\">  inters: 迭代次数</div><div class=\"line\">  \"\"\"</div><div class=\"line\">  temp = np.zeros(theta.shape) <span class=\"comment\"># 用于缓存theta</span></div><div class=\"line\">  arguments = int(theta.ravel().shape[<span class=\"number\">0</span>]) <span class=\"comment\"># theta的元素数量</span></div><div class=\"line\">  cost = np.zeros(len(X)) <span class=\"comment\"># 用于保存每次迭代后theta所对应的误差</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(iters):</div><div class=\"line\">    error = X*theta.T - Y</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> xrange(arguments): <span class=\"comment\"># 修改参数的每一个元素</span></div><div class=\"line\">      term = np.multiply(error, X[:,j])</div><div class=\"line\">      temp[:,j] = theta[:,j] - (alpha/len(x)) * np.sum(term)</div><div class=\"line\">    theta = temp</div><div class=\"line\">    cost[i] = computeCast(X, Y, theta)</div><div class=\"line\">    <span class=\"keyword\">return</span> theta, cost</div></pre></td></tr></table></figure>\n<h2 id=\"4-观察结果\"><a href=\"#4-观察结果\" class=\"headerlink\" title=\"4. 观察结果\"></a>4. 观察结果</h2><p>设定一些参数,运行<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\">theta = np.matrix(np.array([<span class=\"number\">0</span>,<span class=\"number\">0</span>]))</div><div class=\"line\">alpha = <span class=\"number\">0.01</span></div><div class=\"line\">inters = <span class=\"number\">1000</span></div><div class=\"line\">g, cost = gradientDescent(X, Y,theta, alpha, iters)</div><div class=\"line\"><span class=\"keyword\">print</span> g <span class=\"comment\"># [[-3.24140214  1.1272942 ]]</span></div><div class=\"line\"><span class=\"keyword\">print</span> cost[<span class=\"number\">-1</span>] <span class=\"comment\"># 4.51595550308</span></div></pre></td></tr></table></figure></p>\n<p>根据得到的theta画出预测的直线<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\">x_array = np.linspace(data.Populcation.min(), data.Populocation.max(), <span class=\"number\">1000</span>)</div><div class=\"line\">y_array = theta[:,<span class=\"number\">0</span>] + theta[:,<span class=\"number\">1</span>] * x_array</div><div class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">12</span>,<span class=\"number\">8</span>))</div><div class=\"line\"></div><div class=\"line\">ax.plot(x_array, y_array, <span class=\"string\">'r'</span>, label=<span class=\"string\">'Prediction'</span>) <span class=\"comment\"># 画出预测曲线，红色</span></div><div class=\"line\">ax.scatter(data.Populcation, data.Profit, label=<span class=\"string\">'traning data'</span>) <span class=\"comment\"># 画出训练数据</span></div><div class=\"line\">ax.legend(loc=<span class=\"number\">2</span>) <span class=\"comment\"># 提示，标注</span></div><div class=\"line\">ax.set_xlabel(<span class=\"string\">'Populocation'</span>) <span class=\"comment\"># 横坐标</span></div><div class=\"line\">ax.set_ylabel(<span class=\"string\">'Profit'</span>) <span class=\"comment\"># 纵坐标</span></div><div class=\"line\">ax.set_title(<span class=\"string\">'Predicted Profit vs. Population Size'</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure></p>\n<p>如图:<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/figure2.png\" alt=\"example2\"></p>\n<h2 id=\"5-查看迭代次数与误差的关系\"><a href=\"#5-查看迭代次数与误差的关系\" class=\"headerlink\" title=\"5.查看迭代次数与误差的关系\"></a>5.查看迭代次数与误差的关系</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 尝试画出 iters - cost 的曲线</span></div><div class=\"line\">fig , ax = plt.subplots(figsize=(<span class=\"number\">12</span>,<span class=\"number\">8</span>))</div><div class=\"line\">ax.plot(np.arange(iters), cost, <span class=\"string\">'r'</span>)</div><div class=\"line\">ax.set_xlabel(<span class=\"string\">'iters'</span>)</div><div class=\"line\">ax.set_ylabel(<span class=\"string\">'cost'</span>)</div><div class=\"line\">ax.set_title(<span class=\"string\">'iters vs cost'</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p>如图:<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/figure3.png\" alt=\"example3\"></p>\n","excerpt":"","more":"<h2 id=\"1-获取数据\"><a href=\"#1-获取数据\" class=\"headerlink\" title=\"1. 获取数据\"></a>1. 获取数据</h2><p>假设你是一家连锁店的老板，希望在另一个城市开分店，现在有一组城市的人口与利润的关系图，<br>通过这些数据预测不同人口的城市的利润<br>数据可以通过这个连接<a href=\"ex1data1.txt\">下载</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 导入模块</span></div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</div><div class=\"line\"><span class=\"keyword\">import</span> matlib.pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 读取数据</span></div><div class=\"line\">data = pd.read_csv(<span class=\"string\">'ex1data1.txt'</span>, names=[<span class=\"string\">'Population'</span>,<span class=\"string\">'Profit'</span>], header=<span class=\"keyword\">None</span>) <span class=\"comment\">#设置列名</span></div><div class=\"line\"><span class=\"comment\"># 画出数据的散点图查看</span></div><div class=\"line\">data.plot(kind=<span class=\"string\">'scatter'</span>, x=<span class=\"string\">'Population'</span>, y=<span class=\"string\">'Profit'</span>, figsize=(<span class=\"number\">12</span>,<span class=\"number\">8</span>))</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p>如图:<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/figure1.png\" alt=\"example1\"></p>\n<h2 id=\"2-梯度下降\"><a href=\"#2-梯度下降\" class=\"headerlink\" title=\"2.梯度下降\"></a>2.梯度下降</h2><blockquote>\n<p>梯度下降:<br>假设 y = f(x), 求y最小值时候的x.<br>则 梯度 Δ = f’(x)<br>设定好一定的步长 λ<br>x &lt;– x - λ*Δ<br>代理初始的x后每次迭代x都往梯度下降的方向挪动一定的步长(其中Δ控制方向)。<br>迭代多次后,当两次x带入后获取的y数值相差极小时,此时的x为最优解</p>\n</blockquote>\n<h2 id=\"3-实现简单的线性回归\"><a href=\"#3-实现简单的线性回归\" class=\"headerlink\" title=\"3.实现简单的线性回归\"></a>3.实现简单的线性回归</h2><p>只有一个因素影响数据, 假设直线 Y = theta0 + theta1<em>X1<br>转换为向量的思想，则:Y = theta </em> (1, X)<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/formula4.png\" alt=\"formula\"></p>\n<p>误差计算方法:<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/formula1.png\" alt=\"formula\"></p>\n<p>即:<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/formula2.png\" alt=\"formula\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">computeCast</span><span class=\"params\">(X, Y, theta)</span>:</span></div><div class=\"line\">  <span class=\"string\">\"\"\"</span></div><div class=\"line\">  计算误差的方法</div><div class=\"line\">  X: 输入的数据,格式：[[1,2],[1,3],[1,4]...]</div><div class=\"line\">  Y: 实际结果, 格式：[[1],[2],[3]...]</div><div class=\"line\">  theta: 参数, 向量，格式：[0,0]</div><div class=\"line\">  \"\"\"</div><div class=\"line\">  error = np.sqrt(np.power(((X*theta.T) - Y), <span class=\"number\">2</span>))</div><div class=\"line\">  <span class=\"keyword\">return</span> np.sum(error)/(len(X)*<span class=\"number\">2</span>) <span class=\"comment\">#TODO 为什么要多除一个2？</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 例</span></div><div class=\"line\">theta  = np.matrix(np.array([<span class=\"number\">0</span>,<span class=\"number\">0</span>]))</div><div class=\"line\">cost = computeCast(X, Y, theta)</div><div class=\"line\"><span class=\"keyword\">print</span> cost <span class=\"comment\"># 32.0727338775</span></div></pre></td></tr></table></figure>\n<p>使用梯度下降的方法调节参数theta,获取最小数据差异的结果<br>具体为:</p>\n<blockquote>\n<p>根据复合函数求导,对误差e求theta偏导,获取梯度Δ:<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/formula3.png\" alt=\"formula\"><br>根据梯度下降的公式:x &lt;– x - λ*Δ，每次迭代，重复梯度下降的过程.<br>代码流程为:</p>\n<ol>\n<li>设定初始的theta值，迭代次数iters，步长alpha</li>\n<li>根据 梯度下降的公式不断修改 theta</li>\n<li>根据迭代次数重复上一个步骤</li>\n</ol>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gradientDescent</span><span class=\"params\">(X, Y, theta, alpha, inters)</span>:</span></div><div class=\"line\">  <span class=\"string\">\"\"\"</span></div><div class=\"line\">  梯度下降方法</div><div class=\"line\">  alpha: 步长</div><div class=\"line\">  inters: 迭代次数</div><div class=\"line\">  \"\"\"</div><div class=\"line\">  temp = np.zeros(theta.shape) <span class=\"comment\"># 用于缓存theta</span></div><div class=\"line\">  arguments = int(theta.ravel().shape[<span class=\"number\">0</span>]) <span class=\"comment\"># theta的元素数量</span></div><div class=\"line\">  cost = np.zeros(len(X)) <span class=\"comment\"># 用于保存每次迭代后theta所对应的误差</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(iters):</div><div class=\"line\">    error = X*theta.T - Y</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> xrange(arguments): <span class=\"comment\"># 修改参数的每一个元素</span></div><div class=\"line\">      term = np.multiply(error, X[:,j])</div><div class=\"line\">      temp[:,j] = theta[:,j] - (alpha/len(x)) * np.sum(term)</div><div class=\"line\">    theta = temp</div><div class=\"line\">    cost[i] = computeCast(X, Y, theta)</div><div class=\"line\">    <span class=\"keyword\">return</span> theta, cost</div></pre></td></tr></table></figure>\n<h2 id=\"4-观察结果\"><a href=\"#4-观察结果\" class=\"headerlink\" title=\"4. 观察结果\"></a>4. 观察结果</h2><p>设定一些参数,运行<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\">theta = np.matrix(np.array([<span class=\"number\">0</span>,<span class=\"number\">0</span>]))</div><div class=\"line\">alpha = <span class=\"number\">0.01</span></div><div class=\"line\">inters = <span class=\"number\">1000</span></div><div class=\"line\">g, cost = gradientDescent(X, Y,theta, alpha, iters)</div><div class=\"line\"><span class=\"keyword\">print</span> g <span class=\"comment\"># [[-3.24140214  1.1272942 ]]</span></div><div class=\"line\"><span class=\"keyword\">print</span> cost[<span class=\"number\">-1</span>] <span class=\"comment\"># 4.51595550308</span></div></pre></td></tr></table></figure></p>\n<p>根据得到的theta画出预测的直线<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\">x_array = np.linspace(data.Populcation.min(), data.Populocation.max(), <span class=\"number\">1000</span>)</div><div class=\"line\">y_array = theta[:,<span class=\"number\">0</span>] + theta[:,<span class=\"number\">1</span>] * x_array</div><div class=\"line\">fig, ax = plt.subplots(figsize=(<span class=\"number\">12</span>,<span class=\"number\">8</span>))</div><div class=\"line\"></div><div class=\"line\">ax.plot(x_array, y_array, <span class=\"string\">'r'</span>, label=<span class=\"string\">'Prediction'</span>) <span class=\"comment\"># 画出预测曲线，红色</span></div><div class=\"line\">ax.scatter(data.Populcation, data.Profit, label=<span class=\"string\">'traning data'</span>) <span class=\"comment\"># 画出训练数据</span></div><div class=\"line\">ax.legend(loc=<span class=\"number\">2</span>) <span class=\"comment\"># 提示，标注</span></div><div class=\"line\">ax.set_xlabel(<span class=\"string\">'Populocation'</span>) <span class=\"comment\"># 横坐标</span></div><div class=\"line\">ax.set_ylabel(<span class=\"string\">'Profit'</span>) <span class=\"comment\"># 纵坐标</span></div><div class=\"line\">ax.set_title(<span class=\"string\">'Predicted Profit vs. Population Size'</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure></p>\n<p>如图:<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/figure2.png\" alt=\"example2\"></p>\n<h2 id=\"5-查看迭代次数与误差的关系\"><a href=\"#5-查看迭代次数与误差的关系\" class=\"headerlink\" title=\"5.查看迭代次数与误差的关系\"></a>5.查看迭代次数与误差的关系</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 尝试画出 iters - cost 的曲线</span></div><div class=\"line\">fig , ax = plt.subplots(figsize=(<span class=\"number\">12</span>,<span class=\"number\">8</span>))</div><div class=\"line\">ax.plot(np.arange(iters), cost, <span class=\"string\">'r'</span>)</div><div class=\"line\">ax.set_xlabel(<span class=\"string\">'iters'</span>)</div><div class=\"line\">ax.set_ylabel(<span class=\"string\">'cost'</span>)</div><div class=\"line\">ax.set_title(<span class=\"string\">'iters vs cost'</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p>如图:<br><img src=\"/2017/02/21/机器学习-一-简单线性回归/figure3.png\" alt=\"example3\"></p>\n"},{"title":"算法导论 第二章 算法基础","date":"2017-03-02T08:00:13.000Z","author":"月牙天冲","_content":"\n |算法    | 最坏情况运行时间 | 平均/期望运行时间\n-|--------|---------------|---------------\n1|插入排序 | Θ(n\\*\\*2)     | Θ(n\\*\\*2)\n2|归并排序 | Θ(nlgn)       | Θ(nlgn)\n3|冒泡排序 | Θ(n\\*\\*2)     | Θ(n\\*\\*2)\n4|选择排序 | Θ(n\\*\\*2)     | Θ(n\\*\\*2)\n5|堆排序   | Θ(nlgn)       |\n6|快速排序 | Θ(n\\*\\*2)     | Θ(nlgn)\n7|计数排序 | Θ(n + k)      | Θ(n + k)  \n8|基数排序 | Θ(d(n + k))   | Θ(d(n + k))\n9|桶排序   |               |\n\n### 1.插入排序\n  * 思路：类似于抽牌的过程，右手一张张地抽牌，每次右手抽的牌对比左手中已经排序好的牌，放在左手相应的位置中\n  ![example1](算法导论-第二章-算法基础/pic1.png)\n\n```python\n  def sort_insert(lista):\n    for i in xrange(1, len(lista)): # 右手抽的牌\n        right_num = lista[i]\n        j = i #左手边起始对比的位置\n        while (j > 0) and (lista[j-1] > right_num): # 左边比较大的时候\n            lista[j] = lista[j-1] # 坐标的数字往后移\n            j -= 1\n        lista[j] = right_num\n    return lista\n\n```\n### 2.归并排序\n  * 思路:\n    1. 将数组划分为2个排好顺序的数组A和B\n    2. 每次从2个数组中抽出一个最小的放在另一个数组C中，直到A、B其中一个数组被取完，将A、B中未取完的数组放入C中\n\n```python\ndef sort_merge(lista):\n    def compare(A, B): #步骤2\n        result = []\n        i, j = 0, 0\n        while i < len(A) and j < len(B):\n            if A[i] < B[j]:\n                result.append(A[i])\n                i += 1\n            else:\n                result.append(B[j])\n                j += 1\n        result.extend(A[i:])\n        result.extend(B[j:])\n        return result\n\n    def merge(lista): #步骤1，将数组分为2个数组A,B\n        if len(lista) == 1:\n            return lista\n        else:\n            mid = len(lista) // 2\n            left = merge(lista[:mid])\n            right = merge(lista[mid:])\n            return compare(left, right)\n    return merge(lista)\n```\n\n### 3.冒泡排序\n  * 思路: 从左往右，从第一个数字开始，左边一个与右边一个数字对比，如果左边比右边大，就交换顺序，然后再从第二个数字开始迭代\n\n```python\ndef sort_bubble(lista):\n  length = len(lista)\n  for i in xrange(length-1):\n    for j in xrange(i, length-1):\n      if lista[j] > lista[j+1]: #如果左边大于右边，交换位置\n        lista[j], lista[j+1] = lista[j+1], lista[j]\n  return lista\n```\n\n### 4.选择排序\n  * 思路: 类似于冒泡排序，但是循环的时候是找出最小的数值，与循环的起始位置交换顺序\n\n```python\ndef sort_selection(lista):\n  length = len(lista)\n  for i in xrange(length - 1):\n    minum = i\n    for j in xrange(i, length):\n      if lista[j] < lista[minum]:\n        minum = j\n    lista[i] = lista[minum]\n  return lista\n```\n\n### 5.堆排序\n  * 思路:\n      1.将数组看做一个最大二叉堆\n      2.维护最大二叉堆的性质,父节点大于子节点\n      3.然后从根节点取出元素放到后面，重新维护最大堆的性质\n      4.重复3步骤，直到剩下最后1个元素\n\n```python\ndef sort_heap(lista):\n  def Father(i): # 父节点 i的一半向下取整 └ i/2 ┘\n    return (i+1)//2 - 1\n  def Left(i): # 左孩子节点\n    return (i+1)*2 - 1\n  def Right(i): # 右孩子节点\n    return (i+1)*2 + 1 - 1\n  def max_heapify(A, i): # 维护最大堆的性质\n    global heap_size\n    l = Left(i)\n    r = Right(i)\n    lastest = i\n    if l <= heap_size and l > A[lastest]:\n        lastest = l\n    if r <= heap_size and r > A[lastest]:\n        lastest = r  \n    if lastest != i:\n      A[i], A[lastest] = A[lastest], A[i]\n      max_heapify(lastest)\n\n  def build_max_heap(A): # 生成最大堆\n    global heap_size\n    heap_size = len(A) - 1\n    for i in xrange(len(A)//2, -1, -1):\n        max_heapify(A, i)\n\n  def heap_sort(A): #排序\n    global heap_size\n    build_max_heap(A)\n    for i in xrange(len(A) - 1, 0, -1):\n        A[0], A[i] = A[i], A[0]\n        max_heapify(A, 0)\n  heap_sort(lista)\n  return lista\n```\n\n\n\n### 6.快速排序\n  * 思路:\n      1.将数组的第一个数字定为基准数flag，将数组中比flag小的放置在flag左边，比flag大的放置在右边\n      2.对flag左边的和右边的数组重复步骤1\n\n```python\ndef sort_fast(lista):\n    def sub_flag(array, start, end): # 步骤1\n        flag = array[start]#确定flag\n        while start > end:\n            while (start > end) and array[end] > flag: # 比flag大\n                end -= 1 # 数字位置不变，比较的位置左移一格\n            while (start > end) and array[end] < flag: # 比flag小\n                array[start] = array[end] # 移动到左边\n                start += 1\n                array[end] = array[start] # 将之前左边的数字右边一个未比较的数字移动到右边原来的位置\n            array[start] = flag\n        return start # 返回flag的位置\n\n    def quick(array, start, end): # 步骤2\n        if start > end:\n            flag_index = sub_flag(array, start, end)\n            quick(array, start, flag_index)\n            quick(array, flag_index + 1, end)\n    quick(lista, 0, len(lista))\n    return lista\n```\n\n\n### 7.计数排序\n  * 思路:\n      1.假设输入数组A[0,n], 其中最大值是max(A),假设 k >= max(A)\n      2.将B[0,k]每一位赋予初始值0，然后与A中元素i比较，将B[i] = B[i] + 1\n      3.数组B[0,k] 中的数值B[i] 就表示 A中元素i的数量\n      4.B[i] = B[i] + B[i-1],B中元素B[i]就代表比i小的元素的数量\n\n```python\n  def sort_count(lista):\n    k = max(lista) + 1\n    length = len(lista)\n    B = [0] * k # 临时存储\n    C = [0] * length # 输出\n    for i in lista:\n        B[i] = B[i] + 1\n    for i in xrange(1, k):\n        B[i] = B[i] + B[i-1]\n    for i in xrange(length - 1, -1, -1):\n        C[B[lista[i]] = lista[i]\n        B[lista[i]] = B[lista[i]] - 1\n    return C\n\n```\n\n### 8.基数排序\n  * 思路:\n      1.\n```python\n```\n","source":"_posts/算法导论-第二章-算法基础.md","raw":"---\ntitle: 算法导论 第二章 算法基础\ndate: 2017-03-02 16:00:13\nauthor: \"月牙天冲\"\ntags:\n  - 算法导论\n  - 学习笔记\n---\n\n |算法    | 最坏情况运行时间 | 平均/期望运行时间\n-|--------|---------------|---------------\n1|插入排序 | Θ(n\\*\\*2)     | Θ(n\\*\\*2)\n2|归并排序 | Θ(nlgn)       | Θ(nlgn)\n3|冒泡排序 | Θ(n\\*\\*2)     | Θ(n\\*\\*2)\n4|选择排序 | Θ(n\\*\\*2)     | Θ(n\\*\\*2)\n5|堆排序   | Θ(nlgn)       |\n6|快速排序 | Θ(n\\*\\*2)     | Θ(nlgn)\n7|计数排序 | Θ(n + k)      | Θ(n + k)  \n8|基数排序 | Θ(d(n + k))   | Θ(d(n + k))\n9|桶排序   |               |\n\n### 1.插入排序\n  * 思路：类似于抽牌的过程，右手一张张地抽牌，每次右手抽的牌对比左手中已经排序好的牌，放在左手相应的位置中\n  ![example1](算法导论-第二章-算法基础/pic1.png)\n\n```python\n  def sort_insert(lista):\n    for i in xrange(1, len(lista)): # 右手抽的牌\n        right_num = lista[i]\n        j = i #左手边起始对比的位置\n        while (j > 0) and (lista[j-1] > right_num): # 左边比较大的时候\n            lista[j] = lista[j-1] # 坐标的数字往后移\n            j -= 1\n        lista[j] = right_num\n    return lista\n\n```\n### 2.归并排序\n  * 思路:\n    1. 将数组划分为2个排好顺序的数组A和B\n    2. 每次从2个数组中抽出一个最小的放在另一个数组C中，直到A、B其中一个数组被取完，将A、B中未取完的数组放入C中\n\n```python\ndef sort_merge(lista):\n    def compare(A, B): #步骤2\n        result = []\n        i, j = 0, 0\n        while i < len(A) and j < len(B):\n            if A[i] < B[j]:\n                result.append(A[i])\n                i += 1\n            else:\n                result.append(B[j])\n                j += 1\n        result.extend(A[i:])\n        result.extend(B[j:])\n        return result\n\n    def merge(lista): #步骤1，将数组分为2个数组A,B\n        if len(lista) == 1:\n            return lista\n        else:\n            mid = len(lista) // 2\n            left = merge(lista[:mid])\n            right = merge(lista[mid:])\n            return compare(left, right)\n    return merge(lista)\n```\n\n### 3.冒泡排序\n  * 思路: 从左往右，从第一个数字开始，左边一个与右边一个数字对比，如果左边比右边大，就交换顺序，然后再从第二个数字开始迭代\n\n```python\ndef sort_bubble(lista):\n  length = len(lista)\n  for i in xrange(length-1):\n    for j in xrange(i, length-1):\n      if lista[j] > lista[j+1]: #如果左边大于右边，交换位置\n        lista[j], lista[j+1] = lista[j+1], lista[j]\n  return lista\n```\n\n### 4.选择排序\n  * 思路: 类似于冒泡排序，但是循环的时候是找出最小的数值，与循环的起始位置交换顺序\n\n```python\ndef sort_selection(lista):\n  length = len(lista)\n  for i in xrange(length - 1):\n    minum = i\n    for j in xrange(i, length):\n      if lista[j] < lista[minum]:\n        minum = j\n    lista[i] = lista[minum]\n  return lista\n```\n\n### 5.堆排序\n  * 思路:\n      1.将数组看做一个最大二叉堆\n      2.维护最大二叉堆的性质,父节点大于子节点\n      3.然后从根节点取出元素放到后面，重新维护最大堆的性质\n      4.重复3步骤，直到剩下最后1个元素\n\n```python\ndef sort_heap(lista):\n  def Father(i): # 父节点 i的一半向下取整 └ i/2 ┘\n    return (i+1)//2 - 1\n  def Left(i): # 左孩子节点\n    return (i+1)*2 - 1\n  def Right(i): # 右孩子节点\n    return (i+1)*2 + 1 - 1\n  def max_heapify(A, i): # 维护最大堆的性质\n    global heap_size\n    l = Left(i)\n    r = Right(i)\n    lastest = i\n    if l <= heap_size and l > A[lastest]:\n        lastest = l\n    if r <= heap_size and r > A[lastest]:\n        lastest = r  \n    if lastest != i:\n      A[i], A[lastest] = A[lastest], A[i]\n      max_heapify(lastest)\n\n  def build_max_heap(A): # 生成最大堆\n    global heap_size\n    heap_size = len(A) - 1\n    for i in xrange(len(A)//2, -1, -1):\n        max_heapify(A, i)\n\n  def heap_sort(A): #排序\n    global heap_size\n    build_max_heap(A)\n    for i in xrange(len(A) - 1, 0, -1):\n        A[0], A[i] = A[i], A[0]\n        max_heapify(A, 0)\n  heap_sort(lista)\n  return lista\n```\n\n\n\n### 6.快速排序\n  * 思路:\n      1.将数组的第一个数字定为基准数flag，将数组中比flag小的放置在flag左边，比flag大的放置在右边\n      2.对flag左边的和右边的数组重复步骤1\n\n```python\ndef sort_fast(lista):\n    def sub_flag(array, start, end): # 步骤1\n        flag = array[start]#确定flag\n        while start > end:\n            while (start > end) and array[end] > flag: # 比flag大\n                end -= 1 # 数字位置不变，比较的位置左移一格\n            while (start > end) and array[end] < flag: # 比flag小\n                array[start] = array[end] # 移动到左边\n                start += 1\n                array[end] = array[start] # 将之前左边的数字右边一个未比较的数字移动到右边原来的位置\n            array[start] = flag\n        return start # 返回flag的位置\n\n    def quick(array, start, end): # 步骤2\n        if start > end:\n            flag_index = sub_flag(array, start, end)\n            quick(array, start, flag_index)\n            quick(array, flag_index + 1, end)\n    quick(lista, 0, len(lista))\n    return lista\n```\n\n\n### 7.计数排序\n  * 思路:\n      1.假设输入数组A[0,n], 其中最大值是max(A),假设 k >= max(A)\n      2.将B[0,k]每一位赋予初始值0，然后与A中元素i比较，将B[i] = B[i] + 1\n      3.数组B[0,k] 中的数值B[i] 就表示 A中元素i的数量\n      4.B[i] = B[i] + B[i-1],B中元素B[i]就代表比i小的元素的数量\n\n```python\n  def sort_count(lista):\n    k = max(lista) + 1\n    length = len(lista)\n    B = [0] * k # 临时存储\n    C = [0] * length # 输出\n    for i in lista:\n        B[i] = B[i] + 1\n    for i in xrange(1, k):\n        B[i] = B[i] + B[i-1]\n    for i in xrange(length - 1, -1, -1):\n        C[B[lista[i]] = lista[i]\n        B[lista[i]] = B[lista[i]] - 1\n    return C\n\n```\n\n### 8.基数排序\n  * 思路:\n      1.\n```python\n```\n","slug":"算法导论-第二章-算法基础","published":1,"updated":"2017-04-27T16:27:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3bpqypd000jsof1mx3zo0f2","content":"<table>\n<thead>\n<tr>\n<th></th>\n<th>算法</th>\n<th>最坏情况运行时间</th>\n<th>平均/期望运行时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>插入排序</td>\n<td>Θ(n**2)</td>\n<td>Θ(n**2)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>归并排序</td>\n<td>Θ(nlgn)</td>\n<td>Θ(nlgn)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>冒泡排序</td>\n<td>Θ(n**2)</td>\n<td>Θ(n**2)</td>\n</tr>\n<tr>\n<td>4</td>\n<td>选择排序</td>\n<td>Θ(n**2)</td>\n<td>Θ(n**2)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>堆排序</td>\n<td>Θ(nlgn)</td>\n<td></td>\n</tr>\n<tr>\n<td>6</td>\n<td>快速排序</td>\n<td>Θ(n**2)</td>\n<td>Θ(nlgn)</td>\n</tr>\n<tr>\n<td>7</td>\n<td>计数排序</td>\n<td>Θ(n + k)</td>\n<td>Θ(n + k)  </td>\n</tr>\n<tr>\n<td>8</td>\n<td>基数排序</td>\n<td>Θ(d(n + k))</td>\n<td>Θ(d(n + k))</td>\n</tr>\n<tr>\n<td>9</td>\n<td>桶排序</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-插入排序\"><a href=\"#1-插入排序\" class=\"headerlink\" title=\"1.插入排序\"></a>1.插入排序</h3><ul>\n<li>思路：类似于抽牌的过程，右手一张张地抽牌，每次右手抽的牌对比左手中已经排序好的牌，放在左手相应的位置中<br><img src=\"/2017/03/02/算法导论-第二章-算法基础/pic1.png\" alt=\"example1\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_insert</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, len(lista)): <span class=\"comment\"># 右手抽的牌</span></div><div class=\"line\">      right_num = lista[i]</div><div class=\"line\">      j = i <span class=\"comment\">#左手边起始对比的位置</span></div><div class=\"line\">      <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (lista[j<span class=\"number\">-1</span>] &gt; right_num): <span class=\"comment\"># 左边比较大的时候</span></div><div class=\"line\">          lista[j] = lista[j<span class=\"number\">-1</span>] <span class=\"comment\"># 坐标的数字往后移</span></div><div class=\"line\">          j -= <span class=\"number\">1</span></div><div class=\"line\">      lista[j] = right_num</div><div class=\"line\">  <span class=\"keyword\">return</span> lista</div></pre></td></tr></table></figure>\n<h3 id=\"2-归并排序\"><a href=\"#2-归并排序\" class=\"headerlink\" title=\"2.归并排序\"></a>2.归并排序</h3><ul>\n<li>思路:<ol>\n<li>将数组划分为2个排好顺序的数组A和B</li>\n<li>每次从2个数组中抽出一个最小的放在另一个数组C中，直到A、B其中一个数组被取完，将A、B中未取完的数组放入C中</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_merge</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compare</span><span class=\"params\">(A, B)</span>:</span> <span class=\"comment\">#步骤2</span></div><div class=\"line\">        result = []</div><div class=\"line\">        i, j = <span class=\"number\">0</span>, <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(A) <span class=\"keyword\">and</span> j &lt; len(B):</div><div class=\"line\">            <span class=\"keyword\">if</span> A[i] &lt; B[j]:</div><div class=\"line\">                result.append(A[i])</div><div class=\"line\">                i += <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                result.append(B[j])</div><div class=\"line\">                j += <span class=\"number\">1</span></div><div class=\"line\">        result.extend(A[i:])</div><div class=\"line\">        result.extend(B[j:])</div><div class=\"line\">        <span class=\"keyword\">return</span> result</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(lista)</span>:</span> <span class=\"comment\">#步骤1，将数组分为2个数组A,B</span></div><div class=\"line\">        <span class=\"keyword\">if</span> len(lista) == <span class=\"number\">1</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> lista</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            mid = len(lista) // <span class=\"number\">2</span></div><div class=\"line\">            left = merge(lista[:mid])</div><div class=\"line\">            right = merge(lista[mid:])</div><div class=\"line\">            <span class=\"keyword\">return</span> compare(left, right)</div><div class=\"line\">    <span class=\"keyword\">return</span> merge(lista)</div></pre></td></tr></table></figure>\n<h3 id=\"3-冒泡排序\"><a href=\"#3-冒泡排序\" class=\"headerlink\" title=\"3.冒泡排序\"></a>3.冒泡排序</h3><ul>\n<li>思路: 从左往右，从第一个数字开始，左边一个与右边一个数字对比，如果左边比右边大，就交换顺序，然后再从第二个数字开始迭代</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_bubble</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">  length = len(lista)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(length<span class=\"number\">-1</span>):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> xrange(i, length<span class=\"number\">-1</span>):</div><div class=\"line\">      <span class=\"keyword\">if</span> lista[j] &gt; lista[j+<span class=\"number\">1</span>]: <span class=\"comment\">#如果左边大于右边，交换位置</span></div><div class=\"line\">        lista[j], lista[j+<span class=\"number\">1</span>] = lista[j+<span class=\"number\">1</span>], lista[j]</div><div class=\"line\">  <span class=\"keyword\">return</span> lista</div></pre></td></tr></table></figure>\n<h3 id=\"4-选择排序\"><a href=\"#4-选择排序\" class=\"headerlink\" title=\"4.选择排序\"></a>4.选择排序</h3><ul>\n<li>思路: 类似于冒泡排序，但是循环的时候是找出最小的数值，与循环的起始位置交换顺序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_selection</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">  length = len(lista)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(length - <span class=\"number\">1</span>):</div><div class=\"line\">    minum = i</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> xrange(i, length):</div><div class=\"line\">      <span class=\"keyword\">if</span> lista[j] &lt; lista[minum]:</div><div class=\"line\">        minum = j</div><div class=\"line\">    lista[i] = lista[minum]</div><div class=\"line\">  <span class=\"keyword\">return</span> lista</div></pre></td></tr></table></figure>\n<h3 id=\"5-堆排序\"><a href=\"#5-堆排序\" class=\"headerlink\" title=\"5.堆排序\"></a>5.堆排序</h3><ul>\n<li>思路:<br>  1.将数组看做一个最大二叉堆<br>  2.维护最大二叉堆的性质,父节点大于子节点<br>  3.然后从根节点取出元素放到后面，重新维护最大堆的性质<br>  4.重复3步骤，直到剩下最后1个元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_heap</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Father</span><span class=\"params\">(i)</span>:</span> <span class=\"comment\"># 父节点 i的一半向下取整 └ i/2 ┘</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (i+<span class=\"number\">1</span>)//<span class=\"number\">2</span> - <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Left</span><span class=\"params\">(i)</span>:</span> <span class=\"comment\"># 左孩子节点</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (i+<span class=\"number\">1</span>)*<span class=\"number\">2</span> - <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Right</span><span class=\"params\">(i)</span>:</span> <span class=\"comment\"># 右孩子节点</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (i+<span class=\"number\">1</span>)*<span class=\"number\">2</span> + <span class=\"number\">1</span> - <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_heapify</span><span class=\"params\">(A, i)</span>:</span> <span class=\"comment\"># 维护最大堆的性质</span></div><div class=\"line\">    <span class=\"keyword\">global</span> heap_size</div><div class=\"line\">    l = Left(i)</div><div class=\"line\">    r = Right(i)</div><div class=\"line\">    lastest = i</div><div class=\"line\">    <span class=\"keyword\">if</span> l &lt;= heap_size <span class=\"keyword\">and</span> l &gt; A[lastest]:</div><div class=\"line\">        lastest = l</div><div class=\"line\">    <span class=\"keyword\">if</span> r &lt;= heap_size <span class=\"keyword\">and</span> r &gt; A[lastest]:</div><div class=\"line\">        lastest = r  </div><div class=\"line\">    <span class=\"keyword\">if</span> lastest != i:</div><div class=\"line\">      A[i], A[lastest] = A[lastest], A[i]</div><div class=\"line\">      max_heapify(lastest)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_max_heap</span><span class=\"params\">(A)</span>:</span> <span class=\"comment\"># 生成最大堆</span></div><div class=\"line\">    <span class=\"keyword\">global</span> heap_size</div><div class=\"line\">    heap_size = len(A) - <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(len(A)//<span class=\"number\">2</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</div><div class=\"line\">        max_heapify(A, i)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heap_sort</span><span class=\"params\">(A)</span>:</span> <span class=\"comment\">#排序</span></div><div class=\"line\">    <span class=\"keyword\">global</span> heap_size</div><div class=\"line\">    build_max_heap(A)</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(len(A) - <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>):</div><div class=\"line\">        A[<span class=\"number\">0</span>], A[i] = A[i], A[<span class=\"number\">0</span>]</div><div class=\"line\">        max_heapify(A, <span class=\"number\">0</span>)</div><div class=\"line\">  heap_sort(lista)</div><div class=\"line\">  <span class=\"keyword\">return</span> lista</div></pre></td></tr></table></figure>\n<h3 id=\"6-快速排序\"><a href=\"#6-快速排序\" class=\"headerlink\" title=\"6.快速排序\"></a>6.快速排序</h3><ul>\n<li>思路:<br>  1.将数组的第一个数字定为基准数flag，将数组中比flag小的放置在flag左边，比flag大的放置在右边<br>  2.对flag左边的和右边的数组重复步骤1</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_fast</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub_flag</span><span class=\"params\">(array, start, end)</span>:</span> <span class=\"comment\"># 步骤1</span></div><div class=\"line\">        flag = array[start]<span class=\"comment\">#确定flag</span></div><div class=\"line\">        <span class=\"keyword\">while</span> start &gt; end:</div><div class=\"line\">            <span class=\"keyword\">while</span> (start &gt; end) <span class=\"keyword\">and</span> array[end] &gt; flag: <span class=\"comment\"># 比flag大</span></div><div class=\"line\">                end -= <span class=\"number\">1</span> <span class=\"comment\"># 数字位置不变，比较的位置左移一格</span></div><div class=\"line\">            <span class=\"keyword\">while</span> (start &gt; end) <span class=\"keyword\">and</span> array[end] &lt; flag: <span class=\"comment\"># 比flag小</span></div><div class=\"line\">                array[start] = array[end] <span class=\"comment\"># 移动到左边</span></div><div class=\"line\">                start += <span class=\"number\">1</span></div><div class=\"line\">                array[end] = array[start] <span class=\"comment\"># 将之前左边的数字右边一个未比较的数字移动到右边原来的位置</span></div><div class=\"line\">            array[start] = flag</div><div class=\"line\">        <span class=\"keyword\">return</span> start <span class=\"comment\"># 返回flag的位置</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick</span><span class=\"params\">(array, start, end)</span>:</span> <span class=\"comment\"># 步骤2</span></div><div class=\"line\">        <span class=\"keyword\">if</span> start &gt; end:</div><div class=\"line\">            flag_index = sub_flag(array, start, end)</div><div class=\"line\">            quick(array, start, flag_index)</div><div class=\"line\">            quick(array, flag_index + <span class=\"number\">1</span>, end)</div><div class=\"line\">    quick(lista, <span class=\"number\">0</span>, len(lista))</div><div class=\"line\">    <span class=\"keyword\">return</span> lista</div></pre></td></tr></table></figure>\n<h3 id=\"7-计数排序\"><a href=\"#7-计数排序\" class=\"headerlink\" title=\"7.计数排序\"></a>7.计数排序</h3><ul>\n<li>思路:<br>  1.假设输入数组A[0,n], 其中最大值是max(A),假设 k &gt;= max(A)<br>  2.将B[0,k]每一位赋予初始值0，然后与A中元素i比较，将B[i] = B[i] + 1<br>  3.数组B[0,k] 中的数值B[i] 就表示 A中元素i的数量<br>  4.B[i] = B[i] + B[i-1],B中元素B[i]就代表比i小的元素的数量</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_count</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">  k = max(lista) + <span class=\"number\">1</span></div><div class=\"line\">  length = len(lista)</div><div class=\"line\">  B = [<span class=\"number\">0</span>] * k <span class=\"comment\"># 临时存储</span></div><div class=\"line\">  C = [<span class=\"number\">0</span>] * length <span class=\"comment\"># 输出</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> lista:</div><div class=\"line\">      B[i] = B[i] + <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, k):</div><div class=\"line\">      B[i] = B[i] + B[i<span class=\"number\">-1</span>]</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(length - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</div><div class=\"line\">      C[B[lista[i]] = lista[i]</div><div class=\"line\">      B[lista[i]] = B[lista[i]] - <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">return</span> C</div></pre></td></tr></table></figure>\n<h3 id=\"8-基数排序\"><a href=\"#8-基数排序\" class=\"headerlink\" title=\"8.基数排序\"></a>8.基数排序</h3><ul>\n<li>思路:<br>  1.<pre><code class=\"python\">\n</code></pre>\n</li>\n</ul>\n","excerpt":"","more":"<table>\n<thead>\n<tr>\n<th></th>\n<th>算法</th>\n<th>最坏情况运行时间</th>\n<th>平均/期望运行时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>插入排序</td>\n<td>Θ(n**2)</td>\n<td>Θ(n**2)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>归并排序</td>\n<td>Θ(nlgn)</td>\n<td>Θ(nlgn)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>冒泡排序</td>\n<td>Θ(n**2)</td>\n<td>Θ(n**2)</td>\n</tr>\n<tr>\n<td>4</td>\n<td>选择排序</td>\n<td>Θ(n**2)</td>\n<td>Θ(n**2)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>堆排序</td>\n<td>Θ(nlgn)</td>\n<td></td>\n</tr>\n<tr>\n<td>6</td>\n<td>快速排序</td>\n<td>Θ(n**2)</td>\n<td>Θ(nlgn)</td>\n</tr>\n<tr>\n<td>7</td>\n<td>计数排序</td>\n<td>Θ(n + k)</td>\n<td>Θ(n + k)  </td>\n</tr>\n<tr>\n<td>8</td>\n<td>基数排序</td>\n<td>Θ(d(n + k))</td>\n<td>Θ(d(n + k))</td>\n</tr>\n<tr>\n<td>9</td>\n<td>桶排序</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-插入排序\"><a href=\"#1-插入排序\" class=\"headerlink\" title=\"1.插入排序\"></a>1.插入排序</h3><ul>\n<li>思路：类似于抽牌的过程，右手一张张地抽牌，每次右手抽的牌对比左手中已经排序好的牌，放在左手相应的位置中<br><img src=\"/2017/03/02/算法导论-第二章-算法基础/pic1.png\" alt=\"example1\"></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_insert</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, len(lista)): <span class=\"comment\"># 右手抽的牌</span></div><div class=\"line\">      right_num = lista[i]</div><div class=\"line\">      j = i <span class=\"comment\">#左手边起始对比的位置</span></div><div class=\"line\">      <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (lista[j<span class=\"number\">-1</span>] &gt; right_num): <span class=\"comment\"># 左边比较大的时候</span></div><div class=\"line\">          lista[j] = lista[j<span class=\"number\">-1</span>] <span class=\"comment\"># 坐标的数字往后移</span></div><div class=\"line\">          j -= <span class=\"number\">1</span></div><div class=\"line\">      lista[j] = right_num</div><div class=\"line\">  <span class=\"keyword\">return</span> lista</div></pre></td></tr></table></figure>\n<h3 id=\"2-归并排序\"><a href=\"#2-归并排序\" class=\"headerlink\" title=\"2.归并排序\"></a>2.归并排序</h3><ul>\n<li>思路:<ol>\n<li>将数组划分为2个排好顺序的数组A和B</li>\n<li>每次从2个数组中抽出一个最小的放在另一个数组C中，直到A、B其中一个数组被取完，将A、B中未取完的数组放入C中</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_merge</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compare</span><span class=\"params\">(A, B)</span>:</span> <span class=\"comment\">#步骤2</span></div><div class=\"line\">        result = []</div><div class=\"line\">        i, j = <span class=\"number\">0</span>, <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(A) <span class=\"keyword\">and</span> j &lt; len(B):</div><div class=\"line\">            <span class=\"keyword\">if</span> A[i] &lt; B[j]:</div><div class=\"line\">                result.append(A[i])</div><div class=\"line\">                i += <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                result.append(B[j])</div><div class=\"line\">                j += <span class=\"number\">1</span></div><div class=\"line\">        result.extend(A[i:])</div><div class=\"line\">        result.extend(B[j:])</div><div class=\"line\">        <span class=\"keyword\">return</span> result</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span><span class=\"params\">(lista)</span>:</span> <span class=\"comment\">#步骤1，将数组分为2个数组A,B</span></div><div class=\"line\">        <span class=\"keyword\">if</span> len(lista) == <span class=\"number\">1</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> lista</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            mid = len(lista) // <span class=\"number\">2</span></div><div class=\"line\">            left = merge(lista[:mid])</div><div class=\"line\">            right = merge(lista[mid:])</div><div class=\"line\">            <span class=\"keyword\">return</span> compare(left, right)</div><div class=\"line\">    <span class=\"keyword\">return</span> merge(lista)</div></pre></td></tr></table></figure>\n<h3 id=\"3-冒泡排序\"><a href=\"#3-冒泡排序\" class=\"headerlink\" title=\"3.冒泡排序\"></a>3.冒泡排序</h3><ul>\n<li>思路: 从左往右，从第一个数字开始，左边一个与右边一个数字对比，如果左边比右边大，就交换顺序，然后再从第二个数字开始迭代</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_bubble</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">  length = len(lista)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(length<span class=\"number\">-1</span>):</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> xrange(i, length<span class=\"number\">-1</span>):</div><div class=\"line\">      <span class=\"keyword\">if</span> lista[j] &gt; lista[j+<span class=\"number\">1</span>]: <span class=\"comment\">#如果左边大于右边，交换位置</span></div><div class=\"line\">        lista[j], lista[j+<span class=\"number\">1</span>] = lista[j+<span class=\"number\">1</span>], lista[j]</div><div class=\"line\">  <span class=\"keyword\">return</span> lista</div></pre></td></tr></table></figure>\n<h3 id=\"4-选择排序\"><a href=\"#4-选择排序\" class=\"headerlink\" title=\"4.选择排序\"></a>4.选择排序</h3><ul>\n<li>思路: 类似于冒泡排序，但是循环的时候是找出最小的数值，与循环的起始位置交换顺序</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_selection</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">  length = len(lista)</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(length - <span class=\"number\">1</span>):</div><div class=\"line\">    minum = i</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> xrange(i, length):</div><div class=\"line\">      <span class=\"keyword\">if</span> lista[j] &lt; lista[minum]:</div><div class=\"line\">        minum = j</div><div class=\"line\">    lista[i] = lista[minum]</div><div class=\"line\">  <span class=\"keyword\">return</span> lista</div></pre></td></tr></table></figure>\n<h3 id=\"5-堆排序\"><a href=\"#5-堆排序\" class=\"headerlink\" title=\"5.堆排序\"></a>5.堆排序</h3><ul>\n<li>思路:<br>  1.将数组看做一个最大二叉堆<br>  2.维护最大二叉堆的性质,父节点大于子节点<br>  3.然后从根节点取出元素放到后面，重新维护最大堆的性质<br>  4.重复3步骤，直到剩下最后1个元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_heap</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Father</span><span class=\"params\">(i)</span>:</span> <span class=\"comment\"># 父节点 i的一半向下取整 └ i/2 ┘</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (i+<span class=\"number\">1</span>)//<span class=\"number\">2</span> - <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Left</span><span class=\"params\">(i)</span>:</span> <span class=\"comment\"># 左孩子节点</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (i+<span class=\"number\">1</span>)*<span class=\"number\">2</span> - <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Right</span><span class=\"params\">(i)</span>:</span> <span class=\"comment\"># 右孩子节点</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (i+<span class=\"number\">1</span>)*<span class=\"number\">2</span> + <span class=\"number\">1</span> - <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_heapify</span><span class=\"params\">(A, i)</span>:</span> <span class=\"comment\"># 维护最大堆的性质</span></div><div class=\"line\">    <span class=\"keyword\">global</span> heap_size</div><div class=\"line\">    l = Left(i)</div><div class=\"line\">    r = Right(i)</div><div class=\"line\">    lastest = i</div><div class=\"line\">    <span class=\"keyword\">if</span> l &lt;= heap_size <span class=\"keyword\">and</span> l &gt; A[lastest]:</div><div class=\"line\">        lastest = l</div><div class=\"line\">    <span class=\"keyword\">if</span> r &lt;= heap_size <span class=\"keyword\">and</span> r &gt; A[lastest]:</div><div class=\"line\">        lastest = r  </div><div class=\"line\">    <span class=\"keyword\">if</span> lastest != i:</div><div class=\"line\">      A[i], A[lastest] = A[lastest], A[i]</div><div class=\"line\">      max_heapify(lastest)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_max_heap</span><span class=\"params\">(A)</span>:</span> <span class=\"comment\"># 生成最大堆</span></div><div class=\"line\">    <span class=\"keyword\">global</span> heap_size</div><div class=\"line\">    heap_size = len(A) - <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(len(A)//<span class=\"number\">2</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</div><div class=\"line\">        max_heapify(A, i)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heap_sort</span><span class=\"params\">(A)</span>:</span> <span class=\"comment\">#排序</span></div><div class=\"line\">    <span class=\"keyword\">global</span> heap_size</div><div class=\"line\">    build_max_heap(A)</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(len(A) - <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>):</div><div class=\"line\">        A[<span class=\"number\">0</span>], A[i] = A[i], A[<span class=\"number\">0</span>]</div><div class=\"line\">        max_heapify(A, <span class=\"number\">0</span>)</div><div class=\"line\">  heap_sort(lista)</div><div class=\"line\">  <span class=\"keyword\">return</span> lista</div></pre></td></tr></table></figure>\n<h3 id=\"6-快速排序\"><a href=\"#6-快速排序\" class=\"headerlink\" title=\"6.快速排序\"></a>6.快速排序</h3><ul>\n<li>思路:<br>  1.将数组的第一个数字定为基准数flag，将数组中比flag小的放置在flag左边，比flag大的放置在右边<br>  2.对flag左边的和右边的数组重复步骤1</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_fast</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub_flag</span><span class=\"params\">(array, start, end)</span>:</span> <span class=\"comment\"># 步骤1</span></div><div class=\"line\">        flag = array[start]<span class=\"comment\">#确定flag</span></div><div class=\"line\">        <span class=\"keyword\">while</span> start &gt; end:</div><div class=\"line\">            <span class=\"keyword\">while</span> (start &gt; end) <span class=\"keyword\">and</span> array[end] &gt; flag: <span class=\"comment\"># 比flag大</span></div><div class=\"line\">                end -= <span class=\"number\">1</span> <span class=\"comment\"># 数字位置不变，比较的位置左移一格</span></div><div class=\"line\">            <span class=\"keyword\">while</span> (start &gt; end) <span class=\"keyword\">and</span> array[end] &lt; flag: <span class=\"comment\"># 比flag小</span></div><div class=\"line\">                array[start] = array[end] <span class=\"comment\"># 移动到左边</span></div><div class=\"line\">                start += <span class=\"number\">1</span></div><div class=\"line\">                array[end] = array[start] <span class=\"comment\"># 将之前左边的数字右边一个未比较的数字移动到右边原来的位置</span></div><div class=\"line\">            array[start] = flag</div><div class=\"line\">        <span class=\"keyword\">return</span> start <span class=\"comment\"># 返回flag的位置</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick</span><span class=\"params\">(array, start, end)</span>:</span> <span class=\"comment\"># 步骤2</span></div><div class=\"line\">        <span class=\"keyword\">if</span> start &gt; end:</div><div class=\"line\">            flag_index = sub_flag(array, start, end)</div><div class=\"line\">            quick(array, start, flag_index)</div><div class=\"line\">            quick(array, flag_index + <span class=\"number\">1</span>, end)</div><div class=\"line\">    quick(lista, <span class=\"number\">0</span>, len(lista))</div><div class=\"line\">    <span class=\"keyword\">return</span> lista</div></pre></td></tr></table></figure>\n<h3 id=\"7-计数排序\"><a href=\"#7-计数排序\" class=\"headerlink\" title=\"7.计数排序\"></a>7.计数排序</h3><ul>\n<li>思路:<br>  1.假设输入数组A[0,n], 其中最大值是max(A),假设 k &gt;= max(A)<br>  2.将B[0,k]每一位赋予初始值0，然后与A中元素i比较，将B[i] = B[i] + 1<br>  3.数组B[0,k] 中的数值B[i] 就表示 A中元素i的数量<br>  4.B[i] = B[i] + B[i-1],B中元素B[i]就代表比i小的元素的数量</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sort_count</span><span class=\"params\">(lista)</span>:</span></div><div class=\"line\">  k = max(lista) + <span class=\"number\">1</span></div><div class=\"line\">  length = len(lista)</div><div class=\"line\">  B = [<span class=\"number\">0</span>] * k <span class=\"comment\"># 临时存储</span></div><div class=\"line\">  C = [<span class=\"number\">0</span>] * length <span class=\"comment\"># 输出</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> lista:</div><div class=\"line\">      B[i] = B[i] + <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, k):</div><div class=\"line\">      B[i] = B[i] + B[i<span class=\"number\">-1</span>]</div><div class=\"line\">  <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(length - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</div><div class=\"line\">      C[B[lista[i]] = lista[i]</div><div class=\"line\">      B[lista[i]] = B[lista[i]] - <span class=\"number\">1</span></div><div class=\"line\">  <span class=\"keyword\">return</span> C</div></pre></td></tr></table></figure>\n<h3 id=\"8-基数排序\"><a href=\"#8-基数排序\" class=\"headerlink\" title=\"8.基数排序\"></a>8.基数排序</h3><ul>\n<li>思路:<br>  1.<pre><code class=\"python\">\n</code></pre>\n</li>\n</ul>\n"},{"title":"awesome-python","date":"2017-02-22T06:26:00.000Z","author":"月牙天冲","_content":"\n# 写在最前\n\n这是一个笔记，方便自己查询，详情请看原出处[awesome-python-cn](https://github.com/jobbole/awesome-python-cn)\n\n* * *\n\n# Python 资源大全中文版\n\n我想很多程序员应该记得 GitHub 上有一个 Awesome - XXX 系列的资源整理。[awesome-python](https://github.com/vinta/awesome-python) 是 vinta 发起维护的 Python 资源列表，内容包括：Web框架、网络爬虫、网络内容提取、模板引擎、数据库、数据可视化、图片处理、文本处理、自然语言处理、机器学习、日志、代码分析等。由伯乐在线持续更新。\n\nAwesome 系列虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。\n\n* * *\n\n### 我们要做什么？\n\n- 基于 awesome-python 列表，我们将对其中的各个资源项进行编译整理。此外还将从其他来源补充好资源。\n- 整理后的内容，将收录在[伯乐在线资源频道](http://hao.jobbole.com/)。可参考已整理的内容：\n  - 《[Scrapy：Python的爬虫框架](http://hao.jobbole.com/python-scrapy/)》\n  - 《[Flask：一个使用Python编写的轻量级Web应用框架](http://hao.jobbole.com/flask/)》\n\n* * *\n\n### 环境管理\n\n管理 Python 版本和环境的工具\n\n*   p：非常简单的交互式 python 版本管理工具。[官网](https://github.com/qw3rtman/p)\n*   pyenv：简单的 Python 版本管理工具。[官网](https://github.com/yyuu/pyenv)\n*   Vex：可以在虚拟环境中执行命令。[官网](https://github.com/sashahart/vex)\n*   virtualenv：创建独立 Python 环境的工具。[官网](https://pypi.python.org/pypi/virtualenv)\n*   virtualenvwrapper：virtualenv 的一组扩展。[官网](https://pypi.python.org/pypi/virtualenvwrapper)\n\n### 包管理\n\n管理包和依赖的工具。\n\n*   pip：Python 包和依赖关系管理工具。[官网](https://pip.pypa.io/)\n*   pip-tools：保证 Python 包依赖关系更新的一组工具。[官网](https://github.com/nvie/pip-tools)\n*   conda：跨平台，Python 二进制包管理工具。[官网](https://github.com/conda/conda/)\n*   Curdling：管理 Python 包的命令行工具。[官网](http://clarete.li/curdling/)\n*   wheel：Python 分发的新标准，意在取代 eggs。[官网](http://pythonwheels.com/)\n\n### 包仓库\n\n本地 PyPI 仓库服务和代理。\n\n*   warehouse：下一代 PyPI。[官网](https://github.com/pypa/warehouse)\n    *   Warehouse：PyPA 提供的 PyPI 镜像工具。[官网](https://warehouse.python.org/) [bandersnatch](https://bitbucket.org/pypa/bandersnatch)\n*   devpi：PyPI 服务和打包/测试/分发工具。[官网](http://doc.devpi.net/)\n*   localshop：本地 PyPI 服务（自定义包并且自动对 PyPI 镜像）。[官网](https://github.com/mvantellingen/localshop)\n\n### 分发\n\n打包为可执行文件以便分发。\n\n*   PyInstaller：将 Python 程序转换成独立的执行文件（跨平台）。[官网](https://github.com/pyinstaller/pyinstaller)\n*   dh-virtualenv：构建并将 virtualenv 虚拟环境作为一个 Debian 包来发布。[官网](http://dh-virtualenv.readthedocs.org/)\n*   Nuitka：将脚本、模块、包编译成可执行文件或扩展模块。[官网](http://nuitka.net/)\n*   py2app：将 Python 脚本变为独立软件包（Mac OS X）。[官网](http://pythonhosted.org/py2app/)\n*   py2exe：将 Python 脚本变为独立软件包（Windows）。[官网](http://www.py2exe.org/)\n*   pynsist：一个用来创建 Windows 安装程序的工具，可以在安装程序中打包 Python本身。[官网](http://pynsist.readthedocs.org/)\n\n### 构建工具\n\n将源码编译成软件。\n\n*   buildout：一个构建系统，从多个组件来创建，组装和部署应用。[官网](http://www.buildout.org/)\n*   BitBake：针对嵌入式 Linux 的类似 make 的构建工具。[官网](http://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html)\n*   fabricate：对任何语言自动找到依赖关系的构建工具。[官网](https://code.google.com/archive/p/fabricate)\n*   PlatformIO：多平台命令行构建工具。[官网](https://github.com/platformio/platformio)\n*   PyBuilder：纯 Python 实现的持续化构建工具。[官网](https://github.com/pybuilder/pybuilder)\n*   SCons：软件构建工具。[官网](http://www.scons.org/)\n\n### 交互式解析器\n\n交互式 Python 解析器。\n\n*   IPython：功能丰富的工具，非常有效的使用交互式 Python。[官网](https://github.com/ipython/ipython)\n*   [bpython](http://hao.jobbole.com/bpython/)：界面丰富的 Python 解析器。[官网](http://bpython-interpreter.org/)\n*   ptpython：高级交互式Python解析器， 构建于[python-prompt-toolkit](https://github.com/jonathanslenders/python-prompt-toolkit) 之上。[官网](https://github.com/jonathanslenders/ptpython)\n\n### 文件\n\n文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。\n\n*   imghdr：（Python 标准库）检测图片类型。[官网](https://docs.python.org/2/library/imghdr.html)\n*   mimetypes：（Python 标准库）将文件名映射为 MIME 类型。[官网](https://docs.python.org/2/library/mimetypes.html)\n*   path.py：对 os.path 进行封装的模块。[官网](https://github.com/jaraco/path.py)\n*   pathlib：（Python3.4+ 标准库）跨平台的、面向对象的路径操作库。[官网](https://pathlib.readthedocs.org/en/pep428/)\n*   python-magic：文件类型检测的第三方库 libmagic 的 Python 接口。[官网](https://github.com/ahupp/python-magic)\n*   Unipath：用面向对象的方式操作文件和目录。[官网](https://github.com/mikeorr/Unipath)\n*   watchdog：管理文件系统事件的 API 和 shell 工具[官网](https://github.com/gorakhargosh/watchdog)\n\n### 日期和时间\n\n操作日期和时间的类库。\n\n*   arrow：更好的 Python 日期时间操作类库。[官网](https://github.com/crsmithdev/arrow)\n*   Chronyk：Python 3 的类库，用于解析手写格式的时间和日期。[官网](https://github.com/KoffeinFlummi/Chronyk)\n*   dateutil：Python datetime 模块的扩展。[官网](https://pypi.python.org/pypi/python-dateutil)\n*   delorean：解决 Python 中有关日期处理的棘手问题的库。[官网](https://github.com/myusuf3/delorean/)\n*   moment：一个用来处理时间和日期的Python库。灵感来自于Moment.js。[官网](https://github.com/zachwill/moment)\n*   PyTime：一个简单易用的Python模块，用于通过字符串来操作日期/时间。[官网](https://github.com/shinux/PyTime)\n*   pytz：现代以及历史版本的世界时区定义。将时区数据库引入Python。[官网](https://launchpad.net/pytz)\n*   when.py：提供用户友好的函数来帮助用户进行常用的日期和时间操作。[官网](https://github.com/dirn/When.py)\n\n### 文本处理\n\n用于解析和操作文本的库。\n\n*   通用\n    *   [chardet](http://hao.jobbole.com/chardet/)：字符编码检测器，兼容 Python2 和 Python3。[官网](https://github.com/chardet/chardet)\n    *   difflib：(Python 标准库)帮助我们进行差异化比较。[官网](https://docs.python.org/2/library/difflib.html)\n    *   ftfy：让Unicode文本更完整更连贯。[官网](https://github.com/LuminosoInsight/python-ftfy)\n    *   fuzzywuzzy：模糊字符串匹配。[官网](https://github.com/seatgeek/fuzzywuzzy)\n    *   Levenshtein：快速计算编辑距离以及字符串的相似度。[官网](https://github.com/ztane/python-Levenshtein/)\n    *   pangu.py：在中日韩语字符和数字字母之间添加空格。[官网](https://github.com/vinta/pangu.py)\n    *   yfiglet-figlet：[pyfiglet -figlet](https://github.com/pwaller/pyfiglet) 的 Python实现。\n    *   shortuuid：一个生成器库，用以生成简洁的，明白的，URL 安全的 UUID。[官网](https://github.com/stochastic-technologies/shortuuid)\n    *   unidecode：Unicode 文本的 ASCII 转换形式 。[官网](https://pypi.python.org/pypi/Unidecode)\n    *   uniout：打印可读的字符，而不是转义的字符串。[官网](https://github.com/moskytw/uniout)\n    *   xpinyin：一个用于把汉字转换为拼音的库。[官网](https://github.com/lxneng/xpinyin)\n    *   simplejson：Python的JSON编码、解码器。[官网](https://simplejson.readthedocs.io/en/latest/)、[GitHub](https://github.com/simplejson/simplejson)\n*   Slug化\n    *   awesome-slugify：一个 Python slug 化库，可以保持 Unicode。[官网](https://github.com/dimka665/awesome-slugify)\n    *   python-slugify：Python slug 化库，可以把 unicode 转化为 ASCII。[官网](https://github.com/un33k/python-slugify)\n    *   unicode-slugify：一个 slug 工具，可以生成 unicode slugs ,需要依赖 Django 。[官网](https://github.com/mozilla/unicode-slugify)\n*   解析器\n    *   phonenumbers：解析，格式化，储存，验证电话号码。[官网](https://github.com/daviddrysdale/python-phonenumbers)\n    *   PLY：lex 和 yacc 解析工具的 Python 实现。[官网](http://www.dabeaz.com/ply/)\n    *   Pygments：通用语法高亮工具。[官网](http://pygments.org/)\n    *   pyparsing：生成通用解析器的框架。[官网](http://pyparsing.wikispaces.com/)\n    *   python-nameparser：把一个人名分解为几个独立的部分。[官网](https://github.com/derek73/python-nameparser)\n    *   python-user-agents：浏览器 user agent 解析器。[官网](https://github.com/selwin/python-user-agents)\n    *   sqlparse：一个无验证的 SQL 解析器。[官网](https://sqlparse.readthedocs.org/en/latest/)\n\n### 特殊文本格式处理\n\n一些用来解析和操作特殊文本格式的库。\n\n*   通用\n    *   tablib：一个用来处理中表格数据的模块。[官网](https://github.com/kennethreitz/tablib)\n*   Office\n    *   Marmir：把输入的Python 数据结构转换为电子表单。[官网](https://github.com/brianray/mm)\n    *   openpyxl：一个用来读写 Excel 2010 xlsx/xlsm/xltx/xltm 文件的库。[官网](https://openpyxl.readthedocs.org/en/latest/)\n    *   python-docx：读取，查询以及修改 Microsoft Word 2007/2008 docx 文件。[官网](https://github.com/python-openxml/python-docx)\n    *   unoconv：在 LibreOffice/OpenOffice 支持的任意文件格式之间进行转换。[官网](https://github.com/dagwieers/unoconv)\n    *   XlsxWriter：一个用于创建 Excel .xlsx 文件的 Python 模块。[官网](https://xlsxwriter.readthedocs.org/en/latest/)\n    *   xlwings：一个使得在 Excel 中方便调用 Python 的库（反之亦然），基于 BSD 协议。[官网](http://xlwings.org/)\n    *   [xlwt](http://hao.jobbole.com/xlwt/)：读写 Excel 文件的数据和格式信息。[官网](https://github.com/python-excel/xlwt) / [xlrd](https://github.com/python-excel/xlrd)\n    *   relatorio：模板化OpenDocument 文件。[官网](http://relatorio.tryton.org/)\n*   PDF\n    *   PDFMiner：一个用于从PDF文档中抽取信息的工具。[官网](https://github.com/euske/pdfminer)\n    *   PyPDF2：一个可以分割，合并和转换 PDF 页面的库。[官网](https://github.com/mstamy2/PyPDF2)\n    *   ReportLab：快速创建富文本 PDF 文档。[官网](http://www.reportlab.com/opensource/)\n*   Markdown\n    *   Mistune：快速并且功能齐全的纯 Python 实现的 Markdown 解析器。[官网](https://github.com/lepture/mistune)\n    *   Python-Markdown：John Gruber’s Markdown 的 Python 版实现。[官网](https://github.com/waylan/Python-Markdown)\n    *   Python-Markdiwn2：纯 Python 实现的 Markdown 解析器，比 Python-Markdown 更快，更准确，可扩展。[官网](https://github.com/trentm/python-markdown2)\n*   YAML\n    *   PyYAML：Python 版本的 YAML 解析器。[官网](http://pyyaml.org/)\n*   CSV\n    *   csvkit：用于转换和操作 CSV 的工具。[官网](https://github.com/wireservice/csvkit)\n*   Archive\n    *   unp：一个用来方便解包归档文件的命令行工具。[官网](https://github.com/mitsuhiko/unp)\n\n### 自然语言处理\n\n用来处理人类语言的库。\n\n*   [NLTK](http://hao.jobbole.com/nltk/)：一个先进的平台，用以构建处理人类语言数据的 Python 程序。[官网](http://www.nltk.org/)\n*   jieba：中文分词工具。[官网](https://github.com/fxsjy/jieba)\n*   langid.py：独立的语言识别系统。[官网](https://github.com/saffsd/langid.py)\n*   Pattern：Python 网络信息挖掘模块。[官网](http://www.clips.ua.ac.be/pattern)\n*   SnowNLP：一个用来处理中文文本的库。[官网](https://github.com/isnowfy/snownlp)\n*   TextBlob：为进行普通自然语言处理任务提供一致的 API。[官网](http://textblob.readthedocs.org/en/latest/)\n*   TextGrocery：一简单高效的短文本分类工具，基于 LibLinear 和 Jieba。[官网](https://github.com/2shou/TextGrocery)\n\n### 文档\n\n用以生成项目文档的库。\n\n*   [Sphinx](http://hao.jobbole.com/sphinx/)：Python 文档生成器。[官网](http://www.sphinx-doc.org/en/latest/)\n    *   awesome-sphinxdoc：[官网](https://github.com/yoloseem/awesome-sphinxdoc)\n*   MkDocs：对 Markdown 友好的文档生成器。[官网](http://www.mkdocs.org/)\n*   pdoc：一个可以替换Epydoc 的库，可以自动生成 Python 库的 API 文档。[官网](https://github.com/BurntSushi/pdoc)\n*   Pycco：文学编程（literate-programming）风格的文档生成器。[官网](https://github.com/pycco-docs/pycco)\n\n### 配置\n\n用来保存和解析配置的库。\n\n*   config：[logging](https://docs.python.org/2/library/logging.html) 模块作者写的分级配置模块。[官网](https://www.red-dove.com/config-doc/)\n*   ConfigObj：INI 文件解析器，带验证功能。[官网](http://www.voidspace.org.uk/python/configobj.html)\n*   ConfigParser：(Python 标准库) INI 文件解析器。[官网](https://docs.python.org/2/library/configparser.html)\n*   profig：通过多种格式进行配置，具有数值转换功能。[官网](http://profig.readthedocs.org/en/default/)\n*   python-decouple：将设置和代码完全隔离。[官网](https://github.com/henriquebastos/python-decouple)\n\n### 命令行工具\n\n用于创建命令行程序的库。\n\n*   命令行程序开发\n    *   asciimatics：跨平台，全屏终端包（即鼠标/键盘输入和彩色，定位文本输出），完整的复杂动画和特殊效果的高级API。[官网](https://github.com/peterbrittain/asciimatics)\n    *   cement：Python 的命令行程序框架。[官网](http://builtoncement.com/)\n    *   click：一个通过组合的方式来创建精美命令行界面的包。[官网](http://click.pocoo.org/dev/)\n    *   cliff：一个用于创建命令行程序的框架，可以创建具有多层命令的命令行程序。[官网](http://docs.openstack.org/developer/cliff/)\n    *   clint：Python 命令行程序工具。[官网](https://github.com/kennethreitz/clint)\n    *   colorama：跨平台彩色终端文本。[官网](https://pypi.python.org/pypi/colorama)\n    *   docopt：Python 风格的命令行参数解析器。[官网](http://docopt.org/)\n    *   Gooey：一条命令，将命令行程序变成一个 GUI 程序。[官网](https://github.com/chriskiehl/Gooey)\n    *   python-prompt-toolkit：一个用于构建强大的交互式命令行程序的库。[官网](https://github.com/jonathanslenders/python-prompt-toolkit)\n    *   [Pythonpy](http://hao.jobbole.com/pythonpy/)：在命令行中直接执行任何Python指令。[官网](https://github.com/Russell91/pythonpy/wiki)\n*   生产力工具\n    *   aws-cli：Amazon Web Services 的通用命令行界面。[官网](https://github.com/aws/aws-cli)\n    *   bashplotlib：在终端中进行基本绘图。[官网](https://github.com/glamp/bashplotlib)\n    *   caniusepython3：判断是哪个项目妨碍你你移植到 Python 3。[官网](https://github.com/brettcannon/caniusepython3)\n    *   cookiecutter：从 cookiecutters（项目模板）创建项目的一个命令行工具。[官网](https://github.com/audreyr/cookiecutter)\n    *   doitlive：一个用来在终端中进行现场演示的工具。[官网](https://github.com/sloria/doitlive)\n    *   howdoi：通过命令行获取即时的编程问题解答。[官网](https://github.com/gleitz/howdoi)\n    *   httpie：一个命令行HTTP 客户端，cURL 的替代品，易用性更好。[官网](https://github.com/jkbrzt/httpie)\n    *   PathPicker：从bash输出中选出文件。[官网](https://github.com/facebook/PathPicker)\n    *   percol：向UNIX shell 传统管道概念中加入交互式选择功能。[官网](https://github.com/mooz/percol)\n    *   SAWS：一个加强版的 AWS 命令行。[官网](https://github.com/donnemartin/saws)\n    *   thefuck：修正你之前的命令行指令。[官网](https://github.com/nvbn/thefuck)\n    *   mycli：一个 MySQL 命令行客户端，具有自动补全和语法高亮功能。[官网](https://github.com/dbcli/mycli)\n    *   pgcli：Postgres 命令行工具，具有自动补全和语法高亮功能。[官网](https://github.com/dbcli/pgcli)\n    *   try：一个从来没有更简单的命令行工具，用来试用python库。[官网](https://github.com/timofurrer/try)\n\n### 下载器\n\n用来进行下载的库.\n\n*   s3cmd：一个用来管理Amazon S3 和 CloudFront 的命令行工具。[官网](https://github.com/s3tools/s3cmd)\n*   s4cmd：超级 S3 命令行工具，性能更加强劲。[官网](https://github.com/bloomreach/s4cmd)\n*   you-get：一个 YouTube/Youku/Niconico 视频下载器，使用 Python3 编写。[官网](https://www.soimort.org/you-get/)\n*   youtube-dl：一个小巧的命令行程序，用来下载 YouTube 视频。[官网](http://rg3.github.io/youtube-dl/)\n\n### 图像处理\n\n用来操作图像的库.\n\n*   [pillow](http://hao.jobbole.com/pillow/)：Pillow 是一个更加易用版的 [PIL](http://www.pythonware.com/products/pil/)。[官网](http://pillow.readthedocs.org/en/latest/)\n*   hmap：图像直方图映射。[官网](https://github.com/rossgoodwin/hmap)\n*   imgSeek：一个使用视觉相似性搜索一组图片集合的项目。[官网](https://sourceforge.net/projects/imgseek/)\n*   nude.py：裸体检测。[官网](https://github.com/hhatto/nude.py)\n*   pyBarcode：不借助 PIL 库在 Python 程序中生成条形码。[官网](https://pythonhosted.org/pyBarcode/)\n*   pygram：类似 Instagram 的图像滤镜。[官网](https://github.com/ajkumar25/pygram)\n*   python-qrcode：一个纯 Python 实现的二维码生成器。[官网](https://github.com/lincolnloop/python-qrcode)\n*   Quads：基于四叉树的计算机艺术。[官网](https://github.com/fogleman/Quads)\n*   scikit-image：一个用于（科学）图像处理的 Python 库。[官网](http://scikit-image.org/)\n*   thumbor：一个小型图像服务，具有剪裁，尺寸重设和翻转功能。[官网](https://github.com/thumbor/thumbor)\n*   wand：[MagickWand](http://www.imagemagick.org/script/magick-wand.php)的Python 绑定。MagickWand 是 ImageMagick的 C API 。[官网](https://github.com/dahlia/wand)\n\n### OCR\n\n光学字符识别库。\n\n*   pyocr：Tesseract 和 Cuneiform 的一个封装(wrapper)。[官网](https://github.com/jflesch/pyocr)\n*   [pytesseract](http://hao.jobbole.com/pytesseract/)：[Google Tesseract OCR](https://github.com/tesseract-ocr) 的另一个封装(wrapper)。[官网](https://github.com/madmaze/pytesseract)\n*   python-tesseract - [Google Tesseract OCR](https://github.com/tesseract-ocr) 的一个包装类。\n\n### 音频\n\n用来操作音频的库\n\n*   audiolazy：Python 的数字信号处理包。[官网](https://github.com/danilobellini/audiolazy)\n*   audioread：交叉库 (GStreamer + Core Audio + MAD + FFmpeg) 音频解码。[官网](https://github.com/beetbox/audioread)\n*   beets：一个音乐库管理工具及 [MusicBrainz](https://musicbrainz.org/) 标签添加工具[官网](http://beets.io/)\n*   dejavu：音频指纹提取和识别[官网](https://github.com/worldveil/dejavu)\n*   [django-elastic-transcoder](http://hao.jobbole.com/django-elastic-transcoder/)：Django + [Amazon Elastic Transcoder](http://aws.amazon.com/elastictranscoder/)。[官网](https://github.com/StreetVoice/django-elastic-transcoder)\n*   eyeD3：一个用来操作音频文件的工具，具体来讲就是包含 ID3 元信息的 MP3 文件。[官网](http://eyed3.nicfit.net/)\n*   id3reader：一个用来读取 MP3 元数据的 Python 模块。[官网](http://nedbatchelder.com/code/modules/id3reader.py)\n*   m3u8：一个用来解析 m3u8 文件的模块。[官网](https://github.com/globocom/m3u8)\n*   mutagen：一个用来处理音频元数据的 Python 模块。[官网](https://bitbucket.org/lazka/mutagen)\n*   pydub：通过简单、简洁的高层接口来操作音频文件。[官网](https://github.com/jiaaro/pydub)\n*   pyechonest：[Echo Nest](http://developer.echonest.com/) API 的 Python 客户端[官网](https://github.com/echonest/pyechonest)\n*   talkbox：一个用来处理演讲/信号的 Python 库[官网](http://scikits.appspot.com/talkbox)\n*   TimeSide：开源 web 音频处理框架。[官网](https://github.com/Parisson/TimeSide)\n*   tinytag：一个用来读取MP3, OGG, FLAC 以及 Wave 文件音乐元数据的库。[官网](https://github.com/devsnd/tinytag)\n*   mingus：一个高级音乐理论和曲谱包，支持 MIDI 文件和回放功能。[官网](http://bspaans.github.io/python-mingus/)\n\n### Video\n\n用来操作视频和GIF的库。\n\n*   moviepy：一个用来进行基于脚本的视频编辑模块，适用于多种格式，包括动图 GIFs。[官网](http://zulko.github.io/moviepy/)\n*   scikit-video：SciPy 视频处理常用程序。[官网](https://github.com/aizvorski/scikit-video)\n\n### 地理位置\n\n地理编码地址以及用来处理经纬度的库。\n\n*   GeoDjango：世界级地理图形 web 框架。[官网](https://docs.djangoproject.com/en/dev/ref/contrib/gis/)\n*   GeoIP：MaxMind GeoIP Legacy 数据库的 Python API。[官网](https://github.com/maxmind/geoip-api-python)\n*   geojson：GeoJSON 的 Python 绑定及工具。[官网](https://github.com/frewsxcv/python-geojson)\n*   geopy：Python 地址编码工具箱。[官网](https://github.com/geopy/geopy)\n*   pygeoip：纯 Python GeoIP API。[官网](https://github.com/appliedsec/pygeoip)\n*   django-countries：一个 Django 应用程序，提供用于表格的国家选择功能，国旗图标静态文件以及模型中的国家字段。[官网](https://github.com/SmileyChris/django-countries)\n\n### HTTP\n\n使用HTTP的库。\n\n*   requests：人性化的HTTP请求库。[官网](http://docs.python-requests.org/en/latest/)\n*   grequests：requests 库 + gevent ，用于异步 HTTP 请求.[官网](https://github.com/kennethreitz/grequests)\n*   httplib2：全面的 HTTP 客户端库。[官网](https://github.com/jcgregorio/httplib2)\n*   treq：类似 requests 的Python API 构建于 Twisted HTTP 客户端之上。[官网](https://github.com/twisted/treq)\n*   urllib3：一个具有线程安全连接池，支持文件 post，清晰友好的 HTTP 库。[官网](https://github.com/shazow/urllib3)\n\n### 数据库\n\nPython实现的数据库。\n\n*   pickleDB：一个简单，轻量级键值储存数据库。[官网](https://pythonhosted.org/pickleDB/)\n*   PipelineDB：流式 SQL 数据库。[官网](https://www.pipelinedb.com/)\n*   TinyDB：一个微型的，面向文档型数据库。[官网](https://github.com/msiemens/tinydb)\n*   ZODB：一个 Python 原生对象数据库。一个键值和对象图数据库。[官网](http://www.zodb.org/en/latest/)\n\n### 数据库驱动\n\n用来连接和操作数据库的库。\n\n*   MySQL：[awesome-mysql](http://shlomi-noach.github.io/awesome-mysql/)系列\n    *   mysql-python：Python 的 MySQL 数据库连接器。[官网](https://sourceforge.net/projects/mysql-python/)\n    *   ysqlclient：[mysql-python](https://github.com/PyMySQL/mysqlclient-python) 分支，支持 Python 3。\n    *   oursql：一个更好的 MySQL 连接器，支持原生预编译指令和 BLOBs.[官网](https://pythonhosted.org/oursql/)\n    *   PyMySQL：纯 Python MySQL 驱动，兼容 mysql-python。[官网](https://github.com/PyMySQL/PyMySQL)\n*   PostgreSQL\n    *   psycopg2：Python 中最流行的 PostgreSQL 适配器。[官网](http://initd.org/psycopg/)\n    *   queries：psycopg2 库的封装，用来和 PostgreSQL 进行交互。[官网](https://github.com/gmr/queries)\n    *   txpostgres：基于 Twisted 的异步 PostgreSQL 驱动。[官网](http://txpostgres.readthedocs.org/en/latest/)\n*   其他关系型数据库\n    *   apsw：另一个 Python SQLite封装。[官网](http://rogerbinns.github.io/apsw/)\n    *   dataset：在数据库中存储Python字典\n    *   pymssql：一个简单的Microsoft SQL Server数据库接口。[官网](http://www.pymssql.org/en/latest/)\n*   NoSQL 数据库\n    *   cassandra-python-driver：Cassandra 的 Python 驱动。[官网](https://github.com/datastax/python-driver)\n    *   HappyBase：一个为 Apache HBase 设计的，对开发者友好的库。[官网](http://happybase.readthedocs.org/en/latest/)\n    *   Plyvel：一个快速且功能丰富的 LevelDB 的 Python 接口。[官网](https://plyvel.readthedocs.org/en/latest/)\n    *   py2neo：Neo4j restful 接口的Python 封装客户端。[官网](http://py2neo.org/2.0/)\n    *   pycassa：Cassandra 的 Python Thrift 驱动。[官网](https://github.com/pycassa/pycassa)\n    *   PyMongo：MongoDB 的官方 Python 客户端。[官网](https://docs.mongodb.org/ecosystem/drivers/python/)\n    *   redis-py：Redis 的 Python 客户端。[官网](https://github.com/andymccurdy/redis-py)\n    *   telephus：基于 Twisted 的 Cassandra 客户端。[官网](https://github.com/driftx/Telephus)\n    *   txRedis：基于 Twisted 的 Redis 客户端。[官网](https://github.com/deldotdr/txRedis)\n\n### ORM\n\n实现对象关系映射或数据映射技术的库。\n\n*   关系型数据库\n    *   Django Models：Django 的一部分。[官网](https://docs.djangoproject.com/en/dev/topics/db/models/)\n    *   SQLAlchemy：Python SQL 工具以及对象关系映射工具。[官网](http://www.sqlalchemy.org/)\n        *   [awesome-sqlalchemy](https://github.com/dahlia/awesome-sqlalchemy)系列\n    *   [Peewee](http://hao.jobbole.com/peewee/)：一个小巧，富有表达力的 ORM。[官网](https://github.com/coleifer/peewee)\n    *   PonyORM：提供面向生成器的 SQL 接口的 ORM。[官网](https://ponyorm.com/)\n    *   python-sql：编写 Python 风格的 SQL 查询。[官网](https://pypi.python.org/pypi/python-sql)\n*   NoSQL 数据库\n    *   django-mongodb-engine：Django MongoDB 后端。[官网](https://github.com/django-nonrel/mongodb-engine)\n    *   PynamoDB：[Amazon DynamoDB](https://aws.amazon.com/dynamodb/) 的一个 Python 风格接口。[官网](https://github.com/jlafon/PynamoDB)\n    *   flywheel：Amazon DynamoDB 的对象映射工具。[官网](https://github.com/mathcamp/flywheel)\n    *   MongoEngine：一个Python 对象文档映射工具，用于 MongoDB。[官网](http://mongoengine.org/)\n    *   hot-redis：为 Redis 提供 Python 丰富的数据类型。[官网](https://github.com/stephenmcd/hot-redis)\n    *   redisco：一个 Python 库，提供可以持续存在在 Redis 中的简单模型和容器。[官网](https://github.com/kiddouk/redisco)\n*   其他\n    *   butterdb：Google Drive 电子表格的 Python ORM。[官网](https://github.com/Widdershin/butterdb)\n\n### Web 框架\n\n全栈 Web 框架。\n\n*   [Django](http://hao.jobbole.com/django/)：Python 界最流行的 web 框架。[官网](https://www.djangoproject.com/)\n    *   [awesome-django](https://github.com/rosarior/awesome-django)系列\n*   [Flask](http://hao.jobbole.com/flask/)：一个 Python 微型框架。[官网](http://flask.pocoo.org/)\n    *   [awesome-flask](https://github.com/humiaozuzu/awesome-flask)系列\n*   pyramid：一个小巧，快速，接地气的开源Python web 框架。\n    *   [awesome-pyramid](https://github.com/uralbash/awesome-pyramid)系列\n*   [Bottle](http://hao.jobbole.com/bottle/)：一个快速小巧，轻量级的 WSGI 微型 web 框架。[官网](http://bottlepy.org/docs/dev/index.html)\n*   CherryPy：一个极简的 Python web 框架，服从 HTTP/1.1 协议且具有WSGI 线程池。[官网](http://www.cherrypy.org/)\n*   TurboGears：一个可以扩展为全栈解决方案的微型框架。[官网](http://www.turbogears.org/)\n*   [web.py](http://hao.jobbole.com/python-webpy/)：一个 Python 的 web 框架，既简单，又强大。[官网](http://webpy.org/)\n*   web2py：一个全栈 web 框架和平台，专注于简单易用。[官网](http://www.web2py.com/)\n*   [Tornado](http://hao.jobbole.com/tornado/)：一个web 框架和异步网络库。[官网](http://www.tornadoweb.org/en/latest/)\n\n### 权限\n\n允许或拒绝用户访问数据或功能的库。\n\n*   Carteblanche：Module to align code with thoughts of users and designers. Also magically handles navigation and permissions.[官网](https://github.com/neuman/python-carteblanche/)\n*   django-guardian：Django 1.2+ 实现了单个对象权限。[官网](https://github.com/django-guardian/django-guardian)\n*   django-rules：一个小巧但是强大的应用，提供对象级别的权限管理，且不需要使用数据库。[官网](https://github.com/dfunckt/django-rules)\n\n### CMS\n\n内容管理系统\n\n*   odoo-cms: 一个开源的，企业级 CMS，基于odoo。[官网](http://www.odoo.com)\n*   django-cms：一个开源的，企业级 CMS，基于 Django。[官网](http://www.django-cms.org/en/)\n*   djedi-cms：一个轻量级但却非常强大的 Django CMS ，考虑到了插件，内联编辑以及性能。[官网](http://djedi-cms.org/)\n*   FeinCMS：基于 Django 构建的最先进的内容管理系统之一。[官网](http://www.feincms.org/)\n*   Kotti：一个高级的，Python 范的 web 应用框架，基于 Pyramid 构建。[官网](http://kotti.pylonsproject.org/)\n*   Mezzanine：一个强大的，持续的，灵活的内容管理平台。[官网](http://mezzanine.jupo.org/)\n*   Opps：一个为杂志，报纸网站以及大流量门户网站设计的 CMS 平台，基于 Django。[官网](http://opps.github.io/opps/)\n*   Plone：一个构建于开源应用服务器 Zope 之上的 CMS。[官网](https://plone.org/)\n*   Quokka：灵活，可扩展的小型 CMS，基于 Flask 和 MongoDB。[官网](http://quokkaproject.org/)\n*   [Wagtail](http://hao.jobbole.com/wagtail/)：一个 Django 内容管理系统。[官网](https://wagtail.io/)\n*   Widgy：最新的 CMS 框架，基于 Django。[官网](https://wid.gy/)\n\n### 电子商务\n\n用于电子商务以及支付的框架和库。\n\n*   django-oscar：一个用于 Django 的开源的电子商务框架。[官网](http://oscarcommerce.com/)\n*   django-shop：一个基于 Django 的店铺系统。[官网](https://github.com/awesto/django-shop)\n*   Cartridge：一个基于 Mezzanine 构建的购物车应用。[官网](https://github.com/stephenmcd/cartridge)\n*   shoop：一个基于 Django 的开源电子商务平台。[官网](https://www.shoop.io/en/)\n*   alipay：非官方的 Python 支付宝 API。[官网](https://github.com/lxneng/alipay)\n*   merchant：一个可以接收来自多种支付平台支付的 Django 应用。[官网](https://github.com/agiliq/merchant)\n*   money：货币类库with optional CLDR-backed locale-aware formatting and an extensible currency exchange solution.[官网](https://github.com/carlospalol/money)\n*   python-currencies：显示货币格式以及它的数值。[官网](https://github.com/Alir3z4/python-currencies)\n\n### RESTful API\n\n用来开发RESTful APIs的库\n\n*   Django\n    *   [django-rest-framework](http://hao.jobbole.com/django-rest-framework/)：一个强大灵活的工具，用来构建 web API。[官网](http://www.django-rest-framework.org/)\n    *   django-tastypie：为Django 应用开发API。[官网](http://tastypieapi.org/)\n    *   django-formapi：为 Django 的表单验证，创建 JSON APIs 。[官网](https://github.com/5monkeys/django-formapi)\n*   Flask\n    *   flask-api：为 flask 开发的，可浏览 Web APIs 。[官网](http://www.flaskapi.org/)\n    *   flask-restful：为 flask 快速创建REST APIs 。[官网](http://flask-restful.readthedocs.org/en/latest/)\n    *   flask-restless：为 SQLAlchemy 定义的数据库模型创建 RESTful APIs 。[官网](https://flask-restless.readthedocs.org/en/latest/)\n    *   flask-api-utils：为 Flask 处理 API 表示和验证。[官网](https://github.com/marselester/flask-api-utils)\n    *   eve：REST API 框架，由 Flask, MongoDB 等驱动。[官网](https://github.com/nicolaiarocci/eve)\n*   Pyramid\n    *   cornice：一个Pyramid 的 REST 框架 。[官网](https://cornice.readthedocs.org/en/latest/)\n*   与框架无关的\n    *   falcon：一个用来建立云 API 和 web app 后端的高性能框架。[官网](http://falconframework.org/)\n    *   sandman：为现存的数据库驱动系统自动创建 REST APIs 。[官网](https://github.com/jeffknupp/sandman)\n    *   restless：框架无关的 REST 框架 ，基于从 Tastypie 学到的知识。[官网](http://restless.readthedocs.org/en/latest/)\n    *   ripozo：快速创建 REST/HATEOAS/Hypermedia APIs。[官网](https://github.com/vertical-knowledge/ripozo)\n\n### 验证\n\n实现验证方案的库。\n\n*   OAuth\n    *   Authomatic：简单但是强大的框架，身份验证/授权客户端。[官网](http://peterhudec.github.io/authomatic/)\n    *   django-allauth：Django 的验证应用。[官网](https://github.com/pennersr/django-allauth)\n    *   django-oauth-toolkit：为 Django 用户准备的 OAuth2。[官网](https://github.com/evonove/django-oauth-toolkit)\n    *   django-oauth2-provider：为 Django 应用提供 OAuth2 接入。[官网](https://github.com/caffeinehit/django-oauth2-provider)\n    *   Flask-OAuthlib：OAuth 1.0/a, 2.0 客户端实现，供 Flask 使用。[官网](https://github.com/lepture/flask-oauthlib)\n    *   OAuthLib：一个 OAuth 请求-签名逻辑通用、 完整的实现。[官网](https://github.com/idan/oauthlib)\n    *   python-oauth2：一个完全测试的抽象接口。用来创建 OAuth 客户端和服务端。[官网](https://github.com/joestump/python-oauth2)\n    *   python-social-auth：一个设置简单的社会化验证方式。[官网](https://github.com/omab/python-social-auth)\n    *   rauth：OAuth 1.0/a, 2.0, 和 Ofly 的 Python 库。[官网](https://github.com/litl/rauth)\n    *   sanction：一个超级简单的OAuth2 客户端实现。[官网](https://github.com/demianbrecht/sanction)\n*   其他\n    *   jose：JavaScript 对象签名和加密草案的实现。[官网](https://github.com/demonware/jose)\n    *   PyJWT：JSON Web 令牌草案 01。[官网](https://github.com/jpadilla/pyjwt)\n    *   python-jws：JSON Web 签名草案 02 的实现。[官网](https://github.com/brianloveswords/python-jws)\n    *   python-jwt：一个用来生成和验证 JSON Web 令牌的模块。[官网](https://github.com/davedoesdev/python-jwt)\n\n### 模板引擎\n\n模板生成和词法解析的库和工具。\n\n*   [Jinja2](http://hao.jobbole.com/jinja2/)：一个现代的，对设计师友好的模板引擎。[官网](https://github.com/pallets/jinja)\n*   Chameleon：一个 HTML/XML 模板引擎。 模仿了 ZPT（Zope Page Templates）, 进行了速度上的优化。[官网](https://chameleon.readthedocs.org/en/latest/)\n*   Genshi：Python 模板工具，用以生成 web 感知的结果。[官网](https://genshi.edgewall.org/)\n*   Mako：Python 平台的超高速轻量级模板。[官网](http://www.makotemplates.org/)\n\n### Queue\n\n处理事件以及任务队列的库。\n\n*   celery：一个异步任务队列/作业队列，基于分布式消息传递。[官网](http://www.celeryproject.org/)\n*   huey：小型多线程任务队列。[官网](https://github.com/coleifer/huey)\n*   [mrq](http://hao.jobbole.com/mrq/)：Mr. Queue -一个 Python 的分布式 worker 任务队列， 使用 Redis 和 gevent。[官网](https://github.com/pricingassistant/mrq)\n*   rq：简单的 Python 作业队列。[官网](http://python-rq.org/)\n*   simpleq：一个简单的，可无限扩张的，基于亚马逊 SQS 的队列。[官网](https://github.com/rdegges/simpleq)\n\n### 搜索\n\n对数据进行索引和执行搜索查询的库和软件。\n\n*   django-haystack：Django 模块化搜索。[官网](https://github.com/django-haystack/django-haystack)\n*   elasticsearch-py：Elasticsearch 的官方底层 Python 客户端。[官网](https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html)\n*   elasticsearch-dsl-py：Elasticsearch 的官方高级 Python 客户端。[官网](https://github.com/elastic/elasticsearch-dsl-py)\n*   solrpy：[solr](http://lucene.apache.org/solr/)的 Python 客户端。[官网](https://github.com/edsu/solrpy)\n*   Whoosh：一个快速的纯 Python 搜索引擎库。[官网](http://whoosh.readthedocs.org/en/latest/)\n\n### 动态消息\n\n用来创建用户活动的库。\n\n*   django-activity-stream：从你的站点行为中生成通用活动信息流。[官网](https://github.com/justquick/django-activity-stream)\n*   Stream-Framework：使用 Cassandra 和 Redis 创建动态消息和通知系统。[官网](https://github.com/tschellenbach/Stream-Framework)\n\n### 资源管理\n\n管理、压缩、缩小网站资源的工具。\n\n*   django-compressor：将链接和内联的 JavaScript 或 CSS 压缩到一个单独的缓存文件中。[官网](https://github.com/django-compressor/django-compressor)\n*   django-storages：一个针对 Django 的自定义存储后端的工具集合。[官网](http://django-storages.readthedocs.org/en/latest/)\n*   fanstatic：打包、优化，并且把静态文件依赖作为 Python 的包来提供。[官网](http://www.fanstatic.org/en/latest/)\n*   File Conveyor：一个后台驻留的程序，用来发现和同步文件到 CDNs, S3 和 FTP。[官网](http://fileconveyor.org/)\n*   Flask-Assets：帮你将 web 资源整合到你的 Flask app 中。[官网](http://flask-assets.readthedocs.org/en/latest/)\n*   jinja-assets-compressor：一个 Jinja 扩展，用来编译和压缩你的资源。[官网](https://github.com/jaysonsantos/jinja-assets-compressor)\n*   webassets：为你的静态资源打包、优化和管理生成独一无二的缓存 URL。[官网](http://webassets.readthedocs.org/en/latest/)\n\n### 缓存\n\n缓存数据的库。\n\n*   Beaker：一个缓存和会话库，可以用在 web 应用和独立 Python脚本和应用上。[官网](http://beaker.readthedocs.org/en/latest/)\n*   django-cache-machine：Django 模型的自动缓存和失效。[官网](https://github.com/django-cache-machine/django-cache-machine)\n*   django-cacheops：具有自动颗粒化事件驱动失效功能的 ORM。[官网](https://github.com/Suor/django-cacheops)\n*   django-viewlet：渲染模板，同时具有额外的缓存控制功能。[官网](https://github.com/5monkeys/django-viewlet)\n*   dogpile.cache：dogpile.cache 是 Beaker 的下一代替代品，由同一作者开发。[官网](http://dogpilecache.readthedocs.org/en/latest/)\n*   HermesCache：Python 缓存库，具有基于标签的失效和 dogpile effect 保护功能。[官网](https://pypi.python.org/pypi/HermesCache)\n*   johnny-cache：django应用缓存框架。[官网](https://github.com/jmoiron/johnny-cache)\n*   pylibmc：[libmemcached](http://libmemcached.org/libMemcached.html) 接口的 Python 封装。[官网](https://github.com/lericson/pylibmc)\n\n### 电子邮件\n\n用来发送和解析电子邮件的库。\n\n*   django-celery-ses：带有 AWS SES 和 Celery 的 Django email 后端。[官网](https://github.com/StreetVoice/django-celery-ses)\n*   envelopes：供人类使用的电子邮件库。[官网](http://tomekwojcik.github.io/envelopes/)\n*   flanker：一个 email 地址和 Mime 解析库。[官网](https://github.com/mailgun/flanker)\n*   imbox：Python IMAP 库[官网](https://github.com/martinrusev/imbox)\n*   inbox.py：Python SMTP 服务器。[官网](https://github.com/kennethreitz/inbox.py)\n*   inbox：一个开源电子邮件工具箱。[官网](https://github.com/nylas/sync-engine)\n*   lamson：Python 风格的 SMTP 应用服务器。[官网](https://github.com/zedshaw/lamson)\n*   mailjet：Mailjet API 实现，用来提供批量发送邮件，统计等功能。[官网](https://github.com/WoLpH/mailjet)\n*   marrow.mailer：高性能可扩展邮件分发框架。[官网](https://github.com/marrow/mailer)\n*   modoboa：一个邮件托管和管理平台，具有现代的、简约的 Web UI。[官网](https://github.com/tonioo/modoboa)\n*   pyzmail：创建，发送和解析电子邮件。[官网](http://www.magiksys.net/pyzmail/)\n*   Talon：Mailgun 库，用来抽取信息和签名。[官网](https://github.com/mailgun/talon)\n\n### 国际化\n\n用来进行国际化的库。\n\n*   Babel：一个Python 的国际化库。[官网](http://babel.pocoo.org/en/latest/)\n*   Korean：一个韩语词态库。[官网](https://korean.readthedocs.org/en/latest/)\n\n### URL处理\n\n解析URLs的库\n\n*   furl：一个让处理 URL 更简单小型 Python 库。[官网](https://github.com/gruns/furl)\n*   purl：一个简单的，不可变的URL类，具有简洁的 API 来进行询问和处理。[官网](https://github.com/codeinthehole/purl)\n*   pyshorteners：一个纯 Python URL 缩短库。[官网](https://github.com/ellisonleao/pyshorteners)\n*   shorturl：生成短小 URL 和类似 bit.ly 短链的Python 实现。[官网](https://github.com/Alir3z4/python-shorturl)\n*   webargs：一个解析 HTTP 请求参数的库，内置对流行 web 框架的支持，包括 Flask, Django, Bottle, Tornado和 Pyramid。[官网](https://github.com/sloria/webargs)\n\n### HTML处理\n\n处理 HTML和XML的库。\n\n*   BeautifulSoup：以 Python 风格的方式来对 HTML 或 XML 进行迭代，搜索和修改。[官网](http://www.crummy.com/software/BeautifulSoup/bs4/doc/)\n*   bleach：一个基于白名单的 HTML 清理和文本链接库。[官网](http://bleach.readthedocs.org/en/latest/)\n*   cssutils：一个 Python 的 CSS 库。[官网](https://pypi.python.org/pypi/cssutils/)\n*   html5lib：一个兼容标准的 HTML 文档和片段解析及序列化库。[官网](https://github.com/html5lib/html5lib-python)\n*   lxml：一个非常快速，简单易用，功能齐全的库，用来处理 HTML 和 XML。[官网](http://lxml.de/)\n*   MarkupSafe：为Python 实现 XML/HTML/XHTML 标记安全字符串。[官网](https://github.com/pallets/markupsafe)\n*   pyquery：一个解析 HTML 的库，类似 jQuery。[官网](https://github.com/gawel/pyquery)\n*   untangle：将XML文档转换为Python对象，使其可以方便的访问。[官网](https://github.com/stchris/untangle)\n*   xhtml2pdf：HTML/CSS 转 PDF 工具。[官网](https://github.com/xhtml2pdf/xhtml2pdf)\n*   xmltodict：像处理 JSON 一样处理 XML。[官网](https://github.com/martinblech/xmltodict)\n\n爬取网络站点的库\n\n*   Scrapy：一个快速高级的屏幕爬取及网页采集框架。[官网](http://scrapy.org/)\n*   cola：一个分布式爬虫框架。[官网](https://github.com/chineking/cola)\n*   Demiurge：基于PyQuery 的爬虫微型框架。[官网](https://github.com/matiasb/demiurge)\n*   feedparser：通用 feed 解析器。[官网](http://pythonhosted.org/feedparser/)\n*   Grab：站点爬取框架。[官网](http://grablib.org/)\n*   MechanicalSoup：用于自动和网络站点交互的 Python 库。[官网](https://github.com/hickford/MechanicalSoup)\n*   portia：Scrapy 可视化爬取。[官网](https://github.com/scrapinghub/portia)\n*   pyspider：一个强大的爬虫系统。[官网](https://github.com/binux/pyspider)\n*   RoboBrowser：一个简单的，Python 风格的库，用来浏览网站，而不需要一个独立安装的浏览器。[官网](https://github.com/jmcarp/robobrowser)\n\n### 网页内容提取\n\n用于进行网页内容提取的库。\n\n*   Haul：一个可以扩展的图像爬取工具。[官网](https://github.com/vinta/Haul)\n*   html2text：将 HTML 转换为 Markdown 格式文本[官网](https://github.com/Alir3z4/html2text)\n*   lassie：人性化的网页内容检索库。[官网](https://github.com/michaelhelmick/lassie)\n*   micawber：一个小型网页内容提取库，用来从 URLs 提取富内容。[官网](https://github.com/coleifer/micawber)\n*   [newspaper](http://hao.jobbole.com/python-newspaper/)：使用 Python 进行新闻提取，文章提取以及内容策展。[官网](https://github.com/codelucas/newspaper)\n*   opengraph：一个用来解析开放内容协议(Open Graph Protocol)的 Python模块。[官网](https://github.com/erikriver/opengraph)\n*   [python-goose](http://hao.jobbole.com/python-goose/)：HTML内容/文章提取器。[官网](https://github.com/grangier/python-goose)\n*   python-readability：arc90 公司 readability 工具的 Python 高速端口。[官网](https://github.com/buriy/python-readability)\n*   sanitize：为杂乱的数据世界带来调理性。[官网](https://github.com/Alir3z4/python-sanitize)\n*   sumy：一个为文本文件和 HTML 页面进行自动摘要的模块。[官网](https://github.com/miso-belica/sumy)\n*   textract：从任何格式的文档中提取文本，Word，PowerPoint，PDFs 等等。[官网](https://github.com/deanmalmgren/textract)\n\n### 表单\n\n进行表单操作的库。\n\n*   Deform：Python HTML 表单生成库，受到了 formish 表单生成库的启发。[官网](http://deform.readthedocs.org/en/latest/)\n*   django-bootstrap3：集成了 Bootstrap 3 的 Django。[官网](https://github.com/dyve/django-bootstrap3)\n*   django-crispy-forms：一个 Django 应用，他可以让你以一种非常优雅且 DRY（Don't repeat yourself） 的方式来创建美观的表单。[官网](http://django-crispy-forms.readthedocs.org/en/latest/)\n*   django-remote-forms：一个平台独立的 Django 表单序列化工具。[官网](https://github.com/WiserTogether/django-remote-forms)\n*   WTForms：一个灵活的表单验证和呈现库。[官网](http://wtforms.readthedocs.org/en/latest/)\n*   WTForms-JSON：一个 WTForms 扩展，用来处理 JSON 数据。[官网](http://wtforms-json.readthedocs.org/en/latest/)\n\n### 数据验证\n\n数据验证库。多用于表单验证。\n\n*   Cerberus：A mappings-validator with a variety of rules, normalization-features and simple customization that uses a pythonic schema-definition.[官网](http://docs.python-cerberus.org/en/stable/)\n*   colander：一个用于对从 XML, JSON，HTML 表单获取的数据或其他同样简单的序列化数据进行验证和反序列化的系统。[官网](http://docs.pylonsproject.org/projects/colander/en/latest/)\n*   kmatch：一种用于匹配/验证/筛选 Python 字典的语言。[官网](https://github.com/ambitioninc/kmatch)\n*   schema：一个用于对 Python 数据结构进行验证的库。[官网](https://github.com/keleshev/schema)\n*   Schematics：数据结构验证。[官网](https://github.com/schematics/schematics)\n*   valideer：轻量级可扩展的数据验证和适配库。[官网](https://github.com/podio/valideer)\n*   voluptuous：一个 Python 数据验证库。主要是为了验证传入 Python的 JSON，YAML 等数据。[官网](https://github.com/alecthomas/voluptuous)\n\n### 反垃圾技术\n\n帮助你和电子垃圾进行战斗的库。\n\n*   django-simple-captcha：一个简单、高度可定制的Django 应用，可以为任何Django表单添加验证码。[官网](https://github.com/mbi/django-simple-captcha)\n*   django-simple-spam-blocker：一个用于Django的简单的电子垃圾屏蔽工具。[官网](https://github.com/moqada/django-simple-spam-blocker)\n\n### 标记\n\n用来进行标记的库。\n\n*   django-taggit：简单的 Django 标记工具。[官网](https://github.com/alex/django-taggit)\n\n### 管理面板\n\n管理界面库。\n\n*   Ajenti：一个你的服务器值得拥有的管理面板。[官网](https://github.com/Eugeny/ajenti)\n*   django-suit：Django 管理界面的一个替代品 (仅对于非商业用途是免费的)。[官网](http://djangosuit.com/)\n*   django-xadmin：Django admin 的一个替代品，具有很多不错的功能。[官网](https://github.com/sshwsfc/django-xadmin)\n*   flask-admin：一个用于 Flask 的简单可扩展的管理界面框架。[官网](https://github.com/flask-admin/flask-admin)\n*   flower：一个对 Celery 集群进行实时监控和提供 web 管理界面的工具。[官网](https://github.com/mher/flower)\n*   Grappelli：Django 管理界面的一个漂亮的皮肤。[官网](http://grappelliproject.com/)\n*   Wooey：一个 Django 应用，可以为 Python 脚本创建 web 用户界面。[官网](https://github.com/wooey/wooey)\n\n### 静态站点生成器\n\n静态站点生成器是一个软件，它把文本和模板作为输入，然后输出HTML文件。\n\n*   Pelican：使用 Markdown 或 ReST 来处理内容， Jinja 2 来制作主题。支持 DVCS, Disqus.。AGPL 许可。[官网](http://blog.getpelican.com/)\n*   Cactus：为设计师设计的静态站点生成器。[官网](https://github.com/koenbok/Cactus/)\n*   Hyde：基于 Jinja2 的静态站点生成器。[官网](http://hyde.github.io/)\n*   Nikola：一个静态网站和博客生成器。[官网](https://www.getnikola.com/)\n*   Tinkerer：Tinkerer 是一个博客引擎/静态站点生成器，由Sphinx驱动。[官网](http://tinkerer.me/)\n*   Lektor：一个简单易用的静态 CMS 和博客引擎。[官网](https://www.getlektor.com/)\n\n### 进程\n\n操作系统进程启动及通信库。\n\n*   envoy：比 Python [subprocess](https://docs.python.org/2/library/subprocess.html) 模块更人性化。[官网](https://github.com/kennethreitz/envoy)\n*   sarge：另一 种 subprocess 模块的封装。[官网](http://sarge.readthedocs.org/en/latest/)\n*   sh：一个完备的 subprocess 替代库。[官网](https://github.com/amoffat/sh)\n\n### 并发和并行\n\n用以进行并发和并行操作的库。\n\n*   multiprocessing：(Python 标准库) 基于进程的“线程”接口。[官网](https://docs.python.org/2/library/multiprocessing.html)\n*   threading：(Python 标准库)更高层的线程接口。[官网](https://docs.python.org/2/library/threading.html)\n*   eventlet：支持 WSGI 的异步框架。[官网](http://eventlet.net/)\n*   gevent：一个基于协程的 Python 网络库，使用[greenlet](https://github.com/python-greenlet/greenlet)。[官网](http://www.gevent.org/)\n*   Tomorrow：用于产生异步代码的神奇的装饰器语法实现。[官网](https://github.com/madisonmay/Tomorrow)\n*   uvloop：在libuv之上超快速实现asyncio事件循环。[官网](https://github.com/MagicStack/uvloop)\n\n### 网络\n\n用于网络编程的库。\n\n*   asyncio：(Python 标准库) 异步 I/O, 事件循环, 协程以及任务。[官网](https://docs.python.org/3/library/asyncio.html)\n*   [Twisted](http://hao.jobbole.com/twisted/)：一个事件驱动的网络引擎。[官网](https://twistedmatrix.com/trac/)\n*   pulsar：事件驱动的并发框架。[官网](https://github.com/quantmind/pulsar)\n*   diesel：基于Greenlet 的事件 I/O 框架。[官网](https://github.com/dieseldev/diesel)\n*   pyzmq：一个 ZeroMQ 消息库的 Python 封装。[官网](http://zeromq.github.io/pyzmq/)\n*   txZMQ：基于 Twisted 的 ZeroMQ 消息库的 Python 封装。[官网](https://github.com/smira/txZMQ)\n\n### WebSocket\n\n帮助使用WebSocket的库。\n\n*   AutobahnPython：给 Python 、使用的 WebSocket & WAMP 基于 Twisted 和 [asyncio](https://docs.python.org/3/library/asyncio.html)。[官网](https://github.com/crossbario/autobahn-python)\n*   Crossbar：开源统一应用路由(Websocket & WAMP for Python on Autobahn).[官网](https://github.com/crossbario/crossbar/)\n*   django-socketio：给 Django 用的 WebSockets。[官网](https://github.com/stephenmcd/django-socketio)\n*   WebSocket-for-Python：为Python2/3 以及 PyPy 编写的 WebSocket 客户端和服务器库。[官网](https://github.com/Lawouach/WebSocket-for-Python)\n\n### WSGI 服务器\n\n兼容 WSGI 的 web 服务器\n\n*   gunicorn：Pre-forked, 部分是由 C 语言编写的。[官网](https://pypi.python.org/pypi/gunicorn)\n*   uwsgi：uwsgi 项目的目的是开发一组全栈工具，用来建立托管服务， 由 C 语言编写。[官网](https://uwsgi-docs.readthedocs.org/en/latest/)\n*   [bjoern](http://hao.jobbole.com/bjoern/)：异步，非常快速，由 C 语言编写。[官网](https://pypi.python.org/pypi/bjoern)\n*   fapws3：异步 (仅对于网络端)，由 C 语言编写。[官网](http://www.fapws.org/)\n*   meinheld：异步，部分是由 C 语言编写的。[官网](https://pypi.python.org/pypi/meinheld)\n*   netius：异步，非常快速。[官网](https://github.com/hivesolutions/netius)\n*   paste：多线程，稳定，久经考验。[官网](http://pythonpaste.org/)\n*   rocket：多线程。[官网](https://pypi.python.org/pypi/rocket)\n*   waitress：多线程, 是它驱动着 Pyramid 框架。[官网](https://waitress.readthedocs.org/en/latest/)\n*   Werkzeug：一个 WSGI 工具库，驱动着 Flask ，而且可以很方便大嵌入到你的项目中去。[官网](http://werkzeug.pocoo.org/)\n\n### RPC 服务器\n\n兼容 RPC 的服务器。\n\n*   SimpleJSONRPCServer：这个库是 JSON-RPC 规范的一个实现。[官网](https://github.com/joshmarshall/jsonrpclib/)\n*   SimpleXMLRPCServer：(Python 标准库) 简单的 XML-RPC 服务器实现，单线程。[官网](https://docs.python.org/2/library/simplexmlrpcserver.html)\n*   zeroRPC：zerorpc 是一个灵活的 RPC 实现，基于 ZeroMQ 和 MessagePack。[官网](https://github.com/0rpc/zerorpc-python)\n\n### 密码学\n\n*   cryptography：这个软件包意在提供密码学基本内容和方法提供给 Python 开发者。[官网](https://cryptography.io/en/latest/)\n*   hashids：在 Python 中实现 [hashids](http://hashids.org/) 。[官网](https://github.com/davidaurelio/hashids-python)\n*   Paramiko：SSHv2 协议的 Python (2.6+, 3.3+) ，提供客户端和服务端的功能。[官网](http://www.paramiko.org/)\n*   Passlib：安全密码存储／哈希库，[官网](https://pythonhosted.org/passlib/)\n*   PyCrypto：Python 密码学工具箱。[官网](https://www.dlitz.net/software/pycrypto/)\n*   PyNacl：网络和密码学(NaCl) 库的 Python 绑定。[官网](https://github.com/pyca/pynacl)\n\n### 图形用户界面\n\n用来创建图形用户界面程序的库。\n\n*   curses：内建的 [ncurses](http://www.gnu.org/software/ncurses/) 封装，用来创建终端图形用户界面。[官网](https://docs.python.org/2/library/curses.html#module-curses)\n*   enaml：使用类似 QML 的Declaratic语法来创建美观的用户界面。[官网](https://github.com/nucleic/enaml)\n*   [kivy](http://hao.jobbole.com/kivy/)：一个用来创建自然用户交互（NUI）应用程序的库，可以运行在 Windows, Linux, Mac OS X, Android 以及 iOS平台上。[官网](https://kivy.org/)\n*   pyglet：一个Python 的跨平台窗口及多媒体库。[官网](https://bitbucket.org/pyglet/pyglet/wiki/Home)\n*   PyQt：跨平台用户界面框架 [Qt](http://www.qt.io/) 的 Python 绑定 ，支持Qt v4 和 Qt v5。[官网](https://riverbankcomputing.com/software/pyqt/intro)\n*   PySide：P跨平台用户界面框架 [Qt](http://www.qt.io/) 的 Python 绑定 ，支持Qt v4。[官网](https://wiki.qt.io/PySide)\n*   Tkinter：Tkinter 是 Python GUI 的一个事实标准库。[官网](https://wiki.python.org/moin/TkInter)\n*   Toga：一个 Python 原生的, 操作系统原生的 GUI 工具包。[官网](https://github.com/pybee/toga)\n*   urwid：一个用来创建终端 GUI 应用的库，支持组件，事件和丰富的色彩等。[官网](http://urwid.org/)\n*   wxPython：wxPython 是 wxWidgets C++ 类库和 Python 语言混合的产物。[官网](http://wxpython.org/)\n*   PyGObject：GLib/GObject/GIO/GTK+ (GTK+3) 的 Python 绑定[官网](https://wiki.gnome.org/Projects/PyGObject)\n*   Flexx：Flexx 是一个纯 Python 语言编写的用来创建 GUI 程序的工具集，它使用 web 技术进行界面的展示。[官网](https://github.com/zoofIO/flexx)\n\n### 游戏开发\n\n超赞的游戏开发库。\n\n*   Cocos2d：cocos2d 是一个用来开发 2D 游戏， 示例和其他图形/交互应用的框架。基于 pyglet。[官网](http://cocos2d.org/)\n*   Panda3D：由迪士尼开发的 3D 游戏引擎，并由卡内基梅陇娱乐技术中心负责维护。使用C++编写, 针对 Python 进行了完全的封装。[官网](https://www.panda3d.org/)\n*   Pygame：Pygame 是一组 Python 模块，用来编写游戏。[官网](http://www.pygame.org/news.html)\n*   PyOgre：Ogre 3D 渲染引擎的 Python 绑定，可以用来开发游戏和仿真程序等任何 3D 应用。[官网](http://www.ogre3d.org/tikiwiki/PyOgre)\n*   PyOpenGL：OpenGL 的 Python 绑定及其相关 APIs。[官网](http://pyopengl.sourceforge.net/)\n*   PySDL2：SDL2 库的封装，基于 ctypes。[官网](http://pysdl2.readthedocs.org/en/latest/)\n*   RenPy：一个视觉小说（visual novel）引擎。[官网](https://www.renpy.org/)\n\n### 日志\n\n用来生成和操作日志的库。\n\n*   logging：(Python 标准库) 为 Python 提供日志功能。[官网](https://docs.python.org/2/library/logging.html)\n*   logbook：Logging 库的替代品。[官网](http://pythonhosted.org/Logbook/)\n*   Eliot：为复杂的和分布式系统创建日志。[官网](https://eliot.readthedocs.org/en/latest/)\n*   Raven：Sentry的 Python 客户端。[官网](http://raven.readthedocs.org/en/latest/)\n*   Sentry：实时记录和收集日志的服务器。[官网](https://pypi.python.org/pypi/sentry)\n\n### Testing\n\n进行代码库测试和生成测试数据的库。\n\n*   测试框架\n    *   unittest：(Python 标准库) 单元测试框架。[官网](https://docs.python.org/2/library/unittest.html)\n    *   nose：nose 扩展了 unittest 的功能。[官网](https://nose.readthedocs.org/en/latest/)\n    *   contexts：一个 Python 3.3+ 的 BDD 框架。受到C# – Machine.Specifications的启发。[官网](https://github.com/benjamin-hodgson/Contexts)\n    *   hypothesis：Hypothesis 是一个基于先进的 Quickcheck 风格特性的测试库。[官网](https://github.com/DRMacIver/hypothesis)\n    *   mamba：Python 的终极测试工具， 拥护BDD。[官网](http://nestorsalceda.github.io/mamba/)\n    *   PyAutoGUI：PyAutoGUI 是一个人性化的跨平台 GUI 自动测试模块。[官网](https://github.com/asweigart/pyautogui)\n    *   pyshould：Should 风格的断言，基于 [PyHamcrest](https://github.com/hamcrest/PyHamcrest)。[官网](https://github.com/drslump/pyshould)\n    *   pytest：一个成熟的全功能 Python 测试工具。[官网](http://pytest.org/latest/)\n    *   green：干净，多彩的测试工具。[官网](https://github.com/CleanCut/green)\n    *   pyvows：BDD 风格的测试工具，受Vows.js的启发。[官网](http://heynemann.github.io/pyvows/)-\n    *   Robot Framework：一个通用的自动化测试框架。[官网](https://github.com/robotframework/robotframework)\n*   Web 测试\n    *   Selenium：[Selenium](http://www.seleniumhq.org/) WebDriver 的 Python 绑定。[官网](https://pypi.python.org/pypi/selenium)\n    *   locust：使用 Python 编写的，可扩展的用户加载测试工具。[官网](https://github.com/locustio/locust)\n    *   sixpack：一个和语言无关的 A/B 测试框架。[官网](https://github.com/seatgeek/sixpack)\n    *   splinter：开源的 web 应用测试工具。[官网](https://splinter.readthedocs.org/en/latest/)\n*   Mock测试\n    *   mock：(Python 标准库) 一个用于伪造测试的库。[官网](https://docs.python.org/3/library/unittest.mock.html)\n    *   doublex：Python 的一个功能强大的 doubles  测试框架。[官网](https://pypi.python.org/pypi/doublex)\n    *   freezegun：通过伪造日期模块来生成不同的时间。[官网](https://github.com/spulec/freezegun)\n    *   httmock：针对 Python 2.6+ 和 3.2+ 生成 伪造请求的库。[官网](https://github.com/patrys/httmock)\n    *   httpretty：Python 的 HTTP 请求 mock 工具。[官网](http://falcao.it/HTTPretty/)\n    *   responses：伪造 Python 中的 requests 库的一个通用库。[官网](https://github.com/getsentry/responses)\n    *   VCR.py：在你的测试中记录和重放 HTTP 交互。[官网](https://github.com/kevin1024/vcrpy)\n*   对象工厂\n    *   factoryboy：一个 Python 用的测试固件 (test fixtures) 替代库。[官网](https://github.com/rbarrois/factoryboy)\n    *   mixer：另外一个测试固件 (test fixtures) 替代库，支持 Django, Flask, SQLAlchemy, Peewee 等。[官网](https://github.com/klen/mixer)\n    *   modelmommy：为 Django 测试创建随机固件[官网](https://github.com/vandersonmota/modelmommy)\n*   代码覆盖率\n    *   coverage：代码覆盖率测量。[官网](https://pypi.python.org/pypi/coverage)\n*   伪数据\n    *   faker：一个 Python 库，用来生成伪数据。[官网](http://www.joke2k.net/faker/)\n    *   fake2db：伪数据库生成器。[官网](https://github.com/emirozer/fake2db)\n    *   radar：生成随机的日期/时间。[官网](https://pypi.python.org/pypi/radar)\n*   错误处理\n    *   FuckIt.py：FuckIt.py 使用最先进的技术来保证你的 Python 代码无论对错都能继续运行。[官网](https://github.com/ajalt/fuckitpy)\n\n### 代码分析和Lint工具\n\n进行代码分析，解析和操作代码库的库和工具。\n\n*   代码分析\n    *   coala：语言独立和易于扩展的代码分析应用程序。[官网](http://coala-analyzer.org/)\n    *   code2flow：把你的 Python 和 JavaScript 代码转换为流程图。[官网](https://github.com/scottrogowski/code2flow)\n    *   pycallgraph：这个库可以把你的Python 应用的流程(调用图)进行可视化。[官网](https://github.com/gak/pycallgraph)\n    *   pysonar2：Python 类型推断和检索工具。[官网](https://github.com/yinwang0/pysonar2)\n*   Lint工具\n    *   Flake8：模块化源码检查工具: pep8, pyflakes 以及 co。[官网](https://pypi.python.org/pypi/flake8)\n    *   Pylint：一个完全可定制的源码分析器。[官网](https://www.pylint.org/)\n    *   pylama：Python 和 JavaScript 的代码审查工具。[官网](https://pylama.readthedocs.org/en/latest/)\n*   代码格式化\n    *   autopep8：自动格式化 Python 代码，以使其符合 PEP8 规范。[官网](https://github.com/hhatto/autopep8)\n\n### Debugging Tools\n\n用来进行代码调试的库。\n\n*   调试器\n    *   ipdb：IPython 启用的 [pdb](https://docs.python.org/2/library/pdb.html)。[官网](https://pypi.python.org/pypi/ipdb)\n    *   pudb：全屏，基于控制台的 Python 调试器。[官网](https://pypi.python.org/pypi/pudb)\n    *   pyringe：可以在 Python 进程中附加和注入代码的调试器。[官网](https://github.com/google/pyringe)\n    *   wdb：一个奇异的 web 调试器，通过 WebSockets 工作。[官网](https://github.com/Kozea/wdb)\n    *   winpdb：一个具有图形用户界面的 Python 调试器，可以进行远程调试，基于 rpdb2。[官网](http://winpdb.org/)\n    *   django-debug-toolbar：为 Django 显示各种调试信息。[官网](https://github.com/django-debug-toolbar/django-debug-toolbar)\n    *   django-devserver：一个 Django 运行服务器的替代品。[官网](https://github.com/dcramer/django-devserver)\n    *   flask-debugtoolbar：django-debug-toolbar 的 flask 版。[官网](https://github.com/mgood/flask-debugtoolbar)\n*   性能分析器\n    *   lineprofiler：逐行性能分析。[官网](https://github.com/rkern/lineprofiler)\n    *   [Memory Profiler](http://hao.jobbole.com/memory_profiler/)：监控 Python 代码的内存使用。[官网](http://pypi.python.org/pypi/memory_profiler)、[内存](https://github.com/fabianp/memoryprofiler)\n    *   profiling：一个交互式 Python 性能分析工具。[官网](https://github.com/what-studio/profiling)\n*   其他\n    *   pyelftools：解析和分析 ELF 文件以及 DWARF 调试信息。[官网](https://github.com/eliben/pyelftools)\n    *   python-statsd：[statsd](https://github.com/etsy/statsd/) 服务器的 Python 客户端。[官网](https://github.com/WoLpH/python-statsd)\n\n### Science and Data Analysis\n\n用来进行科学计算和数据分析的库。\n\n*   astropy：一个天文学 Python 库。[官网](http://www.astropy.org/)\n*   [bcbio-nextgen](http://hao.jobbole.com/bcbio-nextgen/)：这个工具箱为全自动高通量测序分析提供符合最佳实践的处理流程。[官网](https://github.com/chapmanb/bcbio-nextgen)\n*   bccb：生物分析相关代码集合[官网](https://github.com/chapmanb/bcbb)\n*   Biopython：Biopython 是一组可以免费使用的用来进行生物计算的工具。[官网](http://biopython.org/wiki/MainPage)\n*   [blaze](http://hao.jobbole.com/blaze/)：NumPy 和 Pandas 的大数据接口。[官网](http://blaze.readthedocs.org/en/latest/index.html)\n*   [cclib](http://hao.jobbole.com/cclib/)：一个用来解析和解释计算化学软件包输出结果的库。[官网](http://cclib.github.io/)\n*   NetworkX：一个为复杂网络设计的高性能软件。[官网](https://networkx.github.io/)\n*   Neupy：执行和测试各种不同的人工神经网络算法。[官网](http://neupy.com/pages/home.html)\n*   Numba：Python JIT (just in time) 编译器，针对科学用的 Python ，由Cython 和 NumPy 的开发者开发。[官网](http://numba.pydata.org/)\n*   [NumPy](http://hao.jobbole.com/numpy/)：使用 Python 进行科学计算的基础包。[官网](http://www.numpy.org/)\n*   Open Babel：一个化学工具箱，用来描述多种化学数据。[官网](http://openbabel.org/wiki/MainPage)\n*   [Open Mining](http://hao.jobbole.com/open-mining/)：使用 Python 挖掘商业情报 (BI) (Pandas web 接口)。[官网](https://github.com/mining/mining)\n*   [orange](http://hao.jobbole.com/orange/)：通过可视化编程或 Python 脚本进行数据挖掘，数据可视化，分析和机器学习。[官网](http://orange.biolab.si/)\n*   Pandas：提供高性能，易用的数据结构和数据分析工具。[官网](http://pandas.pydata.org/)\n*   PyDy：PyDy 是 Python Dynamics 的缩写，用来为动力学运动建模工作流程提供帮助， 基于 NumPy, SciPy, IPython 和 matplotlib。[官网](http://www.pydy.org/)\n*   [PyMC](http://hao.jobbole.com/pymc/)：马尔科夫链蒙特卡洛采样工具。[官网](https://github.com/pymc-devs/pymc3)\n*   RDKit：化学信息学和机器学习软件。[官网](http://www.rdkit.org/)\n*   [SciPy](http://hao.jobbole.com/scipy/)：由一些基于 Python ，用于数学，科学和工程的开源软件构成的生态系统。[官网](http://www.scipy.org/)\n*   [statsmodels](http://hao.jobbole.com/statsmodels/)：统计建模和计量经济学。[官网](https://github.com/statsmodels/statsmodels)\n*   SymPy：一个用于符号数学的 Python 库。[官网](https://github.com/sympy/sympy)\n*   zipline：一个 Python 算法交易库。[官网](https://github.com/quantopian/zipline)\n*   [Bayesian-belief-networks](http://hao.jobbole.com/bayesian-belief-networks/)：优雅的贝叶斯信念网络框架。[官网](https://github.com/eBay/bayesian-belief-networks)\n* keras: 以tensorflow或者theano为后端的深度学习封装库，快速上手神经网络[官网](https://keras.io/)\n\n### 数据可视化\n\n进行数据可视化的库。 参见: [awesome-javascript](https://github.com/sorrycc/awesome-javascript#data-visualization)。\n\n*   matplotlib：一个 Python 2D 绘图库。[官网](http://matplotlib.org/)\n*   bokeh：用 Python 进行交互式 web 绘图。[官网](https://github.com/bokeh/bokeh)\n*   ggplot：ggplot2 给 R 提供的 API 的 Python 版本。[官网](https://github.com/yhat/ggplot)\n*   plotly：协同 Python 和 matplotlib 工作的 web 绘图库。[官网](https://plot.ly/python/)\n*   pygal：一个 Python SVG 图表创建工具。[官网](http://www.pygal.org/en/latest/)\n*   pygraphviz：Graphviz 的 Python 接口。[官网](https://pypi.python.org/pypi/pygraphviz)\n*   PyQtGraph：交互式实时2D/3D/图像绘制及科学/工程学组件。[官网](http://www.pyqtgraph.org/)\n*   SnakeViz：一个基于浏览器的 Python's cProfile 模块输出结果查看工具。[官网](http://jiffyclub.github.io/snakeviz/)\n*   vincent：把 Python 转换为 Vega 语法的转换工具。[官网](https://github.com/wrobstory/vincent)\n*   VisPy：基于 OpenGL 的高性能科学可视化工具。[官网](http://vispy.org/)\n\n### 计算机视觉\n\n计算机视觉库。\n\n*   OpenCV：开源计算机视觉库。[官网](http://opencv.org/)\n*   pyocr：Tesseract和Cuneiform的包装库。[官网](https://github.com/jflesch/pyocr)\n*   pytesseract：[Google Tesseract OCR](https://github.com/tesseract-ocr)的另一包装库。[官网](https://github.com/madmaze/pytesseract)\n*   [SimpleCV](http://hao.jobbole.com/simplecv/)：一个用来创建计算机视觉应用的开源框架。[官网](http://simplecv.org/)\n\n### 机器学习\n\n机器学习库。 参见: [awesome-machine-learning](https://github.com/josephmisiti/awesome-machine-learning#python).\n\n*   Crab：灵活、快速的推荐引擎。[官网](https://github.com/muricoca/crab)\n*   gensim：人性化的话题建模库。[官网](https://github.com/piskvorky/gensim)\n*   hebel：GPU 加速的深度学习库。[官网](https://github.com/hannes-brt/hebel)\n*   NuPIC：智能计算 Numenta 平台。[官网](https://github.com/numenta/nupic)\n*   pattern：Python 网络挖掘模块。[官网](https://github.com/clips/pattern)\n*   [PyBrain](http://hao.jobbole.com/pybrain/)：另一个 Python 机器学习库。[官网](https://github.com/pybrain/pybrain)\n*   [Pylearn2](http://hao.jobbole.com/pylearn2/)：一个基于 [Theano](https://github.com/Theano/Theano) 的机器学习库。[官网](https://github.com/lisa-lab/pylearn2)\n*   [python-recsys](http://hao.jobbole.com/python-recsys/)：一个用来实现推荐系统的 Python 库。[官网](https://github.com/ocelma/python-recsys)\n*   scikit-learn：基于 SciPy 构建的机器学习 Python 模块。[官网](http://scikit-learn.org/)\n*   pydeep：Python 深度学习库。[官网](https://github.com/andersbll/deeppy)\n*   vowpalporpoise：轻量级 [Vowpal Wabbit](https://github.com/JohnLangford/vowpalwabbit/) 的 Python 封装。[官网](https://github.com/josephreisinger/vowpalporpoise)\n*   skflow：一个 [TensorFlow](https://github.com/tensorflow/tensorflow) 的简化接口(模仿 scikit-learn)。[官网](https://github.com/tensorflow/skflow)\n\n### MapReduce\n\nMapReduce 框架和库。\n\n*   [dpark](http://hao.jobbole.com/dpark/)：Spark 的 Python 克隆版，一个类似 MapReduce 的框架。[官网](https://github.com/douban/dpark)\n*   dumbo：这个 Python 模块可以让人轻松的编写和运行 Hadoop 程序。[官网](https://github.com/klbostee/dumbo)\n*   luigi：这个模块帮你构建批处理作业的复杂流水线。[官网](https://github.com/spotify/luigi)\n*   mrjob：在 Hadoop 或 Amazon Web Services 上运行 MapReduce 任务。[官网](https://github.com/Yelp/mrjob)\n*   PySpark：Spark 的 Python API 。[官网](http://spark.apache.org/docs/latest/programming-guide.html)\n*   streamparse：运行针对事实数据流的 Python 代码。集成了[Apache Storm](http://storm.apache.org/)。[官网](https://github.com/Parsely/streamparse)\n\n### 函数式编程\n\n使用 Python 进行函数式编程。\n\n*   CyToolz：Toolz 的 Cython 实现 : 高性能函数式工具。[官网](https://github.com/pytoolz/cytoolz/)\n*   fn.py：在 Python 中进行函数式编程 : 实现了一些享受函数式编程缺失的功能。[官网](https://github.com/kachayev/fn.py)\n*   funcy：炫酷又实用的函数式工具。[官网](https://github.com/Suor/funcy)\n*   Toolz：一组用于迭代器，函数和字典的函数式编程工具。[官网](https://github.com/pytoolz/toolz)\n\n### 第三方 API\n\n用来访问第三方 API的库。 参见： [List of Python API Wrappers and Libraries](https://github.com/realpython/list-of-python-api-wrappers)。\n\n*   apache-libcloud：一个为各种云设计的 Python 库。[官网](https://libcloud.apache.org/)\n*   boto：Amazon Web Services 的 Python 接口。[官网](https://github.com/boto/boto)\n*   django-wordpress：WordPress models and views for Django.[官网](https://github.com/sunlightlabs/django-wordpress/)\n*   facebook-sdk：Facebook 平台的 Python SDK.[官网](https://github.com/mobolic/facebook-sdk)\n*   facepy：Facepy 让和 Facebook's Graph API 的交互变得更容易。[官网](https://github.com/jgorset/facepy)\n*   gmail：Gmail 的 Python 接口。[官网](https://github.com/charlierguo/gmail)\n*   google-api-python-client：Python 用的 Google APIs 客户端库。[官网](https://github.com/google/google-api-python-client)\n*   gspread：Google 电子表格的 Python API.[官网](https://github.com/burnash/gspread)\n*   twython：Twitter API 的封装。[官网](https://github.com/ryanmcgrath/twython)\n\n### DevOps 工具\n\n用于 DevOps 的软件和库。\n\n*   Ansible：一个非常简单的 IT 自动化平台。[官网](https://github.com/ansible/ansible)\n*   SaltStack：基础设施自动化和管理系统。[官网](https://github.com/saltstack/salt)\n*   OpenStack：用于构建私有和公有云的开源软件。[官网](http://www.openstack.org/)\n*   Docker Compose：快速，分离的开发环境，使用 Docker。[官网](https://docs.docker.com/compose/)\n*   Fabric：一个简单的，Python 风格的工具，用来进行远程执行和部署。[官网](http://www.fabfile.org/)\n*   cuisine：为 Fabric 提供一系列高级函数。[官网](https://github.com/sebastien/cuisine)\n*   Fabtools：一个用来编写超赞的 Fabric 文件的工具。[官网](https://github.com/ronnix/fabtools)\n*   gitapi：Git 的纯 Python API。[官网](https://bitbucket.org/haard/gitapi)\n*   hgapi：Mercurial 的纯 Python API。[官网](https://bitbucket.org/haard/hgapi)\n*   honcho：[Foreman](https://github.com/ddollar/foreman)的 Python 克隆版，用来管理基于[Procfile](https://devcenter.heroku.com/articles/procfile)的应用。[官网](https://github.com/nickstenning/honcho)\n*   pexpect：Controlling interactive programs in a pseudo-terminal like 在一个伪终端中控制交互程序，就像 GNU expect 一样。[官网](https://github.com/pexpect/pexpect)\n*   psutil：一个跨平台进程和系统工具模块。[官网](https://github.com/giampaolo/psutil)\n*   supervisor：UNIX 的进程控制系统。[官网](https://github.com/Supervisor/supervisor)\n\n### 任务调度\n\n任务调度库。\n\n*   APScheduler：轻巧但强大的进程内任务调度，使你可以调度函数。[官网](http://apscheduler.readthedocs.org/en/latest/)\n*   django-schedule：一个 Django 排程应用。[官网](https://github.com/thauber/django-schedule)\n*   doit：一个任务执行和构建工具。[官网](http://pydoit.org/)\n*   gunnery：分布式系统使用的多用途任务执行工具 ，具有 web 交互界面。[官网](https://github.com/gunnery/gunnery)\n*   Joblib：一组为 Python 提供轻量级作业流水线的工具。[官网](http://pythonhosted.org/joblib/index.html)\n*   Plan：如有神助地编写 crontab 文件。[官网](https://github.com/fengsp/plan)\n*   schedule：人性化的 Python 任务调度库。[官网](https://github.com/dbader/schedule)\n*   Spiff：使用纯 Python 实现的强大的工作流引擎。[官网](https://github.com/knipknap/SpiffWorkflow)\n*   TaskFlow：一个可以让你方便执行任务的 Python 库，一致并且可靠。[官网](http://docs.openstack.org/developer/taskflow/)\n\n### 外来函数接口\n\n使用外来函数接口的库。\n\n*   cffi：用来调用 C 代码的外来函数接口。[官网](https://pypi.python.org/pypi/cffi)\n*   [ctypes](http://hao.jobbole.com/ctypes/)：(Python 标准库) 用来调用 C 代码的外来函数接口。[官网](https://docs.python.org/2/library/ctypes.html)\n*   PyCUDA：Nvidia CUDA API 的封装。[官网](https://mathema.tician.de/software/pycuda/)\n*   SWIG：简化的封装和接口生成器。[官网](http://www.swig.org/Doc1.3/Python.html)\n\n### 高性能\n\n让 Python 更快的库。\n\n*   Cython：优化的 Python 静态编译器。使用类型混合使 Python 编译成 C 或 C++ 模块来获得性能的极大提升。[官网](http://cython.org/)\n*   PeachPy：嵌入 Python 的 x86-64 汇编器。可以被用作 Python 内联的汇编器或者是独立的汇编器，用于 Windows, Linux, OS X, Native Client 或者 Go 。[官网](https://github.com/Maratyszcza/PeachPy)\n*   PyPy：使用 Python 实现的 Python。解释器使用黑魔法加快 Python 运行速度且不需要加入额外的类型信息。[官网](http://pypy.org/)\n*   [Pyston](http://hao.jobbole.com/pyston-llvm-jit/)：使用 LLVM 和现代 JIT 技术构建的 Python 实现，目标是为了获得很好的性能。[官网](https://github.com/dropbox/pyston)\n*   Stackless Python：一个强化版的 Python。[官网](https://bitbucket.org/stackless-dev/stackless/overview)\n\n### 微软的 Windows平台\n\n在 Windows 平台上进行 Python 编程。\n\n*   Python(x,y)：面向科学应用的 Python 发行版，基于 Qt 和 Spyder。[官网](http://python-xy.github.io/)\n*   pythonlibs：非官方的 Windows 平台 Python 扩展二进制包。[官网](http://www.lfd.uci.edu/~gohlke/pythonlibs/)\n*   PythonNet：Python 与 .NET 公共语言运行库 (CLR)的集成。[官网](https://github.com/pythonnet/pythonnet)\n*   PyWin32：针对 Windows 的Python 扩展。[官网](https://sourceforge.net/projects/pywin32/)\n*   WinPython：Windows 7/8 系统下便携式开发环境。[官网](https://winpython.github.io/)\n\n### 网络可视化和SDN\n\n用来进行网络可视化和SDN(软件定义网络)的工具和库。\n\n*   Mininet：一款流行的网络模拟器以及用 Python 编写的 API。[官网](http://mininet.org/)\n*   POX：一个针对基于 Python 的软件定义网络应用（例如 OpenFlow SDN 控制器）的开源开发平台。[官网](https://github.com/noxrepo/pox)\n*   Pyretic：火热的 SDN 编程语言中的一员，为网络交换机和模拟器提供强大的抽象能力。[官网](http://frenetic-lang.org/pyretic/)\n*   SDX Platform：基于 SDN 的 IXP 实现，影响了 Mininet, POX 和 Pyretic。[官网](https://github.com/sdn-ixp/internet2award)\n\n### 硬件\n\n用来对硬件进行编程的库。\n\n*   ino：操作[Arduino](https://www.arduino.cc/)的命令行工具。[官网](http://inotool.org/)\n*   Pyro：Python 机器人编程库。[官网](http://pyrorobotics.com/)\n*   PyUserInput：跨平台的，控制鼠标和键盘的模块。[官网](https://github.com/SavinaRoja/PyUserInput)\n*   scapy：一个非常棒的操作数据包的库。[官网](https://github.com/secdev/scapy)\n*   wifi：一个 Python 库和命令行工具用来在 Linux 平台上操作WiFi。[官网](https://wifi.readthedocs.org/en/latest/)\n*   Pingo：Pingo 为类似Raspberry Pi，pcDuino， Intel Galileo等设备提供统一的API用以编程。[官网](http://www.pingo.io/)\n\n### 兼容性\n\n帮助从 Python 2 向 Python 3迁移的库。\n\n*   Python-Future：这就是 Python 2 和 Python 3 之间丢失的那个兼容性层。[官网](http://python-future.org/index.html)\n*   Python-Modernize：使 Python 代码更加现代化以便最终迁移到 Python 3。[官网](https://github.com/mitsuhiko/python-modernize)\n*   Six：Python 2 和 3 的兼容性工具。[官网](https://pypi.python.org/pypi/six)\n\n### 杂项\n\n不属于上面任何一个类别，但是非常有用的库。\n\n*   blinker：一个快速的 Python 进程内信号/事件分发系统。[官网](https://github.com/jek/blinker)\n*   itsdangerous：一系列辅助工具用来将可信的数据传入不可信的环境。[官网](https://github.com/pallets/itsdangerous)\n*   pluginbase：一个简单但是非常灵活的 Python 插件系统。[官网](https://github.com/mitsuhiko/pluginbase)\n*   Pychievements：一个用来创建和追踪成就的 Python 框架。[官网](https://github.com/PacketPerception/pychievements)\n*   [Tryton](http://hao.jobbole.com/tryton/)：一个通用商务框架。[官网](http://www.tryton.org/)\n\n### 算法和设计模式\n\nPython 实现的算法和设计模式。\n\n*   [algorithms](http://hao.jobbole.com/algorithms/)：一个 Python 算法模块。[官网](https://github.com/nryoung/algorithms)\n*   python-patterns：Python 设计模式的集合。[官网](https://github.com/faif/python-patterns)\n*   sortedcontainers：快速，纯 Python 实现的SortedList，SortedDict 和 SortedSet 类型。[官网](http://www.grantjenks.com/docs/sortedcontainers/)\n\n### 编辑器插件\n\n编辑器和 IDE 的插件\n\n*   Emacs\n    *   Elpy：Emacs Python 开发环境。[官网](https://github.com/jorgenschaefer/elpy)\n*   Sublime Text\n    *   SublimeJEDI：一个 Sublime Text 插件，用来使用超赞的自动补全库 Jedi。[官网](https://github.com/srusskih/SublimeJEDI)\n    *   Anaconda：Anaconda 把你的 Sublime Text 3 变成一个功能齐全的 Python IDE。[官网](https://github.com/DamnWidget/anaconda)\n*   Vim\n    *   [YouCompleteMe](http://hao.jobbole.com/youcompleteme/)：引入基于 [Jedi](https://github.com/davidhalter/jedi) 的 Python 自动补全引擎。[官网](https://github.com/Valloric/YouCompleteMe)\n    *   Jedi-vim：绑定 Vim 和 Jedi 自动补全库对 Python 进行自动补全。[官网](https://github.com/davidhalter/jedi-vim)\n    *   Python-mode：将 Vim 变成 Python IDE 的一款多合一插件。[官网](https://github.com/klen/python-mode)\n*   Visual Studio\n    *   PTVS：Visual Studio 的 Python 工具[官网](https://github.com/Microsoft/PTVS)\n\n### 集成开发环境\n\n流行的 Python 集成开发环境。\n\n*   PyCharm：商业化的 Python IDE ，由 JetBrains 开发。也有免费的社区版提供。[官网](https://www.jetbrains.com/pycharm/)\n*   LiClipse：基于 Eclipse 的免费多语言 IDE 。使用 PyDev 来支持 Python 。[官网](http://www.liclipse.com/)\n*   Spyder：开源 Python IDE。[官网](https://github.com/spyder-ide/spyder)\n\n### 自动聊天工具\n\n用于开发聊天机器人的库\n\n*   Errbot：最简单和最流行的聊天机器人用来实现自动聊天工具。[官网](http://errbot.io/en/latest/)\n\n## 服务\n\n在线工具和简化开发的 API 。\n\n### 持续集成\n\n参见: [awesome-CIandCD](https://github.com/ciandcd/awesome-ciandcd#online-build-system).\n\n*   Travis CI：一个流行的工具，为你的开源和[私人](https://travis-ci.com/)项目提供持续集成服务。(仅支持 GitHub)[官网](https://travis-ci.org/)\n*   CircleCI：一个持续集成工具，可以非常快速的进行并行测试。 (仅支持 GitHub)[官网](https://circleci.com/)\n*   Vexor CI：一个为私人 app 提供持续集成的工具，支持按分钟付费。[官网](https://vexor.io/)\n*   Wercker：基于 Docker 平台，用来构建和部署微服务。[官网](http://wercker.com/)\n\n### 代码质量\n\n*   Codacy：自动化代码审查，更加快速的发布高质量代码。对于开源项目是免费的。[官网](https://www.codacy.com/)\n*   QuantifiedCode：一个数据驱动、自动、持续的代码审查工具。[官网](https://www.quantifiedcode.com/)\n\n## 资源\n\n在这里可以找到新的 Python 库。\n\n### 网站\n\n*   [r/Python](https://www.reddit.com/r/python)\n*   [CoolGithubProjects](https://www.coolgithubprojects.com/)\n*   [Django Packages](https://www.djangopackages.com/)\n*   [Full Stack Python](http://www.fullstackpython.com/)\n*   [Python 3 Wall of Superpowers](http://python3wos.appspot.com/)\n*   [Python Hackers](http://pythonhackers.com/open-source/)\n*   [Python ZEEF](https://python.zeef.com/alan.richmond)\n*   [Trending Python repositories on GitHub today](https://github.com/trending?l=python)\n*   [PyPI Ranking](http://pypi-ranking.info/alltime)\n\n### 周刊\n\n*   [Import Python Newsletter](http://importpython.com/newsletter/)\n*   [Pycoder's Weekly](http://pycoders.com/)\n*   [Python Weekly](http://www.pythonweekly.com/)\n\n### Twitter\n\n*   [@codetengu](https://twitter.com/codetengu)\n*   [@getpy](https://twitter.com/getpy)\n*   [@planetpython](https://twitter.com/planetpython)\n*   [@pycoders](https://twitter.com/pycoders)\n*   [@pypi](https://twitter.com/pypi)\n*   [@pythontrending](https://twitter.com/pythontrending)\n*   [@PythonWeekly](https://twitter.com/PythonWeekly)\n\n### 学习指南\n*   [Scipy-lecture-notes](http://hao.jobbole.com/scipy-lecture-notes/)：如何用Python来做学术？[官网](https://github.com/scipy-lectures/scipy-lecture-notes)\n*   [SScientific-python-lectures](http://hao.jobbole.com/scientific-python-lectures/)：Python科学计算的资料。[官网](https://github.com/jrjohansson/scientific-python-lectures)\n*   [Mario-Level-1](http://hao.jobbole.com/mario-level-1/)：用Python和Pygame写的超级马里奥第一关。[官网](https://github.com/justinmeister/Mario-Level-1)\n*   [Python Koans](http://hao.jobbole.com/python-koans/)：Python的交互式学习工具。[官网](https://github.com/gregmalcolm/python_koans)\n*   [Minecraft](http://hao.jobbole.com/minecraft-python/)：用python写的Minecraft游戏。[官网](https://github.com/fogleman/Minecraft)\n*   [pycrumbs](http://hao.jobbole.com/python-pycrumbs/)：Python资源大全。[官网](https://github.com/kirang89/pycrumbs/blob/master/pycrumbs.md)\n*   [python-patterns](http://hao.jobbole.com/python-patterns/)：使用python实现设计模式。[官网](https://github.com/faif/python-patterns)\n*   [Projects](http://hao.jobbole.com/python-projects/)：Python项目大集合。[官网](https://github.com/karan/Projects)\n*   [The Hitchhiker’s Guide to Python](http://hao.jobbole.com/the-hitchhikers-guide-to-python/)：旅行者的Python学习指南。[官网](http://docs.python-guide.org/en/latest/)\n*\t[Code Like a Pythonista: Idiomatic Python](http://top.jobbole.com/18767/)：如何像Python高手(Pythonista)一样编程。[官网](http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html)\n\n<h3 id=\"websites\">知名网站</h3>\n*值得关注的 Python 技术站点。*\n\n<h4>中文站点</h4>\n\n* 伯乐在线 Python 频道：分享 Python 开发技术、相关的行业动态。[官网](http://python.jobbole.com/)\n\n<h4>英文站点</h4>\n\n* 《[值得关注的 10 个 Python 英文博客](http://python.jobbole.com/81730/)》\n","source":"_posts/awesome-python.md","raw":"---\ntitle: awesome-python\ndate: 2017-02-22 14:26:00\nauthor: \"月牙天冲\"\ntags:\n  - 学习笔记\n  - python\n---\n\n# 写在最前\n\n这是一个笔记，方便自己查询，详情请看原出处[awesome-python-cn](https://github.com/jobbole/awesome-python-cn)\n\n* * *\n\n# Python 资源大全中文版\n\n我想很多程序员应该记得 GitHub 上有一个 Awesome - XXX 系列的资源整理。[awesome-python](https://github.com/vinta/awesome-python) 是 vinta 发起维护的 Python 资源列表，内容包括：Web框架、网络爬虫、网络内容提取、模板引擎、数据库、数据可视化、图片处理、文本处理、自然语言处理、机器学习、日志、代码分析等。由伯乐在线持续更新。\n\nAwesome 系列虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。\n\n* * *\n\n### 我们要做什么？\n\n- 基于 awesome-python 列表，我们将对其中的各个资源项进行编译整理。此外还将从其他来源补充好资源。\n- 整理后的内容，将收录在[伯乐在线资源频道](http://hao.jobbole.com/)。可参考已整理的内容：\n  - 《[Scrapy：Python的爬虫框架](http://hao.jobbole.com/python-scrapy/)》\n  - 《[Flask：一个使用Python编写的轻量级Web应用框架](http://hao.jobbole.com/flask/)》\n\n* * *\n\n### 环境管理\n\n管理 Python 版本和环境的工具\n\n*   p：非常简单的交互式 python 版本管理工具。[官网](https://github.com/qw3rtman/p)\n*   pyenv：简单的 Python 版本管理工具。[官网](https://github.com/yyuu/pyenv)\n*   Vex：可以在虚拟环境中执行命令。[官网](https://github.com/sashahart/vex)\n*   virtualenv：创建独立 Python 环境的工具。[官网](https://pypi.python.org/pypi/virtualenv)\n*   virtualenvwrapper：virtualenv 的一组扩展。[官网](https://pypi.python.org/pypi/virtualenvwrapper)\n\n### 包管理\n\n管理包和依赖的工具。\n\n*   pip：Python 包和依赖关系管理工具。[官网](https://pip.pypa.io/)\n*   pip-tools：保证 Python 包依赖关系更新的一组工具。[官网](https://github.com/nvie/pip-tools)\n*   conda：跨平台，Python 二进制包管理工具。[官网](https://github.com/conda/conda/)\n*   Curdling：管理 Python 包的命令行工具。[官网](http://clarete.li/curdling/)\n*   wheel：Python 分发的新标准，意在取代 eggs。[官网](http://pythonwheels.com/)\n\n### 包仓库\n\n本地 PyPI 仓库服务和代理。\n\n*   warehouse：下一代 PyPI。[官网](https://github.com/pypa/warehouse)\n    *   Warehouse：PyPA 提供的 PyPI 镜像工具。[官网](https://warehouse.python.org/) [bandersnatch](https://bitbucket.org/pypa/bandersnatch)\n*   devpi：PyPI 服务和打包/测试/分发工具。[官网](http://doc.devpi.net/)\n*   localshop：本地 PyPI 服务（自定义包并且自动对 PyPI 镜像）。[官网](https://github.com/mvantellingen/localshop)\n\n### 分发\n\n打包为可执行文件以便分发。\n\n*   PyInstaller：将 Python 程序转换成独立的执行文件（跨平台）。[官网](https://github.com/pyinstaller/pyinstaller)\n*   dh-virtualenv：构建并将 virtualenv 虚拟环境作为一个 Debian 包来发布。[官网](http://dh-virtualenv.readthedocs.org/)\n*   Nuitka：将脚本、模块、包编译成可执行文件或扩展模块。[官网](http://nuitka.net/)\n*   py2app：将 Python 脚本变为独立软件包（Mac OS X）。[官网](http://pythonhosted.org/py2app/)\n*   py2exe：将 Python 脚本变为独立软件包（Windows）。[官网](http://www.py2exe.org/)\n*   pynsist：一个用来创建 Windows 安装程序的工具，可以在安装程序中打包 Python本身。[官网](http://pynsist.readthedocs.org/)\n\n### 构建工具\n\n将源码编译成软件。\n\n*   buildout：一个构建系统，从多个组件来创建，组装和部署应用。[官网](http://www.buildout.org/)\n*   BitBake：针对嵌入式 Linux 的类似 make 的构建工具。[官网](http://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html)\n*   fabricate：对任何语言自动找到依赖关系的构建工具。[官网](https://code.google.com/archive/p/fabricate)\n*   PlatformIO：多平台命令行构建工具。[官网](https://github.com/platformio/platformio)\n*   PyBuilder：纯 Python 实现的持续化构建工具。[官网](https://github.com/pybuilder/pybuilder)\n*   SCons：软件构建工具。[官网](http://www.scons.org/)\n\n### 交互式解析器\n\n交互式 Python 解析器。\n\n*   IPython：功能丰富的工具，非常有效的使用交互式 Python。[官网](https://github.com/ipython/ipython)\n*   [bpython](http://hao.jobbole.com/bpython/)：界面丰富的 Python 解析器。[官网](http://bpython-interpreter.org/)\n*   ptpython：高级交互式Python解析器， 构建于[python-prompt-toolkit](https://github.com/jonathanslenders/python-prompt-toolkit) 之上。[官网](https://github.com/jonathanslenders/ptpython)\n\n### 文件\n\n文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。\n\n*   imghdr：（Python 标准库）检测图片类型。[官网](https://docs.python.org/2/library/imghdr.html)\n*   mimetypes：（Python 标准库）将文件名映射为 MIME 类型。[官网](https://docs.python.org/2/library/mimetypes.html)\n*   path.py：对 os.path 进行封装的模块。[官网](https://github.com/jaraco/path.py)\n*   pathlib：（Python3.4+ 标准库）跨平台的、面向对象的路径操作库。[官网](https://pathlib.readthedocs.org/en/pep428/)\n*   python-magic：文件类型检测的第三方库 libmagic 的 Python 接口。[官网](https://github.com/ahupp/python-magic)\n*   Unipath：用面向对象的方式操作文件和目录。[官网](https://github.com/mikeorr/Unipath)\n*   watchdog：管理文件系统事件的 API 和 shell 工具[官网](https://github.com/gorakhargosh/watchdog)\n\n### 日期和时间\n\n操作日期和时间的类库。\n\n*   arrow：更好的 Python 日期时间操作类库。[官网](https://github.com/crsmithdev/arrow)\n*   Chronyk：Python 3 的类库，用于解析手写格式的时间和日期。[官网](https://github.com/KoffeinFlummi/Chronyk)\n*   dateutil：Python datetime 模块的扩展。[官网](https://pypi.python.org/pypi/python-dateutil)\n*   delorean：解决 Python 中有关日期处理的棘手问题的库。[官网](https://github.com/myusuf3/delorean/)\n*   moment：一个用来处理时间和日期的Python库。灵感来自于Moment.js。[官网](https://github.com/zachwill/moment)\n*   PyTime：一个简单易用的Python模块，用于通过字符串来操作日期/时间。[官网](https://github.com/shinux/PyTime)\n*   pytz：现代以及历史版本的世界时区定义。将时区数据库引入Python。[官网](https://launchpad.net/pytz)\n*   when.py：提供用户友好的函数来帮助用户进行常用的日期和时间操作。[官网](https://github.com/dirn/When.py)\n\n### 文本处理\n\n用于解析和操作文本的库。\n\n*   通用\n    *   [chardet](http://hao.jobbole.com/chardet/)：字符编码检测器，兼容 Python2 和 Python3。[官网](https://github.com/chardet/chardet)\n    *   difflib：(Python 标准库)帮助我们进行差异化比较。[官网](https://docs.python.org/2/library/difflib.html)\n    *   ftfy：让Unicode文本更完整更连贯。[官网](https://github.com/LuminosoInsight/python-ftfy)\n    *   fuzzywuzzy：模糊字符串匹配。[官网](https://github.com/seatgeek/fuzzywuzzy)\n    *   Levenshtein：快速计算编辑距离以及字符串的相似度。[官网](https://github.com/ztane/python-Levenshtein/)\n    *   pangu.py：在中日韩语字符和数字字母之间添加空格。[官网](https://github.com/vinta/pangu.py)\n    *   yfiglet-figlet：[pyfiglet -figlet](https://github.com/pwaller/pyfiglet) 的 Python实现。\n    *   shortuuid：一个生成器库，用以生成简洁的，明白的，URL 安全的 UUID。[官网](https://github.com/stochastic-technologies/shortuuid)\n    *   unidecode：Unicode 文本的 ASCII 转换形式 。[官网](https://pypi.python.org/pypi/Unidecode)\n    *   uniout：打印可读的字符，而不是转义的字符串。[官网](https://github.com/moskytw/uniout)\n    *   xpinyin：一个用于把汉字转换为拼音的库。[官网](https://github.com/lxneng/xpinyin)\n    *   simplejson：Python的JSON编码、解码器。[官网](https://simplejson.readthedocs.io/en/latest/)、[GitHub](https://github.com/simplejson/simplejson)\n*   Slug化\n    *   awesome-slugify：一个 Python slug 化库，可以保持 Unicode。[官网](https://github.com/dimka665/awesome-slugify)\n    *   python-slugify：Python slug 化库，可以把 unicode 转化为 ASCII。[官网](https://github.com/un33k/python-slugify)\n    *   unicode-slugify：一个 slug 工具，可以生成 unicode slugs ,需要依赖 Django 。[官网](https://github.com/mozilla/unicode-slugify)\n*   解析器\n    *   phonenumbers：解析，格式化，储存，验证电话号码。[官网](https://github.com/daviddrysdale/python-phonenumbers)\n    *   PLY：lex 和 yacc 解析工具的 Python 实现。[官网](http://www.dabeaz.com/ply/)\n    *   Pygments：通用语法高亮工具。[官网](http://pygments.org/)\n    *   pyparsing：生成通用解析器的框架。[官网](http://pyparsing.wikispaces.com/)\n    *   python-nameparser：把一个人名分解为几个独立的部分。[官网](https://github.com/derek73/python-nameparser)\n    *   python-user-agents：浏览器 user agent 解析器。[官网](https://github.com/selwin/python-user-agents)\n    *   sqlparse：一个无验证的 SQL 解析器。[官网](https://sqlparse.readthedocs.org/en/latest/)\n\n### 特殊文本格式处理\n\n一些用来解析和操作特殊文本格式的库。\n\n*   通用\n    *   tablib：一个用来处理中表格数据的模块。[官网](https://github.com/kennethreitz/tablib)\n*   Office\n    *   Marmir：把输入的Python 数据结构转换为电子表单。[官网](https://github.com/brianray/mm)\n    *   openpyxl：一个用来读写 Excel 2010 xlsx/xlsm/xltx/xltm 文件的库。[官网](https://openpyxl.readthedocs.org/en/latest/)\n    *   python-docx：读取，查询以及修改 Microsoft Word 2007/2008 docx 文件。[官网](https://github.com/python-openxml/python-docx)\n    *   unoconv：在 LibreOffice/OpenOffice 支持的任意文件格式之间进行转换。[官网](https://github.com/dagwieers/unoconv)\n    *   XlsxWriter：一个用于创建 Excel .xlsx 文件的 Python 模块。[官网](https://xlsxwriter.readthedocs.org/en/latest/)\n    *   xlwings：一个使得在 Excel 中方便调用 Python 的库（反之亦然），基于 BSD 协议。[官网](http://xlwings.org/)\n    *   [xlwt](http://hao.jobbole.com/xlwt/)：读写 Excel 文件的数据和格式信息。[官网](https://github.com/python-excel/xlwt) / [xlrd](https://github.com/python-excel/xlrd)\n    *   relatorio：模板化OpenDocument 文件。[官网](http://relatorio.tryton.org/)\n*   PDF\n    *   PDFMiner：一个用于从PDF文档中抽取信息的工具。[官网](https://github.com/euske/pdfminer)\n    *   PyPDF2：一个可以分割，合并和转换 PDF 页面的库。[官网](https://github.com/mstamy2/PyPDF2)\n    *   ReportLab：快速创建富文本 PDF 文档。[官网](http://www.reportlab.com/opensource/)\n*   Markdown\n    *   Mistune：快速并且功能齐全的纯 Python 实现的 Markdown 解析器。[官网](https://github.com/lepture/mistune)\n    *   Python-Markdown：John Gruber’s Markdown 的 Python 版实现。[官网](https://github.com/waylan/Python-Markdown)\n    *   Python-Markdiwn2：纯 Python 实现的 Markdown 解析器，比 Python-Markdown 更快，更准确，可扩展。[官网](https://github.com/trentm/python-markdown2)\n*   YAML\n    *   PyYAML：Python 版本的 YAML 解析器。[官网](http://pyyaml.org/)\n*   CSV\n    *   csvkit：用于转换和操作 CSV 的工具。[官网](https://github.com/wireservice/csvkit)\n*   Archive\n    *   unp：一个用来方便解包归档文件的命令行工具。[官网](https://github.com/mitsuhiko/unp)\n\n### 自然语言处理\n\n用来处理人类语言的库。\n\n*   [NLTK](http://hao.jobbole.com/nltk/)：一个先进的平台，用以构建处理人类语言数据的 Python 程序。[官网](http://www.nltk.org/)\n*   jieba：中文分词工具。[官网](https://github.com/fxsjy/jieba)\n*   langid.py：独立的语言识别系统。[官网](https://github.com/saffsd/langid.py)\n*   Pattern：Python 网络信息挖掘模块。[官网](http://www.clips.ua.ac.be/pattern)\n*   SnowNLP：一个用来处理中文文本的库。[官网](https://github.com/isnowfy/snownlp)\n*   TextBlob：为进行普通自然语言处理任务提供一致的 API。[官网](http://textblob.readthedocs.org/en/latest/)\n*   TextGrocery：一简单高效的短文本分类工具，基于 LibLinear 和 Jieba。[官网](https://github.com/2shou/TextGrocery)\n\n### 文档\n\n用以生成项目文档的库。\n\n*   [Sphinx](http://hao.jobbole.com/sphinx/)：Python 文档生成器。[官网](http://www.sphinx-doc.org/en/latest/)\n    *   awesome-sphinxdoc：[官网](https://github.com/yoloseem/awesome-sphinxdoc)\n*   MkDocs：对 Markdown 友好的文档生成器。[官网](http://www.mkdocs.org/)\n*   pdoc：一个可以替换Epydoc 的库，可以自动生成 Python 库的 API 文档。[官网](https://github.com/BurntSushi/pdoc)\n*   Pycco：文学编程（literate-programming）风格的文档生成器。[官网](https://github.com/pycco-docs/pycco)\n\n### 配置\n\n用来保存和解析配置的库。\n\n*   config：[logging](https://docs.python.org/2/library/logging.html) 模块作者写的分级配置模块。[官网](https://www.red-dove.com/config-doc/)\n*   ConfigObj：INI 文件解析器，带验证功能。[官网](http://www.voidspace.org.uk/python/configobj.html)\n*   ConfigParser：(Python 标准库) INI 文件解析器。[官网](https://docs.python.org/2/library/configparser.html)\n*   profig：通过多种格式进行配置，具有数值转换功能。[官网](http://profig.readthedocs.org/en/default/)\n*   python-decouple：将设置和代码完全隔离。[官网](https://github.com/henriquebastos/python-decouple)\n\n### 命令行工具\n\n用于创建命令行程序的库。\n\n*   命令行程序开发\n    *   asciimatics：跨平台，全屏终端包（即鼠标/键盘输入和彩色，定位文本输出），完整的复杂动画和特殊效果的高级API。[官网](https://github.com/peterbrittain/asciimatics)\n    *   cement：Python 的命令行程序框架。[官网](http://builtoncement.com/)\n    *   click：一个通过组合的方式来创建精美命令行界面的包。[官网](http://click.pocoo.org/dev/)\n    *   cliff：一个用于创建命令行程序的框架，可以创建具有多层命令的命令行程序。[官网](http://docs.openstack.org/developer/cliff/)\n    *   clint：Python 命令行程序工具。[官网](https://github.com/kennethreitz/clint)\n    *   colorama：跨平台彩色终端文本。[官网](https://pypi.python.org/pypi/colorama)\n    *   docopt：Python 风格的命令行参数解析器。[官网](http://docopt.org/)\n    *   Gooey：一条命令，将命令行程序变成一个 GUI 程序。[官网](https://github.com/chriskiehl/Gooey)\n    *   python-prompt-toolkit：一个用于构建强大的交互式命令行程序的库。[官网](https://github.com/jonathanslenders/python-prompt-toolkit)\n    *   [Pythonpy](http://hao.jobbole.com/pythonpy/)：在命令行中直接执行任何Python指令。[官网](https://github.com/Russell91/pythonpy/wiki)\n*   生产力工具\n    *   aws-cli：Amazon Web Services 的通用命令行界面。[官网](https://github.com/aws/aws-cli)\n    *   bashplotlib：在终端中进行基本绘图。[官网](https://github.com/glamp/bashplotlib)\n    *   caniusepython3：判断是哪个项目妨碍你你移植到 Python 3。[官网](https://github.com/brettcannon/caniusepython3)\n    *   cookiecutter：从 cookiecutters（项目模板）创建项目的一个命令行工具。[官网](https://github.com/audreyr/cookiecutter)\n    *   doitlive：一个用来在终端中进行现场演示的工具。[官网](https://github.com/sloria/doitlive)\n    *   howdoi：通过命令行获取即时的编程问题解答。[官网](https://github.com/gleitz/howdoi)\n    *   httpie：一个命令行HTTP 客户端，cURL 的替代品，易用性更好。[官网](https://github.com/jkbrzt/httpie)\n    *   PathPicker：从bash输出中选出文件。[官网](https://github.com/facebook/PathPicker)\n    *   percol：向UNIX shell 传统管道概念中加入交互式选择功能。[官网](https://github.com/mooz/percol)\n    *   SAWS：一个加强版的 AWS 命令行。[官网](https://github.com/donnemartin/saws)\n    *   thefuck：修正你之前的命令行指令。[官网](https://github.com/nvbn/thefuck)\n    *   mycli：一个 MySQL 命令行客户端，具有自动补全和语法高亮功能。[官网](https://github.com/dbcli/mycli)\n    *   pgcli：Postgres 命令行工具，具有自动补全和语法高亮功能。[官网](https://github.com/dbcli/pgcli)\n    *   try：一个从来没有更简单的命令行工具，用来试用python库。[官网](https://github.com/timofurrer/try)\n\n### 下载器\n\n用来进行下载的库.\n\n*   s3cmd：一个用来管理Amazon S3 和 CloudFront 的命令行工具。[官网](https://github.com/s3tools/s3cmd)\n*   s4cmd：超级 S3 命令行工具，性能更加强劲。[官网](https://github.com/bloomreach/s4cmd)\n*   you-get：一个 YouTube/Youku/Niconico 视频下载器，使用 Python3 编写。[官网](https://www.soimort.org/you-get/)\n*   youtube-dl：一个小巧的命令行程序，用来下载 YouTube 视频。[官网](http://rg3.github.io/youtube-dl/)\n\n### 图像处理\n\n用来操作图像的库.\n\n*   [pillow](http://hao.jobbole.com/pillow/)：Pillow 是一个更加易用版的 [PIL](http://www.pythonware.com/products/pil/)。[官网](http://pillow.readthedocs.org/en/latest/)\n*   hmap：图像直方图映射。[官网](https://github.com/rossgoodwin/hmap)\n*   imgSeek：一个使用视觉相似性搜索一组图片集合的项目。[官网](https://sourceforge.net/projects/imgseek/)\n*   nude.py：裸体检测。[官网](https://github.com/hhatto/nude.py)\n*   pyBarcode：不借助 PIL 库在 Python 程序中生成条形码。[官网](https://pythonhosted.org/pyBarcode/)\n*   pygram：类似 Instagram 的图像滤镜。[官网](https://github.com/ajkumar25/pygram)\n*   python-qrcode：一个纯 Python 实现的二维码生成器。[官网](https://github.com/lincolnloop/python-qrcode)\n*   Quads：基于四叉树的计算机艺术。[官网](https://github.com/fogleman/Quads)\n*   scikit-image：一个用于（科学）图像处理的 Python 库。[官网](http://scikit-image.org/)\n*   thumbor：一个小型图像服务，具有剪裁，尺寸重设和翻转功能。[官网](https://github.com/thumbor/thumbor)\n*   wand：[MagickWand](http://www.imagemagick.org/script/magick-wand.php)的Python 绑定。MagickWand 是 ImageMagick的 C API 。[官网](https://github.com/dahlia/wand)\n\n### OCR\n\n光学字符识别库。\n\n*   pyocr：Tesseract 和 Cuneiform 的一个封装(wrapper)。[官网](https://github.com/jflesch/pyocr)\n*   [pytesseract](http://hao.jobbole.com/pytesseract/)：[Google Tesseract OCR](https://github.com/tesseract-ocr) 的另一个封装(wrapper)。[官网](https://github.com/madmaze/pytesseract)\n*   python-tesseract - [Google Tesseract OCR](https://github.com/tesseract-ocr) 的一个包装类。\n\n### 音频\n\n用来操作音频的库\n\n*   audiolazy：Python 的数字信号处理包。[官网](https://github.com/danilobellini/audiolazy)\n*   audioread：交叉库 (GStreamer + Core Audio + MAD + FFmpeg) 音频解码。[官网](https://github.com/beetbox/audioread)\n*   beets：一个音乐库管理工具及 [MusicBrainz](https://musicbrainz.org/) 标签添加工具[官网](http://beets.io/)\n*   dejavu：音频指纹提取和识别[官网](https://github.com/worldveil/dejavu)\n*   [django-elastic-transcoder](http://hao.jobbole.com/django-elastic-transcoder/)：Django + [Amazon Elastic Transcoder](http://aws.amazon.com/elastictranscoder/)。[官网](https://github.com/StreetVoice/django-elastic-transcoder)\n*   eyeD3：一个用来操作音频文件的工具，具体来讲就是包含 ID3 元信息的 MP3 文件。[官网](http://eyed3.nicfit.net/)\n*   id3reader：一个用来读取 MP3 元数据的 Python 模块。[官网](http://nedbatchelder.com/code/modules/id3reader.py)\n*   m3u8：一个用来解析 m3u8 文件的模块。[官网](https://github.com/globocom/m3u8)\n*   mutagen：一个用来处理音频元数据的 Python 模块。[官网](https://bitbucket.org/lazka/mutagen)\n*   pydub：通过简单、简洁的高层接口来操作音频文件。[官网](https://github.com/jiaaro/pydub)\n*   pyechonest：[Echo Nest](http://developer.echonest.com/) API 的 Python 客户端[官网](https://github.com/echonest/pyechonest)\n*   talkbox：一个用来处理演讲/信号的 Python 库[官网](http://scikits.appspot.com/talkbox)\n*   TimeSide：开源 web 音频处理框架。[官网](https://github.com/Parisson/TimeSide)\n*   tinytag：一个用来读取MP3, OGG, FLAC 以及 Wave 文件音乐元数据的库。[官网](https://github.com/devsnd/tinytag)\n*   mingus：一个高级音乐理论和曲谱包，支持 MIDI 文件和回放功能。[官网](http://bspaans.github.io/python-mingus/)\n\n### Video\n\n用来操作视频和GIF的库。\n\n*   moviepy：一个用来进行基于脚本的视频编辑模块，适用于多种格式，包括动图 GIFs。[官网](http://zulko.github.io/moviepy/)\n*   scikit-video：SciPy 视频处理常用程序。[官网](https://github.com/aizvorski/scikit-video)\n\n### 地理位置\n\n地理编码地址以及用来处理经纬度的库。\n\n*   GeoDjango：世界级地理图形 web 框架。[官网](https://docs.djangoproject.com/en/dev/ref/contrib/gis/)\n*   GeoIP：MaxMind GeoIP Legacy 数据库的 Python API。[官网](https://github.com/maxmind/geoip-api-python)\n*   geojson：GeoJSON 的 Python 绑定及工具。[官网](https://github.com/frewsxcv/python-geojson)\n*   geopy：Python 地址编码工具箱。[官网](https://github.com/geopy/geopy)\n*   pygeoip：纯 Python GeoIP API。[官网](https://github.com/appliedsec/pygeoip)\n*   django-countries：一个 Django 应用程序，提供用于表格的国家选择功能，国旗图标静态文件以及模型中的国家字段。[官网](https://github.com/SmileyChris/django-countries)\n\n### HTTP\n\n使用HTTP的库。\n\n*   requests：人性化的HTTP请求库。[官网](http://docs.python-requests.org/en/latest/)\n*   grequests：requests 库 + gevent ，用于异步 HTTP 请求.[官网](https://github.com/kennethreitz/grequests)\n*   httplib2：全面的 HTTP 客户端库。[官网](https://github.com/jcgregorio/httplib2)\n*   treq：类似 requests 的Python API 构建于 Twisted HTTP 客户端之上。[官网](https://github.com/twisted/treq)\n*   urllib3：一个具有线程安全连接池，支持文件 post，清晰友好的 HTTP 库。[官网](https://github.com/shazow/urllib3)\n\n### 数据库\n\nPython实现的数据库。\n\n*   pickleDB：一个简单，轻量级键值储存数据库。[官网](https://pythonhosted.org/pickleDB/)\n*   PipelineDB：流式 SQL 数据库。[官网](https://www.pipelinedb.com/)\n*   TinyDB：一个微型的，面向文档型数据库。[官网](https://github.com/msiemens/tinydb)\n*   ZODB：一个 Python 原生对象数据库。一个键值和对象图数据库。[官网](http://www.zodb.org/en/latest/)\n\n### 数据库驱动\n\n用来连接和操作数据库的库。\n\n*   MySQL：[awesome-mysql](http://shlomi-noach.github.io/awesome-mysql/)系列\n    *   mysql-python：Python 的 MySQL 数据库连接器。[官网](https://sourceforge.net/projects/mysql-python/)\n    *   ysqlclient：[mysql-python](https://github.com/PyMySQL/mysqlclient-python) 分支，支持 Python 3。\n    *   oursql：一个更好的 MySQL 连接器，支持原生预编译指令和 BLOBs.[官网](https://pythonhosted.org/oursql/)\n    *   PyMySQL：纯 Python MySQL 驱动，兼容 mysql-python。[官网](https://github.com/PyMySQL/PyMySQL)\n*   PostgreSQL\n    *   psycopg2：Python 中最流行的 PostgreSQL 适配器。[官网](http://initd.org/psycopg/)\n    *   queries：psycopg2 库的封装，用来和 PostgreSQL 进行交互。[官网](https://github.com/gmr/queries)\n    *   txpostgres：基于 Twisted 的异步 PostgreSQL 驱动。[官网](http://txpostgres.readthedocs.org/en/latest/)\n*   其他关系型数据库\n    *   apsw：另一个 Python SQLite封装。[官网](http://rogerbinns.github.io/apsw/)\n    *   dataset：在数据库中存储Python字典\n    *   pymssql：一个简单的Microsoft SQL Server数据库接口。[官网](http://www.pymssql.org/en/latest/)\n*   NoSQL 数据库\n    *   cassandra-python-driver：Cassandra 的 Python 驱动。[官网](https://github.com/datastax/python-driver)\n    *   HappyBase：一个为 Apache HBase 设计的，对开发者友好的库。[官网](http://happybase.readthedocs.org/en/latest/)\n    *   Plyvel：一个快速且功能丰富的 LevelDB 的 Python 接口。[官网](https://plyvel.readthedocs.org/en/latest/)\n    *   py2neo：Neo4j restful 接口的Python 封装客户端。[官网](http://py2neo.org/2.0/)\n    *   pycassa：Cassandra 的 Python Thrift 驱动。[官网](https://github.com/pycassa/pycassa)\n    *   PyMongo：MongoDB 的官方 Python 客户端。[官网](https://docs.mongodb.org/ecosystem/drivers/python/)\n    *   redis-py：Redis 的 Python 客户端。[官网](https://github.com/andymccurdy/redis-py)\n    *   telephus：基于 Twisted 的 Cassandra 客户端。[官网](https://github.com/driftx/Telephus)\n    *   txRedis：基于 Twisted 的 Redis 客户端。[官网](https://github.com/deldotdr/txRedis)\n\n### ORM\n\n实现对象关系映射或数据映射技术的库。\n\n*   关系型数据库\n    *   Django Models：Django 的一部分。[官网](https://docs.djangoproject.com/en/dev/topics/db/models/)\n    *   SQLAlchemy：Python SQL 工具以及对象关系映射工具。[官网](http://www.sqlalchemy.org/)\n        *   [awesome-sqlalchemy](https://github.com/dahlia/awesome-sqlalchemy)系列\n    *   [Peewee](http://hao.jobbole.com/peewee/)：一个小巧，富有表达力的 ORM。[官网](https://github.com/coleifer/peewee)\n    *   PonyORM：提供面向生成器的 SQL 接口的 ORM。[官网](https://ponyorm.com/)\n    *   python-sql：编写 Python 风格的 SQL 查询。[官网](https://pypi.python.org/pypi/python-sql)\n*   NoSQL 数据库\n    *   django-mongodb-engine：Django MongoDB 后端。[官网](https://github.com/django-nonrel/mongodb-engine)\n    *   PynamoDB：[Amazon DynamoDB](https://aws.amazon.com/dynamodb/) 的一个 Python 风格接口。[官网](https://github.com/jlafon/PynamoDB)\n    *   flywheel：Amazon DynamoDB 的对象映射工具。[官网](https://github.com/mathcamp/flywheel)\n    *   MongoEngine：一个Python 对象文档映射工具，用于 MongoDB。[官网](http://mongoengine.org/)\n    *   hot-redis：为 Redis 提供 Python 丰富的数据类型。[官网](https://github.com/stephenmcd/hot-redis)\n    *   redisco：一个 Python 库，提供可以持续存在在 Redis 中的简单模型和容器。[官网](https://github.com/kiddouk/redisco)\n*   其他\n    *   butterdb：Google Drive 电子表格的 Python ORM。[官网](https://github.com/Widdershin/butterdb)\n\n### Web 框架\n\n全栈 Web 框架。\n\n*   [Django](http://hao.jobbole.com/django/)：Python 界最流行的 web 框架。[官网](https://www.djangoproject.com/)\n    *   [awesome-django](https://github.com/rosarior/awesome-django)系列\n*   [Flask](http://hao.jobbole.com/flask/)：一个 Python 微型框架。[官网](http://flask.pocoo.org/)\n    *   [awesome-flask](https://github.com/humiaozuzu/awesome-flask)系列\n*   pyramid：一个小巧，快速，接地气的开源Python web 框架。\n    *   [awesome-pyramid](https://github.com/uralbash/awesome-pyramid)系列\n*   [Bottle](http://hao.jobbole.com/bottle/)：一个快速小巧，轻量级的 WSGI 微型 web 框架。[官网](http://bottlepy.org/docs/dev/index.html)\n*   CherryPy：一个极简的 Python web 框架，服从 HTTP/1.1 协议且具有WSGI 线程池。[官网](http://www.cherrypy.org/)\n*   TurboGears：一个可以扩展为全栈解决方案的微型框架。[官网](http://www.turbogears.org/)\n*   [web.py](http://hao.jobbole.com/python-webpy/)：一个 Python 的 web 框架，既简单，又强大。[官网](http://webpy.org/)\n*   web2py：一个全栈 web 框架和平台，专注于简单易用。[官网](http://www.web2py.com/)\n*   [Tornado](http://hao.jobbole.com/tornado/)：一个web 框架和异步网络库。[官网](http://www.tornadoweb.org/en/latest/)\n\n### 权限\n\n允许或拒绝用户访问数据或功能的库。\n\n*   Carteblanche：Module to align code with thoughts of users and designers. Also magically handles navigation and permissions.[官网](https://github.com/neuman/python-carteblanche/)\n*   django-guardian：Django 1.2+ 实现了单个对象权限。[官网](https://github.com/django-guardian/django-guardian)\n*   django-rules：一个小巧但是强大的应用，提供对象级别的权限管理，且不需要使用数据库。[官网](https://github.com/dfunckt/django-rules)\n\n### CMS\n\n内容管理系统\n\n*   odoo-cms: 一个开源的，企业级 CMS，基于odoo。[官网](http://www.odoo.com)\n*   django-cms：一个开源的，企业级 CMS，基于 Django。[官网](http://www.django-cms.org/en/)\n*   djedi-cms：一个轻量级但却非常强大的 Django CMS ，考虑到了插件，内联编辑以及性能。[官网](http://djedi-cms.org/)\n*   FeinCMS：基于 Django 构建的最先进的内容管理系统之一。[官网](http://www.feincms.org/)\n*   Kotti：一个高级的，Python 范的 web 应用框架，基于 Pyramid 构建。[官网](http://kotti.pylonsproject.org/)\n*   Mezzanine：一个强大的，持续的，灵活的内容管理平台。[官网](http://mezzanine.jupo.org/)\n*   Opps：一个为杂志，报纸网站以及大流量门户网站设计的 CMS 平台，基于 Django。[官网](http://opps.github.io/opps/)\n*   Plone：一个构建于开源应用服务器 Zope 之上的 CMS。[官网](https://plone.org/)\n*   Quokka：灵活，可扩展的小型 CMS，基于 Flask 和 MongoDB。[官网](http://quokkaproject.org/)\n*   [Wagtail](http://hao.jobbole.com/wagtail/)：一个 Django 内容管理系统。[官网](https://wagtail.io/)\n*   Widgy：最新的 CMS 框架，基于 Django。[官网](https://wid.gy/)\n\n### 电子商务\n\n用于电子商务以及支付的框架和库。\n\n*   django-oscar：一个用于 Django 的开源的电子商务框架。[官网](http://oscarcommerce.com/)\n*   django-shop：一个基于 Django 的店铺系统。[官网](https://github.com/awesto/django-shop)\n*   Cartridge：一个基于 Mezzanine 构建的购物车应用。[官网](https://github.com/stephenmcd/cartridge)\n*   shoop：一个基于 Django 的开源电子商务平台。[官网](https://www.shoop.io/en/)\n*   alipay：非官方的 Python 支付宝 API。[官网](https://github.com/lxneng/alipay)\n*   merchant：一个可以接收来自多种支付平台支付的 Django 应用。[官网](https://github.com/agiliq/merchant)\n*   money：货币类库with optional CLDR-backed locale-aware formatting and an extensible currency exchange solution.[官网](https://github.com/carlospalol/money)\n*   python-currencies：显示货币格式以及它的数值。[官网](https://github.com/Alir3z4/python-currencies)\n\n### RESTful API\n\n用来开发RESTful APIs的库\n\n*   Django\n    *   [django-rest-framework](http://hao.jobbole.com/django-rest-framework/)：一个强大灵活的工具，用来构建 web API。[官网](http://www.django-rest-framework.org/)\n    *   django-tastypie：为Django 应用开发API。[官网](http://tastypieapi.org/)\n    *   django-formapi：为 Django 的表单验证，创建 JSON APIs 。[官网](https://github.com/5monkeys/django-formapi)\n*   Flask\n    *   flask-api：为 flask 开发的，可浏览 Web APIs 。[官网](http://www.flaskapi.org/)\n    *   flask-restful：为 flask 快速创建REST APIs 。[官网](http://flask-restful.readthedocs.org/en/latest/)\n    *   flask-restless：为 SQLAlchemy 定义的数据库模型创建 RESTful APIs 。[官网](https://flask-restless.readthedocs.org/en/latest/)\n    *   flask-api-utils：为 Flask 处理 API 表示和验证。[官网](https://github.com/marselester/flask-api-utils)\n    *   eve：REST API 框架，由 Flask, MongoDB 等驱动。[官网](https://github.com/nicolaiarocci/eve)\n*   Pyramid\n    *   cornice：一个Pyramid 的 REST 框架 。[官网](https://cornice.readthedocs.org/en/latest/)\n*   与框架无关的\n    *   falcon：一个用来建立云 API 和 web app 后端的高性能框架。[官网](http://falconframework.org/)\n    *   sandman：为现存的数据库驱动系统自动创建 REST APIs 。[官网](https://github.com/jeffknupp/sandman)\n    *   restless：框架无关的 REST 框架 ，基于从 Tastypie 学到的知识。[官网](http://restless.readthedocs.org/en/latest/)\n    *   ripozo：快速创建 REST/HATEOAS/Hypermedia APIs。[官网](https://github.com/vertical-knowledge/ripozo)\n\n### 验证\n\n实现验证方案的库。\n\n*   OAuth\n    *   Authomatic：简单但是强大的框架，身份验证/授权客户端。[官网](http://peterhudec.github.io/authomatic/)\n    *   django-allauth：Django 的验证应用。[官网](https://github.com/pennersr/django-allauth)\n    *   django-oauth-toolkit：为 Django 用户准备的 OAuth2。[官网](https://github.com/evonove/django-oauth-toolkit)\n    *   django-oauth2-provider：为 Django 应用提供 OAuth2 接入。[官网](https://github.com/caffeinehit/django-oauth2-provider)\n    *   Flask-OAuthlib：OAuth 1.0/a, 2.0 客户端实现，供 Flask 使用。[官网](https://github.com/lepture/flask-oauthlib)\n    *   OAuthLib：一个 OAuth 请求-签名逻辑通用、 完整的实现。[官网](https://github.com/idan/oauthlib)\n    *   python-oauth2：一个完全测试的抽象接口。用来创建 OAuth 客户端和服务端。[官网](https://github.com/joestump/python-oauth2)\n    *   python-social-auth：一个设置简单的社会化验证方式。[官网](https://github.com/omab/python-social-auth)\n    *   rauth：OAuth 1.0/a, 2.0, 和 Ofly 的 Python 库。[官网](https://github.com/litl/rauth)\n    *   sanction：一个超级简单的OAuth2 客户端实现。[官网](https://github.com/demianbrecht/sanction)\n*   其他\n    *   jose：JavaScript 对象签名和加密草案的实现。[官网](https://github.com/demonware/jose)\n    *   PyJWT：JSON Web 令牌草案 01。[官网](https://github.com/jpadilla/pyjwt)\n    *   python-jws：JSON Web 签名草案 02 的实现。[官网](https://github.com/brianloveswords/python-jws)\n    *   python-jwt：一个用来生成和验证 JSON Web 令牌的模块。[官网](https://github.com/davedoesdev/python-jwt)\n\n### 模板引擎\n\n模板生成和词法解析的库和工具。\n\n*   [Jinja2](http://hao.jobbole.com/jinja2/)：一个现代的，对设计师友好的模板引擎。[官网](https://github.com/pallets/jinja)\n*   Chameleon：一个 HTML/XML 模板引擎。 模仿了 ZPT（Zope Page Templates）, 进行了速度上的优化。[官网](https://chameleon.readthedocs.org/en/latest/)\n*   Genshi：Python 模板工具，用以生成 web 感知的结果。[官网](https://genshi.edgewall.org/)\n*   Mako：Python 平台的超高速轻量级模板。[官网](http://www.makotemplates.org/)\n\n### Queue\n\n处理事件以及任务队列的库。\n\n*   celery：一个异步任务队列/作业队列，基于分布式消息传递。[官网](http://www.celeryproject.org/)\n*   huey：小型多线程任务队列。[官网](https://github.com/coleifer/huey)\n*   [mrq](http://hao.jobbole.com/mrq/)：Mr. Queue -一个 Python 的分布式 worker 任务队列， 使用 Redis 和 gevent。[官网](https://github.com/pricingassistant/mrq)\n*   rq：简单的 Python 作业队列。[官网](http://python-rq.org/)\n*   simpleq：一个简单的，可无限扩张的，基于亚马逊 SQS 的队列。[官网](https://github.com/rdegges/simpleq)\n\n### 搜索\n\n对数据进行索引和执行搜索查询的库和软件。\n\n*   django-haystack：Django 模块化搜索。[官网](https://github.com/django-haystack/django-haystack)\n*   elasticsearch-py：Elasticsearch 的官方底层 Python 客户端。[官网](https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html)\n*   elasticsearch-dsl-py：Elasticsearch 的官方高级 Python 客户端。[官网](https://github.com/elastic/elasticsearch-dsl-py)\n*   solrpy：[solr](http://lucene.apache.org/solr/)的 Python 客户端。[官网](https://github.com/edsu/solrpy)\n*   Whoosh：一个快速的纯 Python 搜索引擎库。[官网](http://whoosh.readthedocs.org/en/latest/)\n\n### 动态消息\n\n用来创建用户活动的库。\n\n*   django-activity-stream：从你的站点行为中生成通用活动信息流。[官网](https://github.com/justquick/django-activity-stream)\n*   Stream-Framework：使用 Cassandra 和 Redis 创建动态消息和通知系统。[官网](https://github.com/tschellenbach/Stream-Framework)\n\n### 资源管理\n\n管理、压缩、缩小网站资源的工具。\n\n*   django-compressor：将链接和内联的 JavaScript 或 CSS 压缩到一个单独的缓存文件中。[官网](https://github.com/django-compressor/django-compressor)\n*   django-storages：一个针对 Django 的自定义存储后端的工具集合。[官网](http://django-storages.readthedocs.org/en/latest/)\n*   fanstatic：打包、优化，并且把静态文件依赖作为 Python 的包来提供。[官网](http://www.fanstatic.org/en/latest/)\n*   File Conveyor：一个后台驻留的程序，用来发现和同步文件到 CDNs, S3 和 FTP。[官网](http://fileconveyor.org/)\n*   Flask-Assets：帮你将 web 资源整合到你的 Flask app 中。[官网](http://flask-assets.readthedocs.org/en/latest/)\n*   jinja-assets-compressor：一个 Jinja 扩展，用来编译和压缩你的资源。[官网](https://github.com/jaysonsantos/jinja-assets-compressor)\n*   webassets：为你的静态资源打包、优化和管理生成独一无二的缓存 URL。[官网](http://webassets.readthedocs.org/en/latest/)\n\n### 缓存\n\n缓存数据的库。\n\n*   Beaker：一个缓存和会话库，可以用在 web 应用和独立 Python脚本和应用上。[官网](http://beaker.readthedocs.org/en/latest/)\n*   django-cache-machine：Django 模型的自动缓存和失效。[官网](https://github.com/django-cache-machine/django-cache-machine)\n*   django-cacheops：具有自动颗粒化事件驱动失效功能的 ORM。[官网](https://github.com/Suor/django-cacheops)\n*   django-viewlet：渲染模板，同时具有额外的缓存控制功能。[官网](https://github.com/5monkeys/django-viewlet)\n*   dogpile.cache：dogpile.cache 是 Beaker 的下一代替代品，由同一作者开发。[官网](http://dogpilecache.readthedocs.org/en/latest/)\n*   HermesCache：Python 缓存库，具有基于标签的失效和 dogpile effect 保护功能。[官网](https://pypi.python.org/pypi/HermesCache)\n*   johnny-cache：django应用缓存框架。[官网](https://github.com/jmoiron/johnny-cache)\n*   pylibmc：[libmemcached](http://libmemcached.org/libMemcached.html) 接口的 Python 封装。[官网](https://github.com/lericson/pylibmc)\n\n### 电子邮件\n\n用来发送和解析电子邮件的库。\n\n*   django-celery-ses：带有 AWS SES 和 Celery 的 Django email 后端。[官网](https://github.com/StreetVoice/django-celery-ses)\n*   envelopes：供人类使用的电子邮件库。[官网](http://tomekwojcik.github.io/envelopes/)\n*   flanker：一个 email 地址和 Mime 解析库。[官网](https://github.com/mailgun/flanker)\n*   imbox：Python IMAP 库[官网](https://github.com/martinrusev/imbox)\n*   inbox.py：Python SMTP 服务器。[官网](https://github.com/kennethreitz/inbox.py)\n*   inbox：一个开源电子邮件工具箱。[官网](https://github.com/nylas/sync-engine)\n*   lamson：Python 风格的 SMTP 应用服务器。[官网](https://github.com/zedshaw/lamson)\n*   mailjet：Mailjet API 实现，用来提供批量发送邮件，统计等功能。[官网](https://github.com/WoLpH/mailjet)\n*   marrow.mailer：高性能可扩展邮件分发框架。[官网](https://github.com/marrow/mailer)\n*   modoboa：一个邮件托管和管理平台，具有现代的、简约的 Web UI。[官网](https://github.com/tonioo/modoboa)\n*   pyzmail：创建，发送和解析电子邮件。[官网](http://www.magiksys.net/pyzmail/)\n*   Talon：Mailgun 库，用来抽取信息和签名。[官网](https://github.com/mailgun/talon)\n\n### 国际化\n\n用来进行国际化的库。\n\n*   Babel：一个Python 的国际化库。[官网](http://babel.pocoo.org/en/latest/)\n*   Korean：一个韩语词态库。[官网](https://korean.readthedocs.org/en/latest/)\n\n### URL处理\n\n解析URLs的库\n\n*   furl：一个让处理 URL 更简单小型 Python 库。[官网](https://github.com/gruns/furl)\n*   purl：一个简单的，不可变的URL类，具有简洁的 API 来进行询问和处理。[官网](https://github.com/codeinthehole/purl)\n*   pyshorteners：一个纯 Python URL 缩短库。[官网](https://github.com/ellisonleao/pyshorteners)\n*   shorturl：生成短小 URL 和类似 bit.ly 短链的Python 实现。[官网](https://github.com/Alir3z4/python-shorturl)\n*   webargs：一个解析 HTTP 请求参数的库，内置对流行 web 框架的支持，包括 Flask, Django, Bottle, Tornado和 Pyramid。[官网](https://github.com/sloria/webargs)\n\n### HTML处理\n\n处理 HTML和XML的库。\n\n*   BeautifulSoup：以 Python 风格的方式来对 HTML 或 XML 进行迭代，搜索和修改。[官网](http://www.crummy.com/software/BeautifulSoup/bs4/doc/)\n*   bleach：一个基于白名单的 HTML 清理和文本链接库。[官网](http://bleach.readthedocs.org/en/latest/)\n*   cssutils：一个 Python 的 CSS 库。[官网](https://pypi.python.org/pypi/cssutils/)\n*   html5lib：一个兼容标准的 HTML 文档和片段解析及序列化库。[官网](https://github.com/html5lib/html5lib-python)\n*   lxml：一个非常快速，简单易用，功能齐全的库，用来处理 HTML 和 XML。[官网](http://lxml.de/)\n*   MarkupSafe：为Python 实现 XML/HTML/XHTML 标记安全字符串。[官网](https://github.com/pallets/markupsafe)\n*   pyquery：一个解析 HTML 的库，类似 jQuery。[官网](https://github.com/gawel/pyquery)\n*   untangle：将XML文档转换为Python对象，使其可以方便的访问。[官网](https://github.com/stchris/untangle)\n*   xhtml2pdf：HTML/CSS 转 PDF 工具。[官网](https://github.com/xhtml2pdf/xhtml2pdf)\n*   xmltodict：像处理 JSON 一样处理 XML。[官网](https://github.com/martinblech/xmltodict)\n\n爬取网络站点的库\n\n*   Scrapy：一个快速高级的屏幕爬取及网页采集框架。[官网](http://scrapy.org/)\n*   cola：一个分布式爬虫框架。[官网](https://github.com/chineking/cola)\n*   Demiurge：基于PyQuery 的爬虫微型框架。[官网](https://github.com/matiasb/demiurge)\n*   feedparser：通用 feed 解析器。[官网](http://pythonhosted.org/feedparser/)\n*   Grab：站点爬取框架。[官网](http://grablib.org/)\n*   MechanicalSoup：用于自动和网络站点交互的 Python 库。[官网](https://github.com/hickford/MechanicalSoup)\n*   portia：Scrapy 可视化爬取。[官网](https://github.com/scrapinghub/portia)\n*   pyspider：一个强大的爬虫系统。[官网](https://github.com/binux/pyspider)\n*   RoboBrowser：一个简单的，Python 风格的库，用来浏览网站，而不需要一个独立安装的浏览器。[官网](https://github.com/jmcarp/robobrowser)\n\n### 网页内容提取\n\n用于进行网页内容提取的库。\n\n*   Haul：一个可以扩展的图像爬取工具。[官网](https://github.com/vinta/Haul)\n*   html2text：将 HTML 转换为 Markdown 格式文本[官网](https://github.com/Alir3z4/html2text)\n*   lassie：人性化的网页内容检索库。[官网](https://github.com/michaelhelmick/lassie)\n*   micawber：一个小型网页内容提取库，用来从 URLs 提取富内容。[官网](https://github.com/coleifer/micawber)\n*   [newspaper](http://hao.jobbole.com/python-newspaper/)：使用 Python 进行新闻提取，文章提取以及内容策展。[官网](https://github.com/codelucas/newspaper)\n*   opengraph：一个用来解析开放内容协议(Open Graph Protocol)的 Python模块。[官网](https://github.com/erikriver/opengraph)\n*   [python-goose](http://hao.jobbole.com/python-goose/)：HTML内容/文章提取器。[官网](https://github.com/grangier/python-goose)\n*   python-readability：arc90 公司 readability 工具的 Python 高速端口。[官网](https://github.com/buriy/python-readability)\n*   sanitize：为杂乱的数据世界带来调理性。[官网](https://github.com/Alir3z4/python-sanitize)\n*   sumy：一个为文本文件和 HTML 页面进行自动摘要的模块。[官网](https://github.com/miso-belica/sumy)\n*   textract：从任何格式的文档中提取文本，Word，PowerPoint，PDFs 等等。[官网](https://github.com/deanmalmgren/textract)\n\n### 表单\n\n进行表单操作的库。\n\n*   Deform：Python HTML 表单生成库，受到了 formish 表单生成库的启发。[官网](http://deform.readthedocs.org/en/latest/)\n*   django-bootstrap3：集成了 Bootstrap 3 的 Django。[官网](https://github.com/dyve/django-bootstrap3)\n*   django-crispy-forms：一个 Django 应用，他可以让你以一种非常优雅且 DRY（Don't repeat yourself） 的方式来创建美观的表单。[官网](http://django-crispy-forms.readthedocs.org/en/latest/)\n*   django-remote-forms：一个平台独立的 Django 表单序列化工具。[官网](https://github.com/WiserTogether/django-remote-forms)\n*   WTForms：一个灵活的表单验证和呈现库。[官网](http://wtforms.readthedocs.org/en/latest/)\n*   WTForms-JSON：一个 WTForms 扩展，用来处理 JSON 数据。[官网](http://wtforms-json.readthedocs.org/en/latest/)\n\n### 数据验证\n\n数据验证库。多用于表单验证。\n\n*   Cerberus：A mappings-validator with a variety of rules, normalization-features and simple customization that uses a pythonic schema-definition.[官网](http://docs.python-cerberus.org/en/stable/)\n*   colander：一个用于对从 XML, JSON，HTML 表单获取的数据或其他同样简单的序列化数据进行验证和反序列化的系统。[官网](http://docs.pylonsproject.org/projects/colander/en/latest/)\n*   kmatch：一种用于匹配/验证/筛选 Python 字典的语言。[官网](https://github.com/ambitioninc/kmatch)\n*   schema：一个用于对 Python 数据结构进行验证的库。[官网](https://github.com/keleshev/schema)\n*   Schematics：数据结构验证。[官网](https://github.com/schematics/schematics)\n*   valideer：轻量级可扩展的数据验证和适配库。[官网](https://github.com/podio/valideer)\n*   voluptuous：一个 Python 数据验证库。主要是为了验证传入 Python的 JSON，YAML 等数据。[官网](https://github.com/alecthomas/voluptuous)\n\n### 反垃圾技术\n\n帮助你和电子垃圾进行战斗的库。\n\n*   django-simple-captcha：一个简单、高度可定制的Django 应用，可以为任何Django表单添加验证码。[官网](https://github.com/mbi/django-simple-captcha)\n*   django-simple-spam-blocker：一个用于Django的简单的电子垃圾屏蔽工具。[官网](https://github.com/moqada/django-simple-spam-blocker)\n\n### 标记\n\n用来进行标记的库。\n\n*   django-taggit：简单的 Django 标记工具。[官网](https://github.com/alex/django-taggit)\n\n### 管理面板\n\n管理界面库。\n\n*   Ajenti：一个你的服务器值得拥有的管理面板。[官网](https://github.com/Eugeny/ajenti)\n*   django-suit：Django 管理界面的一个替代品 (仅对于非商业用途是免费的)。[官网](http://djangosuit.com/)\n*   django-xadmin：Django admin 的一个替代品，具有很多不错的功能。[官网](https://github.com/sshwsfc/django-xadmin)\n*   flask-admin：一个用于 Flask 的简单可扩展的管理界面框架。[官网](https://github.com/flask-admin/flask-admin)\n*   flower：一个对 Celery 集群进行实时监控和提供 web 管理界面的工具。[官网](https://github.com/mher/flower)\n*   Grappelli：Django 管理界面的一个漂亮的皮肤。[官网](http://grappelliproject.com/)\n*   Wooey：一个 Django 应用，可以为 Python 脚本创建 web 用户界面。[官网](https://github.com/wooey/wooey)\n\n### 静态站点生成器\n\n静态站点生成器是一个软件，它把文本和模板作为输入，然后输出HTML文件。\n\n*   Pelican：使用 Markdown 或 ReST 来处理内容， Jinja 2 来制作主题。支持 DVCS, Disqus.。AGPL 许可。[官网](http://blog.getpelican.com/)\n*   Cactus：为设计师设计的静态站点生成器。[官网](https://github.com/koenbok/Cactus/)\n*   Hyde：基于 Jinja2 的静态站点生成器。[官网](http://hyde.github.io/)\n*   Nikola：一个静态网站和博客生成器。[官网](https://www.getnikola.com/)\n*   Tinkerer：Tinkerer 是一个博客引擎/静态站点生成器，由Sphinx驱动。[官网](http://tinkerer.me/)\n*   Lektor：一个简单易用的静态 CMS 和博客引擎。[官网](https://www.getlektor.com/)\n\n### 进程\n\n操作系统进程启动及通信库。\n\n*   envoy：比 Python [subprocess](https://docs.python.org/2/library/subprocess.html) 模块更人性化。[官网](https://github.com/kennethreitz/envoy)\n*   sarge：另一 种 subprocess 模块的封装。[官网](http://sarge.readthedocs.org/en/latest/)\n*   sh：一个完备的 subprocess 替代库。[官网](https://github.com/amoffat/sh)\n\n### 并发和并行\n\n用以进行并发和并行操作的库。\n\n*   multiprocessing：(Python 标准库) 基于进程的“线程”接口。[官网](https://docs.python.org/2/library/multiprocessing.html)\n*   threading：(Python 标准库)更高层的线程接口。[官网](https://docs.python.org/2/library/threading.html)\n*   eventlet：支持 WSGI 的异步框架。[官网](http://eventlet.net/)\n*   gevent：一个基于协程的 Python 网络库，使用[greenlet](https://github.com/python-greenlet/greenlet)。[官网](http://www.gevent.org/)\n*   Tomorrow：用于产生异步代码的神奇的装饰器语法实现。[官网](https://github.com/madisonmay/Tomorrow)\n*   uvloop：在libuv之上超快速实现asyncio事件循环。[官网](https://github.com/MagicStack/uvloop)\n\n### 网络\n\n用于网络编程的库。\n\n*   asyncio：(Python 标准库) 异步 I/O, 事件循环, 协程以及任务。[官网](https://docs.python.org/3/library/asyncio.html)\n*   [Twisted](http://hao.jobbole.com/twisted/)：一个事件驱动的网络引擎。[官网](https://twistedmatrix.com/trac/)\n*   pulsar：事件驱动的并发框架。[官网](https://github.com/quantmind/pulsar)\n*   diesel：基于Greenlet 的事件 I/O 框架。[官网](https://github.com/dieseldev/diesel)\n*   pyzmq：一个 ZeroMQ 消息库的 Python 封装。[官网](http://zeromq.github.io/pyzmq/)\n*   txZMQ：基于 Twisted 的 ZeroMQ 消息库的 Python 封装。[官网](https://github.com/smira/txZMQ)\n\n### WebSocket\n\n帮助使用WebSocket的库。\n\n*   AutobahnPython：给 Python 、使用的 WebSocket & WAMP 基于 Twisted 和 [asyncio](https://docs.python.org/3/library/asyncio.html)。[官网](https://github.com/crossbario/autobahn-python)\n*   Crossbar：开源统一应用路由(Websocket & WAMP for Python on Autobahn).[官网](https://github.com/crossbario/crossbar/)\n*   django-socketio：给 Django 用的 WebSockets。[官网](https://github.com/stephenmcd/django-socketio)\n*   WebSocket-for-Python：为Python2/3 以及 PyPy 编写的 WebSocket 客户端和服务器库。[官网](https://github.com/Lawouach/WebSocket-for-Python)\n\n### WSGI 服务器\n\n兼容 WSGI 的 web 服务器\n\n*   gunicorn：Pre-forked, 部分是由 C 语言编写的。[官网](https://pypi.python.org/pypi/gunicorn)\n*   uwsgi：uwsgi 项目的目的是开发一组全栈工具，用来建立托管服务， 由 C 语言编写。[官网](https://uwsgi-docs.readthedocs.org/en/latest/)\n*   [bjoern](http://hao.jobbole.com/bjoern/)：异步，非常快速，由 C 语言编写。[官网](https://pypi.python.org/pypi/bjoern)\n*   fapws3：异步 (仅对于网络端)，由 C 语言编写。[官网](http://www.fapws.org/)\n*   meinheld：异步，部分是由 C 语言编写的。[官网](https://pypi.python.org/pypi/meinheld)\n*   netius：异步，非常快速。[官网](https://github.com/hivesolutions/netius)\n*   paste：多线程，稳定，久经考验。[官网](http://pythonpaste.org/)\n*   rocket：多线程。[官网](https://pypi.python.org/pypi/rocket)\n*   waitress：多线程, 是它驱动着 Pyramid 框架。[官网](https://waitress.readthedocs.org/en/latest/)\n*   Werkzeug：一个 WSGI 工具库，驱动着 Flask ，而且可以很方便大嵌入到你的项目中去。[官网](http://werkzeug.pocoo.org/)\n\n### RPC 服务器\n\n兼容 RPC 的服务器。\n\n*   SimpleJSONRPCServer：这个库是 JSON-RPC 规范的一个实现。[官网](https://github.com/joshmarshall/jsonrpclib/)\n*   SimpleXMLRPCServer：(Python 标准库) 简单的 XML-RPC 服务器实现，单线程。[官网](https://docs.python.org/2/library/simplexmlrpcserver.html)\n*   zeroRPC：zerorpc 是一个灵活的 RPC 实现，基于 ZeroMQ 和 MessagePack。[官网](https://github.com/0rpc/zerorpc-python)\n\n### 密码学\n\n*   cryptography：这个软件包意在提供密码学基本内容和方法提供给 Python 开发者。[官网](https://cryptography.io/en/latest/)\n*   hashids：在 Python 中实现 [hashids](http://hashids.org/) 。[官网](https://github.com/davidaurelio/hashids-python)\n*   Paramiko：SSHv2 协议的 Python (2.6+, 3.3+) ，提供客户端和服务端的功能。[官网](http://www.paramiko.org/)\n*   Passlib：安全密码存储／哈希库，[官网](https://pythonhosted.org/passlib/)\n*   PyCrypto：Python 密码学工具箱。[官网](https://www.dlitz.net/software/pycrypto/)\n*   PyNacl：网络和密码学(NaCl) 库的 Python 绑定。[官网](https://github.com/pyca/pynacl)\n\n### 图形用户界面\n\n用来创建图形用户界面程序的库。\n\n*   curses：内建的 [ncurses](http://www.gnu.org/software/ncurses/) 封装，用来创建终端图形用户界面。[官网](https://docs.python.org/2/library/curses.html#module-curses)\n*   enaml：使用类似 QML 的Declaratic语法来创建美观的用户界面。[官网](https://github.com/nucleic/enaml)\n*   [kivy](http://hao.jobbole.com/kivy/)：一个用来创建自然用户交互（NUI）应用程序的库，可以运行在 Windows, Linux, Mac OS X, Android 以及 iOS平台上。[官网](https://kivy.org/)\n*   pyglet：一个Python 的跨平台窗口及多媒体库。[官网](https://bitbucket.org/pyglet/pyglet/wiki/Home)\n*   PyQt：跨平台用户界面框架 [Qt](http://www.qt.io/) 的 Python 绑定 ，支持Qt v4 和 Qt v5。[官网](https://riverbankcomputing.com/software/pyqt/intro)\n*   PySide：P跨平台用户界面框架 [Qt](http://www.qt.io/) 的 Python 绑定 ，支持Qt v4。[官网](https://wiki.qt.io/PySide)\n*   Tkinter：Tkinter 是 Python GUI 的一个事实标准库。[官网](https://wiki.python.org/moin/TkInter)\n*   Toga：一个 Python 原生的, 操作系统原生的 GUI 工具包。[官网](https://github.com/pybee/toga)\n*   urwid：一个用来创建终端 GUI 应用的库，支持组件，事件和丰富的色彩等。[官网](http://urwid.org/)\n*   wxPython：wxPython 是 wxWidgets C++ 类库和 Python 语言混合的产物。[官网](http://wxpython.org/)\n*   PyGObject：GLib/GObject/GIO/GTK+ (GTK+3) 的 Python 绑定[官网](https://wiki.gnome.org/Projects/PyGObject)\n*   Flexx：Flexx 是一个纯 Python 语言编写的用来创建 GUI 程序的工具集，它使用 web 技术进行界面的展示。[官网](https://github.com/zoofIO/flexx)\n\n### 游戏开发\n\n超赞的游戏开发库。\n\n*   Cocos2d：cocos2d 是一个用来开发 2D 游戏， 示例和其他图形/交互应用的框架。基于 pyglet。[官网](http://cocos2d.org/)\n*   Panda3D：由迪士尼开发的 3D 游戏引擎，并由卡内基梅陇娱乐技术中心负责维护。使用C++编写, 针对 Python 进行了完全的封装。[官网](https://www.panda3d.org/)\n*   Pygame：Pygame 是一组 Python 模块，用来编写游戏。[官网](http://www.pygame.org/news.html)\n*   PyOgre：Ogre 3D 渲染引擎的 Python 绑定，可以用来开发游戏和仿真程序等任何 3D 应用。[官网](http://www.ogre3d.org/tikiwiki/PyOgre)\n*   PyOpenGL：OpenGL 的 Python 绑定及其相关 APIs。[官网](http://pyopengl.sourceforge.net/)\n*   PySDL2：SDL2 库的封装，基于 ctypes。[官网](http://pysdl2.readthedocs.org/en/latest/)\n*   RenPy：一个视觉小说（visual novel）引擎。[官网](https://www.renpy.org/)\n\n### 日志\n\n用来生成和操作日志的库。\n\n*   logging：(Python 标准库) 为 Python 提供日志功能。[官网](https://docs.python.org/2/library/logging.html)\n*   logbook：Logging 库的替代品。[官网](http://pythonhosted.org/Logbook/)\n*   Eliot：为复杂的和分布式系统创建日志。[官网](https://eliot.readthedocs.org/en/latest/)\n*   Raven：Sentry的 Python 客户端。[官网](http://raven.readthedocs.org/en/latest/)\n*   Sentry：实时记录和收集日志的服务器。[官网](https://pypi.python.org/pypi/sentry)\n\n### Testing\n\n进行代码库测试和生成测试数据的库。\n\n*   测试框架\n    *   unittest：(Python 标准库) 单元测试框架。[官网](https://docs.python.org/2/library/unittest.html)\n    *   nose：nose 扩展了 unittest 的功能。[官网](https://nose.readthedocs.org/en/latest/)\n    *   contexts：一个 Python 3.3+ 的 BDD 框架。受到C# – Machine.Specifications的启发。[官网](https://github.com/benjamin-hodgson/Contexts)\n    *   hypothesis：Hypothesis 是一个基于先进的 Quickcheck 风格特性的测试库。[官网](https://github.com/DRMacIver/hypothesis)\n    *   mamba：Python 的终极测试工具， 拥护BDD。[官网](http://nestorsalceda.github.io/mamba/)\n    *   PyAutoGUI：PyAutoGUI 是一个人性化的跨平台 GUI 自动测试模块。[官网](https://github.com/asweigart/pyautogui)\n    *   pyshould：Should 风格的断言，基于 [PyHamcrest](https://github.com/hamcrest/PyHamcrest)。[官网](https://github.com/drslump/pyshould)\n    *   pytest：一个成熟的全功能 Python 测试工具。[官网](http://pytest.org/latest/)\n    *   green：干净，多彩的测试工具。[官网](https://github.com/CleanCut/green)\n    *   pyvows：BDD 风格的测试工具，受Vows.js的启发。[官网](http://heynemann.github.io/pyvows/)-\n    *   Robot Framework：一个通用的自动化测试框架。[官网](https://github.com/robotframework/robotframework)\n*   Web 测试\n    *   Selenium：[Selenium](http://www.seleniumhq.org/) WebDriver 的 Python 绑定。[官网](https://pypi.python.org/pypi/selenium)\n    *   locust：使用 Python 编写的，可扩展的用户加载测试工具。[官网](https://github.com/locustio/locust)\n    *   sixpack：一个和语言无关的 A/B 测试框架。[官网](https://github.com/seatgeek/sixpack)\n    *   splinter：开源的 web 应用测试工具。[官网](https://splinter.readthedocs.org/en/latest/)\n*   Mock测试\n    *   mock：(Python 标准库) 一个用于伪造测试的库。[官网](https://docs.python.org/3/library/unittest.mock.html)\n    *   doublex：Python 的一个功能强大的 doubles  测试框架。[官网](https://pypi.python.org/pypi/doublex)\n    *   freezegun：通过伪造日期模块来生成不同的时间。[官网](https://github.com/spulec/freezegun)\n    *   httmock：针对 Python 2.6+ 和 3.2+ 生成 伪造请求的库。[官网](https://github.com/patrys/httmock)\n    *   httpretty：Python 的 HTTP 请求 mock 工具。[官网](http://falcao.it/HTTPretty/)\n    *   responses：伪造 Python 中的 requests 库的一个通用库。[官网](https://github.com/getsentry/responses)\n    *   VCR.py：在你的测试中记录和重放 HTTP 交互。[官网](https://github.com/kevin1024/vcrpy)\n*   对象工厂\n    *   factoryboy：一个 Python 用的测试固件 (test fixtures) 替代库。[官网](https://github.com/rbarrois/factoryboy)\n    *   mixer：另外一个测试固件 (test fixtures) 替代库，支持 Django, Flask, SQLAlchemy, Peewee 等。[官网](https://github.com/klen/mixer)\n    *   modelmommy：为 Django 测试创建随机固件[官网](https://github.com/vandersonmota/modelmommy)\n*   代码覆盖率\n    *   coverage：代码覆盖率测量。[官网](https://pypi.python.org/pypi/coverage)\n*   伪数据\n    *   faker：一个 Python 库，用来生成伪数据。[官网](http://www.joke2k.net/faker/)\n    *   fake2db：伪数据库生成器。[官网](https://github.com/emirozer/fake2db)\n    *   radar：生成随机的日期/时间。[官网](https://pypi.python.org/pypi/radar)\n*   错误处理\n    *   FuckIt.py：FuckIt.py 使用最先进的技术来保证你的 Python 代码无论对错都能继续运行。[官网](https://github.com/ajalt/fuckitpy)\n\n### 代码分析和Lint工具\n\n进行代码分析，解析和操作代码库的库和工具。\n\n*   代码分析\n    *   coala：语言独立和易于扩展的代码分析应用程序。[官网](http://coala-analyzer.org/)\n    *   code2flow：把你的 Python 和 JavaScript 代码转换为流程图。[官网](https://github.com/scottrogowski/code2flow)\n    *   pycallgraph：这个库可以把你的Python 应用的流程(调用图)进行可视化。[官网](https://github.com/gak/pycallgraph)\n    *   pysonar2：Python 类型推断和检索工具。[官网](https://github.com/yinwang0/pysonar2)\n*   Lint工具\n    *   Flake8：模块化源码检查工具: pep8, pyflakes 以及 co。[官网](https://pypi.python.org/pypi/flake8)\n    *   Pylint：一个完全可定制的源码分析器。[官网](https://www.pylint.org/)\n    *   pylama：Python 和 JavaScript 的代码审查工具。[官网](https://pylama.readthedocs.org/en/latest/)\n*   代码格式化\n    *   autopep8：自动格式化 Python 代码，以使其符合 PEP8 规范。[官网](https://github.com/hhatto/autopep8)\n\n### Debugging Tools\n\n用来进行代码调试的库。\n\n*   调试器\n    *   ipdb：IPython 启用的 [pdb](https://docs.python.org/2/library/pdb.html)。[官网](https://pypi.python.org/pypi/ipdb)\n    *   pudb：全屏，基于控制台的 Python 调试器。[官网](https://pypi.python.org/pypi/pudb)\n    *   pyringe：可以在 Python 进程中附加和注入代码的调试器。[官网](https://github.com/google/pyringe)\n    *   wdb：一个奇异的 web 调试器，通过 WebSockets 工作。[官网](https://github.com/Kozea/wdb)\n    *   winpdb：一个具有图形用户界面的 Python 调试器，可以进行远程调试，基于 rpdb2。[官网](http://winpdb.org/)\n    *   django-debug-toolbar：为 Django 显示各种调试信息。[官网](https://github.com/django-debug-toolbar/django-debug-toolbar)\n    *   django-devserver：一个 Django 运行服务器的替代品。[官网](https://github.com/dcramer/django-devserver)\n    *   flask-debugtoolbar：django-debug-toolbar 的 flask 版。[官网](https://github.com/mgood/flask-debugtoolbar)\n*   性能分析器\n    *   lineprofiler：逐行性能分析。[官网](https://github.com/rkern/lineprofiler)\n    *   [Memory Profiler](http://hao.jobbole.com/memory_profiler/)：监控 Python 代码的内存使用。[官网](http://pypi.python.org/pypi/memory_profiler)、[内存](https://github.com/fabianp/memoryprofiler)\n    *   profiling：一个交互式 Python 性能分析工具。[官网](https://github.com/what-studio/profiling)\n*   其他\n    *   pyelftools：解析和分析 ELF 文件以及 DWARF 调试信息。[官网](https://github.com/eliben/pyelftools)\n    *   python-statsd：[statsd](https://github.com/etsy/statsd/) 服务器的 Python 客户端。[官网](https://github.com/WoLpH/python-statsd)\n\n### Science and Data Analysis\n\n用来进行科学计算和数据分析的库。\n\n*   astropy：一个天文学 Python 库。[官网](http://www.astropy.org/)\n*   [bcbio-nextgen](http://hao.jobbole.com/bcbio-nextgen/)：这个工具箱为全自动高通量测序分析提供符合最佳实践的处理流程。[官网](https://github.com/chapmanb/bcbio-nextgen)\n*   bccb：生物分析相关代码集合[官网](https://github.com/chapmanb/bcbb)\n*   Biopython：Biopython 是一组可以免费使用的用来进行生物计算的工具。[官网](http://biopython.org/wiki/MainPage)\n*   [blaze](http://hao.jobbole.com/blaze/)：NumPy 和 Pandas 的大数据接口。[官网](http://blaze.readthedocs.org/en/latest/index.html)\n*   [cclib](http://hao.jobbole.com/cclib/)：一个用来解析和解释计算化学软件包输出结果的库。[官网](http://cclib.github.io/)\n*   NetworkX：一个为复杂网络设计的高性能软件。[官网](https://networkx.github.io/)\n*   Neupy：执行和测试各种不同的人工神经网络算法。[官网](http://neupy.com/pages/home.html)\n*   Numba：Python JIT (just in time) 编译器，针对科学用的 Python ，由Cython 和 NumPy 的开发者开发。[官网](http://numba.pydata.org/)\n*   [NumPy](http://hao.jobbole.com/numpy/)：使用 Python 进行科学计算的基础包。[官网](http://www.numpy.org/)\n*   Open Babel：一个化学工具箱，用来描述多种化学数据。[官网](http://openbabel.org/wiki/MainPage)\n*   [Open Mining](http://hao.jobbole.com/open-mining/)：使用 Python 挖掘商业情报 (BI) (Pandas web 接口)。[官网](https://github.com/mining/mining)\n*   [orange](http://hao.jobbole.com/orange/)：通过可视化编程或 Python 脚本进行数据挖掘，数据可视化，分析和机器学习。[官网](http://orange.biolab.si/)\n*   Pandas：提供高性能，易用的数据结构和数据分析工具。[官网](http://pandas.pydata.org/)\n*   PyDy：PyDy 是 Python Dynamics 的缩写，用来为动力学运动建模工作流程提供帮助， 基于 NumPy, SciPy, IPython 和 matplotlib。[官网](http://www.pydy.org/)\n*   [PyMC](http://hao.jobbole.com/pymc/)：马尔科夫链蒙特卡洛采样工具。[官网](https://github.com/pymc-devs/pymc3)\n*   RDKit：化学信息学和机器学习软件。[官网](http://www.rdkit.org/)\n*   [SciPy](http://hao.jobbole.com/scipy/)：由一些基于 Python ，用于数学，科学和工程的开源软件构成的生态系统。[官网](http://www.scipy.org/)\n*   [statsmodels](http://hao.jobbole.com/statsmodels/)：统计建模和计量经济学。[官网](https://github.com/statsmodels/statsmodels)\n*   SymPy：一个用于符号数学的 Python 库。[官网](https://github.com/sympy/sympy)\n*   zipline：一个 Python 算法交易库。[官网](https://github.com/quantopian/zipline)\n*   [Bayesian-belief-networks](http://hao.jobbole.com/bayesian-belief-networks/)：优雅的贝叶斯信念网络框架。[官网](https://github.com/eBay/bayesian-belief-networks)\n* keras: 以tensorflow或者theano为后端的深度学习封装库，快速上手神经网络[官网](https://keras.io/)\n\n### 数据可视化\n\n进行数据可视化的库。 参见: [awesome-javascript](https://github.com/sorrycc/awesome-javascript#data-visualization)。\n\n*   matplotlib：一个 Python 2D 绘图库。[官网](http://matplotlib.org/)\n*   bokeh：用 Python 进行交互式 web 绘图。[官网](https://github.com/bokeh/bokeh)\n*   ggplot：ggplot2 给 R 提供的 API 的 Python 版本。[官网](https://github.com/yhat/ggplot)\n*   plotly：协同 Python 和 matplotlib 工作的 web 绘图库。[官网](https://plot.ly/python/)\n*   pygal：一个 Python SVG 图表创建工具。[官网](http://www.pygal.org/en/latest/)\n*   pygraphviz：Graphviz 的 Python 接口。[官网](https://pypi.python.org/pypi/pygraphviz)\n*   PyQtGraph：交互式实时2D/3D/图像绘制及科学/工程学组件。[官网](http://www.pyqtgraph.org/)\n*   SnakeViz：一个基于浏览器的 Python's cProfile 模块输出结果查看工具。[官网](http://jiffyclub.github.io/snakeviz/)\n*   vincent：把 Python 转换为 Vega 语法的转换工具。[官网](https://github.com/wrobstory/vincent)\n*   VisPy：基于 OpenGL 的高性能科学可视化工具。[官网](http://vispy.org/)\n\n### 计算机视觉\n\n计算机视觉库。\n\n*   OpenCV：开源计算机视觉库。[官网](http://opencv.org/)\n*   pyocr：Tesseract和Cuneiform的包装库。[官网](https://github.com/jflesch/pyocr)\n*   pytesseract：[Google Tesseract OCR](https://github.com/tesseract-ocr)的另一包装库。[官网](https://github.com/madmaze/pytesseract)\n*   [SimpleCV](http://hao.jobbole.com/simplecv/)：一个用来创建计算机视觉应用的开源框架。[官网](http://simplecv.org/)\n\n### 机器学习\n\n机器学习库。 参见: [awesome-machine-learning](https://github.com/josephmisiti/awesome-machine-learning#python).\n\n*   Crab：灵活、快速的推荐引擎。[官网](https://github.com/muricoca/crab)\n*   gensim：人性化的话题建模库。[官网](https://github.com/piskvorky/gensim)\n*   hebel：GPU 加速的深度学习库。[官网](https://github.com/hannes-brt/hebel)\n*   NuPIC：智能计算 Numenta 平台。[官网](https://github.com/numenta/nupic)\n*   pattern：Python 网络挖掘模块。[官网](https://github.com/clips/pattern)\n*   [PyBrain](http://hao.jobbole.com/pybrain/)：另一个 Python 机器学习库。[官网](https://github.com/pybrain/pybrain)\n*   [Pylearn2](http://hao.jobbole.com/pylearn2/)：一个基于 [Theano](https://github.com/Theano/Theano) 的机器学习库。[官网](https://github.com/lisa-lab/pylearn2)\n*   [python-recsys](http://hao.jobbole.com/python-recsys/)：一个用来实现推荐系统的 Python 库。[官网](https://github.com/ocelma/python-recsys)\n*   scikit-learn：基于 SciPy 构建的机器学习 Python 模块。[官网](http://scikit-learn.org/)\n*   pydeep：Python 深度学习库。[官网](https://github.com/andersbll/deeppy)\n*   vowpalporpoise：轻量级 [Vowpal Wabbit](https://github.com/JohnLangford/vowpalwabbit/) 的 Python 封装。[官网](https://github.com/josephreisinger/vowpalporpoise)\n*   skflow：一个 [TensorFlow](https://github.com/tensorflow/tensorflow) 的简化接口(模仿 scikit-learn)。[官网](https://github.com/tensorflow/skflow)\n\n### MapReduce\n\nMapReduce 框架和库。\n\n*   [dpark](http://hao.jobbole.com/dpark/)：Spark 的 Python 克隆版，一个类似 MapReduce 的框架。[官网](https://github.com/douban/dpark)\n*   dumbo：这个 Python 模块可以让人轻松的编写和运行 Hadoop 程序。[官网](https://github.com/klbostee/dumbo)\n*   luigi：这个模块帮你构建批处理作业的复杂流水线。[官网](https://github.com/spotify/luigi)\n*   mrjob：在 Hadoop 或 Amazon Web Services 上运行 MapReduce 任务。[官网](https://github.com/Yelp/mrjob)\n*   PySpark：Spark 的 Python API 。[官网](http://spark.apache.org/docs/latest/programming-guide.html)\n*   streamparse：运行针对事实数据流的 Python 代码。集成了[Apache Storm](http://storm.apache.org/)。[官网](https://github.com/Parsely/streamparse)\n\n### 函数式编程\n\n使用 Python 进行函数式编程。\n\n*   CyToolz：Toolz 的 Cython 实现 : 高性能函数式工具。[官网](https://github.com/pytoolz/cytoolz/)\n*   fn.py：在 Python 中进行函数式编程 : 实现了一些享受函数式编程缺失的功能。[官网](https://github.com/kachayev/fn.py)\n*   funcy：炫酷又实用的函数式工具。[官网](https://github.com/Suor/funcy)\n*   Toolz：一组用于迭代器，函数和字典的函数式编程工具。[官网](https://github.com/pytoolz/toolz)\n\n### 第三方 API\n\n用来访问第三方 API的库。 参见： [List of Python API Wrappers and Libraries](https://github.com/realpython/list-of-python-api-wrappers)。\n\n*   apache-libcloud：一个为各种云设计的 Python 库。[官网](https://libcloud.apache.org/)\n*   boto：Amazon Web Services 的 Python 接口。[官网](https://github.com/boto/boto)\n*   django-wordpress：WordPress models and views for Django.[官网](https://github.com/sunlightlabs/django-wordpress/)\n*   facebook-sdk：Facebook 平台的 Python SDK.[官网](https://github.com/mobolic/facebook-sdk)\n*   facepy：Facepy 让和 Facebook's Graph API 的交互变得更容易。[官网](https://github.com/jgorset/facepy)\n*   gmail：Gmail 的 Python 接口。[官网](https://github.com/charlierguo/gmail)\n*   google-api-python-client：Python 用的 Google APIs 客户端库。[官网](https://github.com/google/google-api-python-client)\n*   gspread：Google 电子表格的 Python API.[官网](https://github.com/burnash/gspread)\n*   twython：Twitter API 的封装。[官网](https://github.com/ryanmcgrath/twython)\n\n### DevOps 工具\n\n用于 DevOps 的软件和库。\n\n*   Ansible：一个非常简单的 IT 自动化平台。[官网](https://github.com/ansible/ansible)\n*   SaltStack：基础设施自动化和管理系统。[官网](https://github.com/saltstack/salt)\n*   OpenStack：用于构建私有和公有云的开源软件。[官网](http://www.openstack.org/)\n*   Docker Compose：快速，分离的开发环境，使用 Docker。[官网](https://docs.docker.com/compose/)\n*   Fabric：一个简单的，Python 风格的工具，用来进行远程执行和部署。[官网](http://www.fabfile.org/)\n*   cuisine：为 Fabric 提供一系列高级函数。[官网](https://github.com/sebastien/cuisine)\n*   Fabtools：一个用来编写超赞的 Fabric 文件的工具。[官网](https://github.com/ronnix/fabtools)\n*   gitapi：Git 的纯 Python API。[官网](https://bitbucket.org/haard/gitapi)\n*   hgapi：Mercurial 的纯 Python API。[官网](https://bitbucket.org/haard/hgapi)\n*   honcho：[Foreman](https://github.com/ddollar/foreman)的 Python 克隆版，用来管理基于[Procfile](https://devcenter.heroku.com/articles/procfile)的应用。[官网](https://github.com/nickstenning/honcho)\n*   pexpect：Controlling interactive programs in a pseudo-terminal like 在一个伪终端中控制交互程序，就像 GNU expect 一样。[官网](https://github.com/pexpect/pexpect)\n*   psutil：一个跨平台进程和系统工具模块。[官网](https://github.com/giampaolo/psutil)\n*   supervisor：UNIX 的进程控制系统。[官网](https://github.com/Supervisor/supervisor)\n\n### 任务调度\n\n任务调度库。\n\n*   APScheduler：轻巧但强大的进程内任务调度，使你可以调度函数。[官网](http://apscheduler.readthedocs.org/en/latest/)\n*   django-schedule：一个 Django 排程应用。[官网](https://github.com/thauber/django-schedule)\n*   doit：一个任务执行和构建工具。[官网](http://pydoit.org/)\n*   gunnery：分布式系统使用的多用途任务执行工具 ，具有 web 交互界面。[官网](https://github.com/gunnery/gunnery)\n*   Joblib：一组为 Python 提供轻量级作业流水线的工具。[官网](http://pythonhosted.org/joblib/index.html)\n*   Plan：如有神助地编写 crontab 文件。[官网](https://github.com/fengsp/plan)\n*   schedule：人性化的 Python 任务调度库。[官网](https://github.com/dbader/schedule)\n*   Spiff：使用纯 Python 实现的强大的工作流引擎。[官网](https://github.com/knipknap/SpiffWorkflow)\n*   TaskFlow：一个可以让你方便执行任务的 Python 库，一致并且可靠。[官网](http://docs.openstack.org/developer/taskflow/)\n\n### 外来函数接口\n\n使用外来函数接口的库。\n\n*   cffi：用来调用 C 代码的外来函数接口。[官网](https://pypi.python.org/pypi/cffi)\n*   [ctypes](http://hao.jobbole.com/ctypes/)：(Python 标准库) 用来调用 C 代码的外来函数接口。[官网](https://docs.python.org/2/library/ctypes.html)\n*   PyCUDA：Nvidia CUDA API 的封装。[官网](https://mathema.tician.de/software/pycuda/)\n*   SWIG：简化的封装和接口生成器。[官网](http://www.swig.org/Doc1.3/Python.html)\n\n### 高性能\n\n让 Python 更快的库。\n\n*   Cython：优化的 Python 静态编译器。使用类型混合使 Python 编译成 C 或 C++ 模块来获得性能的极大提升。[官网](http://cython.org/)\n*   PeachPy：嵌入 Python 的 x86-64 汇编器。可以被用作 Python 内联的汇编器或者是独立的汇编器，用于 Windows, Linux, OS X, Native Client 或者 Go 。[官网](https://github.com/Maratyszcza/PeachPy)\n*   PyPy：使用 Python 实现的 Python。解释器使用黑魔法加快 Python 运行速度且不需要加入额外的类型信息。[官网](http://pypy.org/)\n*   [Pyston](http://hao.jobbole.com/pyston-llvm-jit/)：使用 LLVM 和现代 JIT 技术构建的 Python 实现，目标是为了获得很好的性能。[官网](https://github.com/dropbox/pyston)\n*   Stackless Python：一个强化版的 Python。[官网](https://bitbucket.org/stackless-dev/stackless/overview)\n\n### 微软的 Windows平台\n\n在 Windows 平台上进行 Python 编程。\n\n*   Python(x,y)：面向科学应用的 Python 发行版，基于 Qt 和 Spyder。[官网](http://python-xy.github.io/)\n*   pythonlibs：非官方的 Windows 平台 Python 扩展二进制包。[官网](http://www.lfd.uci.edu/~gohlke/pythonlibs/)\n*   PythonNet：Python 与 .NET 公共语言运行库 (CLR)的集成。[官网](https://github.com/pythonnet/pythonnet)\n*   PyWin32：针对 Windows 的Python 扩展。[官网](https://sourceforge.net/projects/pywin32/)\n*   WinPython：Windows 7/8 系统下便携式开发环境。[官网](https://winpython.github.io/)\n\n### 网络可视化和SDN\n\n用来进行网络可视化和SDN(软件定义网络)的工具和库。\n\n*   Mininet：一款流行的网络模拟器以及用 Python 编写的 API。[官网](http://mininet.org/)\n*   POX：一个针对基于 Python 的软件定义网络应用（例如 OpenFlow SDN 控制器）的开源开发平台。[官网](https://github.com/noxrepo/pox)\n*   Pyretic：火热的 SDN 编程语言中的一员，为网络交换机和模拟器提供强大的抽象能力。[官网](http://frenetic-lang.org/pyretic/)\n*   SDX Platform：基于 SDN 的 IXP 实现，影响了 Mininet, POX 和 Pyretic。[官网](https://github.com/sdn-ixp/internet2award)\n\n### 硬件\n\n用来对硬件进行编程的库。\n\n*   ino：操作[Arduino](https://www.arduino.cc/)的命令行工具。[官网](http://inotool.org/)\n*   Pyro：Python 机器人编程库。[官网](http://pyrorobotics.com/)\n*   PyUserInput：跨平台的，控制鼠标和键盘的模块。[官网](https://github.com/SavinaRoja/PyUserInput)\n*   scapy：一个非常棒的操作数据包的库。[官网](https://github.com/secdev/scapy)\n*   wifi：一个 Python 库和命令行工具用来在 Linux 平台上操作WiFi。[官网](https://wifi.readthedocs.org/en/latest/)\n*   Pingo：Pingo 为类似Raspberry Pi，pcDuino， Intel Galileo等设备提供统一的API用以编程。[官网](http://www.pingo.io/)\n\n### 兼容性\n\n帮助从 Python 2 向 Python 3迁移的库。\n\n*   Python-Future：这就是 Python 2 和 Python 3 之间丢失的那个兼容性层。[官网](http://python-future.org/index.html)\n*   Python-Modernize：使 Python 代码更加现代化以便最终迁移到 Python 3。[官网](https://github.com/mitsuhiko/python-modernize)\n*   Six：Python 2 和 3 的兼容性工具。[官网](https://pypi.python.org/pypi/six)\n\n### 杂项\n\n不属于上面任何一个类别，但是非常有用的库。\n\n*   blinker：一个快速的 Python 进程内信号/事件分发系统。[官网](https://github.com/jek/blinker)\n*   itsdangerous：一系列辅助工具用来将可信的数据传入不可信的环境。[官网](https://github.com/pallets/itsdangerous)\n*   pluginbase：一个简单但是非常灵活的 Python 插件系统。[官网](https://github.com/mitsuhiko/pluginbase)\n*   Pychievements：一个用来创建和追踪成就的 Python 框架。[官网](https://github.com/PacketPerception/pychievements)\n*   [Tryton](http://hao.jobbole.com/tryton/)：一个通用商务框架。[官网](http://www.tryton.org/)\n\n### 算法和设计模式\n\nPython 实现的算法和设计模式。\n\n*   [algorithms](http://hao.jobbole.com/algorithms/)：一个 Python 算法模块。[官网](https://github.com/nryoung/algorithms)\n*   python-patterns：Python 设计模式的集合。[官网](https://github.com/faif/python-patterns)\n*   sortedcontainers：快速，纯 Python 实现的SortedList，SortedDict 和 SortedSet 类型。[官网](http://www.grantjenks.com/docs/sortedcontainers/)\n\n### 编辑器插件\n\n编辑器和 IDE 的插件\n\n*   Emacs\n    *   Elpy：Emacs Python 开发环境。[官网](https://github.com/jorgenschaefer/elpy)\n*   Sublime Text\n    *   SublimeJEDI：一个 Sublime Text 插件，用来使用超赞的自动补全库 Jedi。[官网](https://github.com/srusskih/SublimeJEDI)\n    *   Anaconda：Anaconda 把你的 Sublime Text 3 变成一个功能齐全的 Python IDE。[官网](https://github.com/DamnWidget/anaconda)\n*   Vim\n    *   [YouCompleteMe](http://hao.jobbole.com/youcompleteme/)：引入基于 [Jedi](https://github.com/davidhalter/jedi) 的 Python 自动补全引擎。[官网](https://github.com/Valloric/YouCompleteMe)\n    *   Jedi-vim：绑定 Vim 和 Jedi 自动补全库对 Python 进行自动补全。[官网](https://github.com/davidhalter/jedi-vim)\n    *   Python-mode：将 Vim 变成 Python IDE 的一款多合一插件。[官网](https://github.com/klen/python-mode)\n*   Visual Studio\n    *   PTVS：Visual Studio 的 Python 工具[官网](https://github.com/Microsoft/PTVS)\n\n### 集成开发环境\n\n流行的 Python 集成开发环境。\n\n*   PyCharm：商业化的 Python IDE ，由 JetBrains 开发。也有免费的社区版提供。[官网](https://www.jetbrains.com/pycharm/)\n*   LiClipse：基于 Eclipse 的免费多语言 IDE 。使用 PyDev 来支持 Python 。[官网](http://www.liclipse.com/)\n*   Spyder：开源 Python IDE。[官网](https://github.com/spyder-ide/spyder)\n\n### 自动聊天工具\n\n用于开发聊天机器人的库\n\n*   Errbot：最简单和最流行的聊天机器人用来实现自动聊天工具。[官网](http://errbot.io/en/latest/)\n\n## 服务\n\n在线工具和简化开发的 API 。\n\n### 持续集成\n\n参见: [awesome-CIandCD](https://github.com/ciandcd/awesome-ciandcd#online-build-system).\n\n*   Travis CI：一个流行的工具，为你的开源和[私人](https://travis-ci.com/)项目提供持续集成服务。(仅支持 GitHub)[官网](https://travis-ci.org/)\n*   CircleCI：一个持续集成工具，可以非常快速的进行并行测试。 (仅支持 GitHub)[官网](https://circleci.com/)\n*   Vexor CI：一个为私人 app 提供持续集成的工具，支持按分钟付费。[官网](https://vexor.io/)\n*   Wercker：基于 Docker 平台，用来构建和部署微服务。[官网](http://wercker.com/)\n\n### 代码质量\n\n*   Codacy：自动化代码审查，更加快速的发布高质量代码。对于开源项目是免费的。[官网](https://www.codacy.com/)\n*   QuantifiedCode：一个数据驱动、自动、持续的代码审查工具。[官网](https://www.quantifiedcode.com/)\n\n## 资源\n\n在这里可以找到新的 Python 库。\n\n### 网站\n\n*   [r/Python](https://www.reddit.com/r/python)\n*   [CoolGithubProjects](https://www.coolgithubprojects.com/)\n*   [Django Packages](https://www.djangopackages.com/)\n*   [Full Stack Python](http://www.fullstackpython.com/)\n*   [Python 3 Wall of Superpowers](http://python3wos.appspot.com/)\n*   [Python Hackers](http://pythonhackers.com/open-source/)\n*   [Python ZEEF](https://python.zeef.com/alan.richmond)\n*   [Trending Python repositories on GitHub today](https://github.com/trending?l=python)\n*   [PyPI Ranking](http://pypi-ranking.info/alltime)\n\n### 周刊\n\n*   [Import Python Newsletter](http://importpython.com/newsletter/)\n*   [Pycoder's Weekly](http://pycoders.com/)\n*   [Python Weekly](http://www.pythonweekly.com/)\n\n### Twitter\n\n*   [@codetengu](https://twitter.com/codetengu)\n*   [@getpy](https://twitter.com/getpy)\n*   [@planetpython](https://twitter.com/planetpython)\n*   [@pycoders](https://twitter.com/pycoders)\n*   [@pypi](https://twitter.com/pypi)\n*   [@pythontrending](https://twitter.com/pythontrending)\n*   [@PythonWeekly](https://twitter.com/PythonWeekly)\n\n### 学习指南\n*   [Scipy-lecture-notes](http://hao.jobbole.com/scipy-lecture-notes/)：如何用Python来做学术？[官网](https://github.com/scipy-lectures/scipy-lecture-notes)\n*   [SScientific-python-lectures](http://hao.jobbole.com/scientific-python-lectures/)：Python科学计算的资料。[官网](https://github.com/jrjohansson/scientific-python-lectures)\n*   [Mario-Level-1](http://hao.jobbole.com/mario-level-1/)：用Python和Pygame写的超级马里奥第一关。[官网](https://github.com/justinmeister/Mario-Level-1)\n*   [Python Koans](http://hao.jobbole.com/python-koans/)：Python的交互式学习工具。[官网](https://github.com/gregmalcolm/python_koans)\n*   [Minecraft](http://hao.jobbole.com/minecraft-python/)：用python写的Minecraft游戏。[官网](https://github.com/fogleman/Minecraft)\n*   [pycrumbs](http://hao.jobbole.com/python-pycrumbs/)：Python资源大全。[官网](https://github.com/kirang89/pycrumbs/blob/master/pycrumbs.md)\n*   [python-patterns](http://hao.jobbole.com/python-patterns/)：使用python实现设计模式。[官网](https://github.com/faif/python-patterns)\n*   [Projects](http://hao.jobbole.com/python-projects/)：Python项目大集合。[官网](https://github.com/karan/Projects)\n*   [The Hitchhiker’s Guide to Python](http://hao.jobbole.com/the-hitchhikers-guide-to-python/)：旅行者的Python学习指南。[官网](http://docs.python-guide.org/en/latest/)\n*\t[Code Like a Pythonista: Idiomatic Python](http://top.jobbole.com/18767/)：如何像Python高手(Pythonista)一样编程。[官网](http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html)\n\n<h3 id=\"websites\">知名网站</h3>\n*值得关注的 Python 技术站点。*\n\n<h4>中文站点</h4>\n\n* 伯乐在线 Python 频道：分享 Python 开发技术、相关的行业动态。[官网](http://python.jobbole.com/)\n\n<h4>英文站点</h4>\n\n* 《[值得关注的 10 个 Python 英文博客](http://python.jobbole.com/81730/)》\n","slug":"awesome-python","published":1,"updated":"2017-04-27T16:27:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3bpqypn0011sof1vioa6vof","content":"<h1 id=\"写在最前\"><a href=\"#写在最前\" class=\"headerlink\" title=\"写在最前\"></a>写在最前</h1><p>这是一个笔记，方便自己查询，详情请看原出处<a href=\"https://github.com/jobbole/awesome-python-cn\" target=\"_blank\" rel=\"external\">awesome-python-cn</a></p>\n<hr>\n<h1 id=\"Python-资源大全中文版\"><a href=\"#Python-资源大全中文版\" class=\"headerlink\" title=\"Python 资源大全中文版\"></a>Python 资源大全中文版</h1><p>我想很多程序员应该记得 GitHub 上有一个 Awesome - XXX 系列的资源整理。<a href=\"https://github.com/vinta/awesome-python\" target=\"_blank\" rel=\"external\">awesome-python</a> 是 vinta 发起维护的 Python 资源列表，内容包括：Web框架、网络爬虫、网络内容提取、模板引擎、数据库、数据可视化、图片处理、文本处理、自然语言处理、机器学习、日志、代码分析等。由伯乐在线持续更新。</p>\n<p>Awesome 系列虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。</p>\n<hr>\n<h3 id=\"我们要做什么？\"><a href=\"#我们要做什么？\" class=\"headerlink\" title=\"我们要做什么？\"></a>我们要做什么？</h3><ul>\n<li>基于 awesome-python 列表，我们将对其中的各个资源项进行编译整理。此外还将从其他来源补充好资源。</li>\n<li>整理后的内容，将收录在<a href=\"http://hao.jobbole.com/\" target=\"_blank\" rel=\"external\">伯乐在线资源频道</a>。可参考已整理的内容：<ul>\n<li>《<a href=\"http://hao.jobbole.com/python-scrapy/\" target=\"_blank\" rel=\"external\">Scrapy：Python的爬虫框架</a>》</li>\n<li>《<a href=\"http://hao.jobbole.com/flask/\" target=\"_blank\" rel=\"external\">Flask：一个使用Python编写的轻量级Web应用框架</a>》</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"环境管理\"><a href=\"#环境管理\" class=\"headerlink\" title=\"环境管理\"></a>环境管理</h3><p>管理 Python 版本和环境的工具</p>\n<ul>\n<li>p：非常简单的交互式 python 版本管理工具。<a href=\"https://github.com/qw3rtman/p\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyenv：简单的 Python 版本管理工具。<a href=\"https://github.com/yyuu/pyenv\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Vex：可以在虚拟环境中执行命令。<a href=\"https://github.com/sashahart/vex\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>virtualenv：创建独立 Python 环境的工具。<a href=\"https://pypi.python.org/pypi/virtualenv\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>virtualenvwrapper：virtualenv 的一组扩展。<a href=\"https://pypi.python.org/pypi/virtualenvwrapper\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h3><p>管理包和依赖的工具。</p>\n<ul>\n<li>pip：Python 包和依赖关系管理工具。<a href=\"https://pip.pypa.io/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pip-tools：保证 Python 包依赖关系更新的一组工具。<a href=\"https://github.com/nvie/pip-tools\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>conda：跨平台，Python 二进制包管理工具。<a href=\"https://github.com/conda/conda/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Curdling：管理 Python 包的命令行工具。<a href=\"http://clarete.li/curdling/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>wheel：Python 分发的新标准，意在取代 eggs。<a href=\"http://pythonwheels.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"包仓库\"><a href=\"#包仓库\" class=\"headerlink\" title=\"包仓库\"></a>包仓库</h3><p>本地 PyPI 仓库服务和代理。</p>\n<ul>\n<li>warehouse：下一代 PyPI。<a href=\"https://github.com/pypa/warehouse\" target=\"_blank\" rel=\"external\">官网</a><ul>\n<li>Warehouse：PyPA 提供的 PyPI 镜像工具。<a href=\"https://warehouse.python.org/\" target=\"_blank\" rel=\"external\">官网</a> <a href=\"https://bitbucket.org/pypa/bandersnatch\" target=\"_blank\" rel=\"external\">bandersnatch</a></li>\n</ul>\n</li>\n<li>devpi：PyPI 服务和打包/测试/分发工具。<a href=\"http://doc.devpi.net/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>localshop：本地 PyPI 服务（自定义包并且自动对 PyPI 镜像）。<a href=\"https://github.com/mvantellingen/localshop\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"分发\"><a href=\"#分发\" class=\"headerlink\" title=\"分发\"></a>分发</h3><p>打包为可执行文件以便分发。</p>\n<ul>\n<li>PyInstaller：将 Python 程序转换成独立的执行文件（跨平台）。<a href=\"https://github.com/pyinstaller/pyinstaller\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>dh-virtualenv：构建并将 virtualenv 虚拟环境作为一个 Debian 包来发布。<a href=\"http://dh-virtualenv.readthedocs.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Nuitka：将脚本、模块、包编译成可执行文件或扩展模块。<a href=\"http://nuitka.net/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>py2app：将 Python 脚本变为独立软件包（Mac OS X）。<a href=\"http://pythonhosted.org/py2app/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>py2exe：将 Python 脚本变为独立软件包（Windows）。<a href=\"http://www.py2exe.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pynsist：一个用来创建 Windows 安装程序的工具，可以在安装程序中打包 Python本身。<a href=\"http://pynsist.readthedocs.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"构建工具\"><a href=\"#构建工具\" class=\"headerlink\" title=\"构建工具\"></a>构建工具</h3><p>将源码编译成软件。</p>\n<ul>\n<li>buildout：一个构建系统，从多个组件来创建，组装和部署应用。<a href=\"http://www.buildout.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>BitBake：针对嵌入式 Linux 的类似 make 的构建工具。<a href=\"http://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>fabricate：对任何语言自动找到依赖关系的构建工具。<a href=\"https://code.google.com/archive/p/fabricate\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PlatformIO：多平台命令行构建工具。<a href=\"https://github.com/platformio/platformio\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyBuilder：纯 Python 实现的持续化构建工具。<a href=\"https://github.com/pybuilder/pybuilder\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>SCons：软件构建工具。<a href=\"http://www.scons.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"交互式解析器\"><a href=\"#交互式解析器\" class=\"headerlink\" title=\"交互式解析器\"></a>交互式解析器</h3><p>交互式 Python 解析器。</p>\n<ul>\n<li>IPython：功能丰富的工具，非常有效的使用交互式 Python。<a href=\"https://github.com/ipython/ipython\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/bpython/\" target=\"_blank\" rel=\"external\">bpython</a>：界面丰富的 Python 解析器。<a href=\"http://bpython-interpreter.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>ptpython：高级交互式Python解析器， 构建于<a href=\"https://github.com/jonathanslenders/python-prompt-toolkit\" target=\"_blank\" rel=\"external\">python-prompt-toolkit</a> 之上。<a href=\"https://github.com/jonathanslenders/ptpython\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h3><p>文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。</p>\n<ul>\n<li>imghdr：（Python 标准库）检测图片类型。<a href=\"https://docs.python.org/2/library/imghdr.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>mimetypes：（Python 标准库）将文件名映射为 MIME 类型。<a href=\"https://docs.python.org/2/library/mimetypes.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>path.py：对 os.path 进行封装的模块。<a href=\"https://github.com/jaraco/path.py\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pathlib：（Python3.4+ 标准库）跨平台的、面向对象的路径操作库。<a href=\"https://pathlib.readthedocs.org/en/pep428/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-magic：文件类型检测的第三方库 libmagic 的 Python 接口。<a href=\"https://github.com/ahupp/python-magic\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Unipath：用面向对象的方式操作文件和目录。<a href=\"https://github.com/mikeorr/Unipath\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>watchdog：管理文件系统事件的 API 和 shell 工具<a href=\"https://github.com/gorakhargosh/watchdog\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"日期和时间\"><a href=\"#日期和时间\" class=\"headerlink\" title=\"日期和时间\"></a>日期和时间</h3><p>操作日期和时间的类库。</p>\n<ul>\n<li>arrow：更好的 Python 日期时间操作类库。<a href=\"https://github.com/crsmithdev/arrow\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Chronyk：Python 3 的类库，用于解析手写格式的时间和日期。<a href=\"https://github.com/KoffeinFlummi/Chronyk\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>dateutil：Python datetime 模块的扩展。<a href=\"https://pypi.python.org/pypi/python-dateutil\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>delorean：解决 Python 中有关日期处理的棘手问题的库。<a href=\"https://github.com/myusuf3/delorean/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>moment：一个用来处理时间和日期的Python库。灵感来自于Moment.js。<a href=\"https://github.com/zachwill/moment\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyTime：一个简单易用的Python模块，用于通过字符串来操作日期/时间。<a href=\"https://github.com/shinux/PyTime\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pytz：现代以及历史版本的世界时区定义。将时区数据库引入Python。<a href=\"https://launchpad.net/pytz\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>when.py：提供用户友好的函数来帮助用户进行常用的日期和时间操作。<a href=\"https://github.com/dirn/When.py\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"文本处理\"><a href=\"#文本处理\" class=\"headerlink\" title=\"文本处理\"></a>文本处理</h3><p>用于解析和操作文本的库。</p>\n<ul>\n<li>通用<ul>\n<li><a href=\"http://hao.jobbole.com/chardet/\" target=\"_blank\" rel=\"external\">chardet</a>：字符编码检测器，兼容 Python2 和 Python3。<a href=\"https://github.com/chardet/chardet\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>difflib：(Python 标准库)帮助我们进行差异化比较。<a href=\"https://docs.python.org/2/library/difflib.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>ftfy：让Unicode文本更完整更连贯。<a href=\"https://github.com/LuminosoInsight/python-ftfy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>fuzzywuzzy：模糊字符串匹配。<a href=\"https://github.com/seatgeek/fuzzywuzzy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Levenshtein：快速计算编辑距离以及字符串的相似度。<a href=\"https://github.com/ztane/python-Levenshtein/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pangu.py：在中日韩语字符和数字字母之间添加空格。<a href=\"https://github.com/vinta/pangu.py\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>yfiglet-figlet：<a href=\"https://github.com/pwaller/pyfiglet\" target=\"_blank\" rel=\"external\">pyfiglet -figlet</a> 的 Python实现。</li>\n<li>shortuuid：一个生成器库，用以生成简洁的，明白的，URL 安全的 UUID。<a href=\"https://github.com/stochastic-technologies/shortuuid\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>unidecode：Unicode 文本的 ASCII 转换形式 。<a href=\"https://pypi.python.org/pypi/Unidecode\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>uniout：打印可读的字符，而不是转义的字符串。<a href=\"https://github.com/moskytw/uniout\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>xpinyin：一个用于把汉字转换为拼音的库。<a href=\"https://github.com/lxneng/xpinyin\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>simplejson：Python的JSON编码、解码器。<a href=\"https://simplejson.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"external\">官网</a>、<a href=\"https://github.com/simplejson/simplejson\" target=\"_blank\" rel=\"external\">GitHub</a></li>\n</ul>\n</li>\n<li>Slug化<ul>\n<li>awesome-slugify：一个 Python slug 化库，可以保持 Unicode。<a href=\"https://github.com/dimka665/awesome-slugify\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-slugify：Python slug 化库，可以把 unicode 转化为 ASCII。<a href=\"https://github.com/un33k/python-slugify\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>unicode-slugify：一个 slug 工具，可以生成 unicode slugs ,需要依赖 Django 。<a href=\"https://github.com/mozilla/unicode-slugify\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>解析器<ul>\n<li>phonenumbers：解析，格式化，储存，验证电话号码。<a href=\"https://github.com/daviddrysdale/python-phonenumbers\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PLY：lex 和 yacc 解析工具的 Python 实现。<a href=\"http://www.dabeaz.com/ply/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Pygments：通用语法高亮工具。<a href=\"http://pygments.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyparsing：生成通用解析器的框架。<a href=\"http://pyparsing.wikispaces.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-nameparser：把一个人名分解为几个独立的部分。<a href=\"https://github.com/derek73/python-nameparser\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-user-agents：浏览器 user agent 解析器。<a href=\"https://github.com/selwin/python-user-agents\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>sqlparse：一个无验证的 SQL 解析器。<a href=\"https://sqlparse.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"特殊文本格式处理\"><a href=\"#特殊文本格式处理\" class=\"headerlink\" title=\"特殊文本格式处理\"></a>特殊文本格式处理</h3><p>一些用来解析和操作特殊文本格式的库。</p>\n<ul>\n<li>通用<ul>\n<li>tablib：一个用来处理中表格数据的模块。<a href=\"https://github.com/kennethreitz/tablib\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>Office<ul>\n<li>Marmir：把输入的Python 数据结构转换为电子表单。<a href=\"https://github.com/brianray/mm\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>openpyxl：一个用来读写 Excel 2010 xlsx/xlsm/xltx/xltm 文件的库。<a href=\"https://openpyxl.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-docx：读取，查询以及修改 Microsoft Word 2007/2008 docx 文件。<a href=\"https://github.com/python-openxml/python-docx\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>unoconv：在 LibreOffice/OpenOffice 支持的任意文件格式之间进行转换。<a href=\"https://github.com/dagwieers/unoconv\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>XlsxWriter：一个用于创建 Excel .xlsx 文件的 Python 模块。<a href=\"https://xlsxwriter.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>xlwings：一个使得在 Excel 中方便调用 Python 的库（反之亦然），基于 BSD 协议。<a href=\"http://xlwings.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/xlwt/\" target=\"_blank\" rel=\"external\">xlwt</a>：读写 Excel 文件的数据和格式信息。<a href=\"https://github.com/python-excel/xlwt\" target=\"_blank\" rel=\"external\">官网</a> / <a href=\"https://github.com/python-excel/xlrd\" target=\"_blank\" rel=\"external\">xlrd</a></li>\n<li>relatorio：模板化OpenDocument 文件。<a href=\"http://relatorio.tryton.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>PDF<ul>\n<li>PDFMiner：一个用于从PDF文档中抽取信息的工具。<a href=\"https://github.com/euske/pdfminer\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyPDF2：一个可以分割，合并和转换 PDF 页面的库。<a href=\"https://github.com/mstamy2/PyPDF2\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>ReportLab：快速创建富文本 PDF 文档。<a href=\"http://www.reportlab.com/opensource/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>Markdown<ul>\n<li>Mistune：快速并且功能齐全的纯 Python 实现的 Markdown 解析器。<a href=\"https://github.com/lepture/mistune\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Python-Markdown：John Gruber’s Markdown 的 Python 版实现。<a href=\"https://github.com/waylan/Python-Markdown\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Python-Markdiwn2：纯 Python 实现的 Markdown 解析器，比 Python-Markdown 更快，更准确，可扩展。<a href=\"https://github.com/trentm/python-markdown2\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>YAML<ul>\n<li>PyYAML：Python 版本的 YAML 解析器。<a href=\"http://pyyaml.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>CSV<ul>\n<li>csvkit：用于转换和操作 CSV 的工具。<a href=\"https://github.com/wireservice/csvkit\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>Archive<ul>\n<li>unp：一个用来方便解包归档文件的命令行工具。<a href=\"https://github.com/mitsuhiko/unp\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自然语言处理\"><a href=\"#自然语言处理\" class=\"headerlink\" title=\"自然语言处理\"></a>自然语言处理</h3><p>用来处理人类语言的库。</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/nltk/\" target=\"_blank\" rel=\"external\">NLTK</a>：一个先进的平台，用以构建处理人类语言数据的 Python 程序。<a href=\"http://www.nltk.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>jieba：中文分词工具。<a href=\"https://github.com/fxsjy/jieba\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>langid.py：独立的语言识别系统。<a href=\"https://github.com/saffsd/langid.py\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Pattern：Python 网络信息挖掘模块。<a href=\"http://www.clips.ua.ac.be/pattern\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>SnowNLP：一个用来处理中文文本的库。<a href=\"https://github.com/isnowfy/snownlp\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>TextBlob：为进行普通自然语言处理任务提供一致的 API。<a href=\"http://textblob.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>TextGrocery：一简单高效的短文本分类工具，基于 LibLinear 和 Jieba。<a href=\"https://github.com/2shou/TextGrocery\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><p>用以生成项目文档的库。</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/sphinx/\" target=\"_blank\" rel=\"external\">Sphinx</a>：Python 文档生成器。<a href=\"http://www.sphinx-doc.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a><ul>\n<li>awesome-sphinxdoc：<a href=\"https://github.com/yoloseem/awesome-sphinxdoc\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>MkDocs：对 Markdown 友好的文档生成器。<a href=\"http://www.mkdocs.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pdoc：一个可以替换Epydoc 的库，可以自动生成 Python 库的 API 文档。<a href=\"https://github.com/BurntSushi/pdoc\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Pycco：文学编程（literate-programming）风格的文档生成器。<a href=\"https://github.com/pycco-docs/pycco\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>用来保存和解析配置的库。</p>\n<ul>\n<li>config：<a href=\"https://docs.python.org/2/library/logging.html\" target=\"_blank\" rel=\"external\">logging</a> 模块作者写的分级配置模块。<a href=\"https://www.red-dove.com/config-doc/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>ConfigObj：INI 文件解析器，带验证功能。<a href=\"http://www.voidspace.org.uk/python/configobj.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>ConfigParser：(Python 标准库) INI 文件解析器。<a href=\"https://docs.python.org/2/library/configparser.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>profig：通过多种格式进行配置，具有数值转换功能。<a href=\"http://profig.readthedocs.org/en/default/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-decouple：将设置和代码完全隔离。<a href=\"https://github.com/henriquebastos/python-decouple\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"命令行工具\"><a href=\"#命令行工具\" class=\"headerlink\" title=\"命令行工具\"></a>命令行工具</h3><p>用于创建命令行程序的库。</p>\n<ul>\n<li>命令行程序开发<ul>\n<li>asciimatics：跨平台，全屏终端包（即鼠标/键盘输入和彩色，定位文本输出），完整的复杂动画和特殊效果的高级API。<a href=\"https://github.com/peterbrittain/asciimatics\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>cement：Python 的命令行程序框架。<a href=\"http://builtoncement.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>click：一个通过组合的方式来创建精美命令行界面的包。<a href=\"http://click.pocoo.org/dev/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>cliff：一个用于创建命令行程序的框架，可以创建具有多层命令的命令行程序。<a href=\"http://docs.openstack.org/developer/cliff/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>clint：Python 命令行程序工具。<a href=\"https://github.com/kennethreitz/clint\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>colorama：跨平台彩色终端文本。<a href=\"https://pypi.python.org/pypi/colorama\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>docopt：Python 风格的命令行参数解析器。<a href=\"http://docopt.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Gooey：一条命令，将命令行程序变成一个 GUI 程序。<a href=\"https://github.com/chriskiehl/Gooey\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-prompt-toolkit：一个用于构建强大的交互式命令行程序的库。<a href=\"https://github.com/jonathanslenders/python-prompt-toolkit\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/pythonpy/\" target=\"_blank\" rel=\"external\">Pythonpy</a>：在命令行中直接执行任何Python指令。<a href=\"https://github.com/Russell91/pythonpy/wiki\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>生产力工具<ul>\n<li>aws-cli：Amazon Web Services 的通用命令行界面。<a href=\"https://github.com/aws/aws-cli\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>bashplotlib：在终端中进行基本绘图。<a href=\"https://github.com/glamp/bashplotlib\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>caniusepython3：判断是哪个项目妨碍你你移植到 Python 3。<a href=\"https://github.com/brettcannon/caniusepython3\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>cookiecutter：从 cookiecutters（项目模板）创建项目的一个命令行工具。<a href=\"https://github.com/audreyr/cookiecutter\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>doitlive：一个用来在终端中进行现场演示的工具。<a href=\"https://github.com/sloria/doitlive\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>howdoi：通过命令行获取即时的编程问题解答。<a href=\"https://github.com/gleitz/howdoi\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>httpie：一个命令行HTTP 客户端，cURL 的替代品，易用性更好。<a href=\"https://github.com/jkbrzt/httpie\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PathPicker：从bash输出中选出文件。<a href=\"https://github.com/facebook/PathPicker\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>percol：向UNIX shell 传统管道概念中加入交互式选择功能。<a href=\"https://github.com/mooz/percol\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>SAWS：一个加强版的 AWS 命令行。<a href=\"https://github.com/donnemartin/saws\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>thefuck：修正你之前的命令行指令。<a href=\"https://github.com/nvbn/thefuck\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>mycli：一个 MySQL 命令行客户端，具有自动补全和语法高亮功能。<a href=\"https://github.com/dbcli/mycli\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pgcli：Postgres 命令行工具，具有自动补全和语法高亮功能。<a href=\"https://github.com/dbcli/pgcli\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>try：一个从来没有更简单的命令行工具，用来试用python库。<a href=\"https://github.com/timofurrer/try\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"下载器\"><a href=\"#下载器\" class=\"headerlink\" title=\"下载器\"></a>下载器</h3><p>用来进行下载的库.</p>\n<ul>\n<li>s3cmd：一个用来管理Amazon S3 和 CloudFront 的命令行工具。<a href=\"https://github.com/s3tools/s3cmd\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>s4cmd：超级 S3 命令行工具，性能更加强劲。<a href=\"https://github.com/bloomreach/s4cmd\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>you-get：一个 YouTube/Youku/Niconico 视频下载器，使用 Python3 编写。<a href=\"https://www.soimort.org/you-get/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>youtube-dl：一个小巧的命令行程序，用来下载 YouTube 视频。<a href=\"http://rg3.github.io/youtube-dl/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"图像处理\"><a href=\"#图像处理\" class=\"headerlink\" title=\"图像处理\"></a>图像处理</h3><p>用来操作图像的库.</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/pillow/\" target=\"_blank\" rel=\"external\">pillow</a>：Pillow 是一个更加易用版的 <a href=\"http://www.pythonware.com/products/pil/\" target=\"_blank\" rel=\"external\">PIL</a>。<a href=\"http://pillow.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>hmap：图像直方图映射。<a href=\"https://github.com/rossgoodwin/hmap\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>imgSeek：一个使用视觉相似性搜索一组图片集合的项目。<a href=\"https://sourceforge.net/projects/imgseek/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>nude.py：裸体检测。<a href=\"https://github.com/hhatto/nude.py\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyBarcode：不借助 PIL 库在 Python 程序中生成条形码。<a href=\"https://pythonhosted.org/pyBarcode/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pygram：类似 Instagram 的图像滤镜。<a href=\"https://github.com/ajkumar25/pygram\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-qrcode：一个纯 Python 实现的二维码生成器。<a href=\"https://github.com/lincolnloop/python-qrcode\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Quads：基于四叉树的计算机艺术。<a href=\"https://github.com/fogleman/Quads\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>scikit-image：一个用于（科学）图像处理的 Python 库。<a href=\"http://scikit-image.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>thumbor：一个小型图像服务，具有剪裁，尺寸重设和翻转功能。<a href=\"https://github.com/thumbor/thumbor\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>wand：<a href=\"http://www.imagemagick.org/script/magick-wand.php\" target=\"_blank\" rel=\"external\">MagickWand</a>的Python 绑定。MagickWand 是 ImageMagick的 C API 。<a href=\"https://github.com/dahlia/wand\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"OCR\"><a href=\"#OCR\" class=\"headerlink\" title=\"OCR\"></a>OCR</h3><p>光学字符识别库。</p>\n<ul>\n<li>pyocr：Tesseract 和 Cuneiform 的一个封装(wrapper)。<a href=\"https://github.com/jflesch/pyocr\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/pytesseract/\" target=\"_blank\" rel=\"external\">pytesseract</a>：<a href=\"https://github.com/tesseract-ocr\" target=\"_blank\" rel=\"external\">Google Tesseract OCR</a> 的另一个封装(wrapper)。<a href=\"https://github.com/madmaze/pytesseract\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-tesseract - <a href=\"https://github.com/tesseract-ocr\" target=\"_blank\" rel=\"external\">Google Tesseract OCR</a> 的一个包装类。</li>\n</ul>\n<h3 id=\"音频\"><a href=\"#音频\" class=\"headerlink\" title=\"音频\"></a>音频</h3><p>用来操作音频的库</p>\n<ul>\n<li>audiolazy：Python 的数字信号处理包。<a href=\"https://github.com/danilobellini/audiolazy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>audioread：交叉库 (GStreamer + Core Audio + MAD + FFmpeg) 音频解码。<a href=\"https://github.com/beetbox/audioread\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>beets：一个音乐库管理工具及 <a href=\"https://musicbrainz.org/\" target=\"_blank\" rel=\"external\">MusicBrainz</a> 标签添加工具<a href=\"http://beets.io/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>dejavu：音频指纹提取和识别<a href=\"https://github.com/worldveil/dejavu\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/django-elastic-transcoder/\" target=\"_blank\" rel=\"external\">django-elastic-transcoder</a>：Django + <a href=\"http://aws.amazon.com/elastictranscoder/\" target=\"_blank\" rel=\"external\">Amazon Elastic Transcoder</a>。<a href=\"https://github.com/StreetVoice/django-elastic-transcoder\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>eyeD3：一个用来操作音频文件的工具，具体来讲就是包含 ID3 元信息的 MP3 文件。<a href=\"http://eyed3.nicfit.net/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>id3reader：一个用来读取 MP3 元数据的 Python 模块。<a href=\"http://nedbatchelder.com/code/modules/id3reader.py\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>m3u8：一个用来解析 m3u8 文件的模块。<a href=\"https://github.com/globocom/m3u8\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>mutagen：一个用来处理音频元数据的 Python 模块。<a href=\"https://bitbucket.org/lazka/mutagen\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pydub：通过简单、简洁的高层接口来操作音频文件。<a href=\"https://github.com/jiaaro/pydub\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyechonest：<a href=\"http://developer.echonest.com/\" target=\"_blank\" rel=\"external\">Echo Nest</a> API 的 Python 客户端<a href=\"https://github.com/echonest/pyechonest\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>talkbox：一个用来处理演讲/信号的 Python 库<a href=\"http://scikits.appspot.com/talkbox\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>TimeSide：开源 web 音频处理框架。<a href=\"https://github.com/Parisson/TimeSide\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>tinytag：一个用来读取MP3, OGG, FLAC 以及 Wave 文件音乐元数据的库。<a href=\"https://github.com/devsnd/tinytag\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>mingus：一个高级音乐理论和曲谱包，支持 MIDI 文件和回放功能。<a href=\"http://bspaans.github.io/python-mingus/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"Video\"><a href=\"#Video\" class=\"headerlink\" title=\"Video\"></a>Video</h3><p>用来操作视频和GIF的库。</p>\n<ul>\n<li>moviepy：一个用来进行基于脚本的视频编辑模块，适用于多种格式，包括动图 GIFs。<a href=\"http://zulko.github.io/moviepy/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>scikit-video：SciPy 视频处理常用程序。<a href=\"https://github.com/aizvorski/scikit-video\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"地理位置\"><a href=\"#地理位置\" class=\"headerlink\" title=\"地理位置\"></a>地理位置</h3><p>地理编码地址以及用来处理经纬度的库。</p>\n<ul>\n<li>GeoDjango：世界级地理图形 web 框架。<a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/gis/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>GeoIP：MaxMind GeoIP Legacy 数据库的 Python API。<a href=\"https://github.com/maxmind/geoip-api-python\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>geojson：GeoJSON 的 Python 绑定及工具。<a href=\"https://github.com/frewsxcv/python-geojson\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>geopy：Python 地址编码工具箱。<a href=\"https://github.com/geopy/geopy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pygeoip：纯 Python GeoIP API。<a href=\"https://github.com/appliedsec/pygeoip\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-countries：一个 Django 应用程序，提供用于表格的国家选择功能，国旗图标静态文件以及模型中的国家字段。<a href=\"https://github.com/SmileyChris/django-countries\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><p>使用HTTP的库。</p>\n<ul>\n<li>requests：人性化的HTTP请求库。<a href=\"http://docs.python-requests.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>grequests：requests 库 + gevent ，用于异步 HTTP 请求.<a href=\"https://github.com/kennethreitz/grequests\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>httplib2：全面的 HTTP 客户端库。<a href=\"https://github.com/jcgregorio/httplib2\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>treq：类似 requests 的Python API 构建于 Twisted HTTP 客户端之上。<a href=\"https://github.com/twisted/treq\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>urllib3：一个具有线程安全连接池，支持文件 post，清晰友好的 HTTP 库。<a href=\"https://github.com/shazow/urllib3\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>Python实现的数据库。</p>\n<ul>\n<li>pickleDB：一个简单，轻量级键值储存数据库。<a href=\"https://pythonhosted.org/pickleDB/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PipelineDB：流式 SQL 数据库。<a href=\"https://www.pipelinedb.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>TinyDB：一个微型的，面向文档型数据库。<a href=\"https://github.com/msiemens/tinydb\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>ZODB：一个 Python 原生对象数据库。一个键值和对象图数据库。<a href=\"http://www.zodb.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"数据库驱动\"><a href=\"#数据库驱动\" class=\"headerlink\" title=\"数据库驱动\"></a>数据库驱动</h3><p>用来连接和操作数据库的库。</p>\n<ul>\n<li>MySQL：<a href=\"http://shlomi-noach.github.io/awesome-mysql/\" target=\"_blank\" rel=\"external\">awesome-mysql</a>系列<ul>\n<li>mysql-python：Python 的 MySQL 数据库连接器。<a href=\"https://sourceforge.net/projects/mysql-python/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>ysqlclient：<a href=\"https://github.com/PyMySQL/mysqlclient-python\" target=\"_blank\" rel=\"external\">mysql-python</a> 分支，支持 Python 3。</li>\n<li>oursql：一个更好的 MySQL 连接器，支持原生预编译指令和 BLOBs.<a href=\"https://pythonhosted.org/oursql/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyMySQL：纯 Python MySQL 驱动，兼容 mysql-python。<a href=\"https://github.com/PyMySQL/PyMySQL\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>PostgreSQL<ul>\n<li>psycopg2：Python 中最流行的 PostgreSQL 适配器。<a href=\"http://initd.org/psycopg/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>queries：psycopg2 库的封装，用来和 PostgreSQL 进行交互。<a href=\"https://github.com/gmr/queries\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>txpostgres：基于 Twisted 的异步 PostgreSQL 驱动。<a href=\"http://txpostgres.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>其他关系型数据库<ul>\n<li>apsw：另一个 Python SQLite封装。<a href=\"http://rogerbinns.github.io/apsw/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>dataset：在数据库中存储Python字典</li>\n<li>pymssql：一个简单的Microsoft SQL Server数据库接口。<a href=\"http://www.pymssql.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>NoSQL 数据库<ul>\n<li>cassandra-python-driver：Cassandra 的 Python 驱动。<a href=\"https://github.com/datastax/python-driver\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>HappyBase：一个为 Apache HBase 设计的，对开发者友好的库。<a href=\"http://happybase.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Plyvel：一个快速且功能丰富的 LevelDB 的 Python 接口。<a href=\"https://plyvel.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>py2neo：Neo4j restful 接口的Python 封装客户端。<a href=\"http://py2neo.org/2.0/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pycassa：Cassandra 的 Python Thrift 驱动。<a href=\"https://github.com/pycassa/pycassa\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyMongo：MongoDB 的官方 Python 客户端。<a href=\"https://docs.mongodb.org/ecosystem/drivers/python/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>redis-py：Redis 的 Python 客户端。<a href=\"https://github.com/andymccurdy/redis-py\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>telephus：基于 Twisted 的 Cassandra 客户端。<a href=\"https://github.com/driftx/Telephus\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>txRedis：基于 Twisted 的 Redis 客户端。<a href=\"https://github.com/deldotdr/txRedis\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h3><p>实现对象关系映射或数据映射技术的库。</p>\n<ul>\n<li>关系型数据库<ul>\n<li>Django Models：Django 的一部分。<a href=\"https://docs.djangoproject.com/en/dev/topics/db/models/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>SQLAlchemy：Python SQL 工具以及对象关系映射工具。<a href=\"http://www.sqlalchemy.org/\" target=\"_blank\" rel=\"external\">官网</a><ul>\n<li><a href=\"https://github.com/dahlia/awesome-sqlalchemy\" target=\"_blank\" rel=\"external\">awesome-sqlalchemy</a>系列</li>\n</ul>\n</li>\n<li><a href=\"http://hao.jobbole.com/peewee/\" target=\"_blank\" rel=\"external\">Peewee</a>：一个小巧，富有表达力的 ORM。<a href=\"https://github.com/coleifer/peewee\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PonyORM：提供面向生成器的 SQL 接口的 ORM。<a href=\"https://ponyorm.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-sql：编写 Python 风格的 SQL 查询。<a href=\"https://pypi.python.org/pypi/python-sql\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>NoSQL 数据库<ul>\n<li>django-mongodb-engine：Django MongoDB 后端。<a href=\"https://github.com/django-nonrel/mongodb-engine\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PynamoDB：<a href=\"https://aws.amazon.com/dynamodb/\" target=\"_blank\" rel=\"external\">Amazon DynamoDB</a> 的一个 Python 风格接口。<a href=\"https://github.com/jlafon/PynamoDB\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>flywheel：Amazon DynamoDB 的对象映射工具。<a href=\"https://github.com/mathcamp/flywheel\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>MongoEngine：一个Python 对象文档映射工具，用于 MongoDB。<a href=\"http://mongoengine.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>hot-redis：为 Redis 提供 Python 丰富的数据类型。<a href=\"https://github.com/stephenmcd/hot-redis\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>redisco：一个 Python 库，提供可以持续存在在 Redis 中的简单模型和容器。<a href=\"https://github.com/kiddouk/redisco\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>其他<ul>\n<li>butterdb：Google Drive 电子表格的 Python ORM。<a href=\"https://github.com/Widdershin/butterdb\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Web-框架\"><a href=\"#Web-框架\" class=\"headerlink\" title=\"Web 框架\"></a>Web 框架</h3><p>全栈 Web 框架。</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/django/\" target=\"_blank\" rel=\"external\">Django</a>：Python 界最流行的 web 框架。<a href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"external\">官网</a><ul>\n<li><a href=\"https://github.com/rosarior/awesome-django\" target=\"_blank\" rel=\"external\">awesome-django</a>系列</li>\n</ul>\n</li>\n<li><a href=\"http://hao.jobbole.com/flask/\" target=\"_blank\" rel=\"external\">Flask</a>：一个 Python 微型框架。<a href=\"http://flask.pocoo.org/\" target=\"_blank\" rel=\"external\">官网</a><ul>\n<li><a href=\"https://github.com/humiaozuzu/awesome-flask\" target=\"_blank\" rel=\"external\">awesome-flask</a>系列</li>\n</ul>\n</li>\n<li>pyramid：一个小巧，快速，接地气的开源Python web 框架。<ul>\n<li><a href=\"https://github.com/uralbash/awesome-pyramid\" target=\"_blank\" rel=\"external\">awesome-pyramid</a>系列</li>\n</ul>\n</li>\n<li><a href=\"http://hao.jobbole.com/bottle/\" target=\"_blank\" rel=\"external\">Bottle</a>：一个快速小巧，轻量级的 WSGI 微型 web 框架。<a href=\"http://bottlepy.org/docs/dev/index.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>CherryPy：一个极简的 Python web 框架，服从 HTTP/1.1 协议且具有WSGI 线程池。<a href=\"http://www.cherrypy.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>TurboGears：一个可以扩展为全栈解决方案的微型框架。<a href=\"http://www.turbogears.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-webpy/\" target=\"_blank\" rel=\"external\">web.py</a>：一个 Python 的 web 框架，既简单，又强大。<a href=\"http://webpy.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>web2py：一个全栈 web 框架和平台，专注于简单易用。<a href=\"http://www.web2py.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/tornado/\" target=\"_blank\" rel=\"external\">Tornado</a>：一个web 框架和异步网络库。<a href=\"http://www.tornadoweb.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h3><p>允许或拒绝用户访问数据或功能的库。</p>\n<ul>\n<li>Carteblanche：Module to align code with thoughts of users and designers. Also magically handles navigation and permissions.<a href=\"https://github.com/neuman/python-carteblanche/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-guardian：Django 1.2+ 实现了单个对象权限。<a href=\"https://github.com/django-guardian/django-guardian\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-rules：一个小巧但是强大的应用，提供对象级别的权限管理，且不需要使用数据库。<a href=\"https://github.com/dfunckt/django-rules\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"CMS\"><a href=\"#CMS\" class=\"headerlink\" title=\"CMS\"></a>CMS</h3><p>内容管理系统</p>\n<ul>\n<li>odoo-cms: 一个开源的，企业级 CMS，基于odoo。<a href=\"http://www.odoo.com\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-cms：一个开源的，企业级 CMS，基于 Django。<a href=\"http://www.django-cms.org/en/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>djedi-cms：一个轻量级但却非常强大的 Django CMS ，考虑到了插件，内联编辑以及性能。<a href=\"http://djedi-cms.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>FeinCMS：基于 Django 构建的最先进的内容管理系统之一。<a href=\"http://www.feincms.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Kotti：一个高级的，Python 范的 web 应用框架，基于 Pyramid 构建。<a href=\"http://kotti.pylonsproject.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Mezzanine：一个强大的，持续的，灵活的内容管理平台。<a href=\"http://mezzanine.jupo.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Opps：一个为杂志，报纸网站以及大流量门户网站设计的 CMS 平台，基于 Django。<a href=\"http://opps.github.io/opps/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Plone：一个构建于开源应用服务器 Zope 之上的 CMS。<a href=\"https://plone.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Quokka：灵活，可扩展的小型 CMS，基于 Flask 和 MongoDB。<a href=\"http://quokkaproject.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/wagtail/\" target=\"_blank\" rel=\"external\">Wagtail</a>：一个 Django 内容管理系统。<a href=\"https://wagtail.io/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Widgy：最新的 CMS 框架，基于 Django。<a href=\"https://wid.gy/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"电子商务\"><a href=\"#电子商务\" class=\"headerlink\" title=\"电子商务\"></a>电子商务</h3><p>用于电子商务以及支付的框架和库。</p>\n<ul>\n<li>django-oscar：一个用于 Django 的开源的电子商务框架。<a href=\"http://oscarcommerce.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-shop：一个基于 Django 的店铺系统。<a href=\"https://github.com/awesto/django-shop\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Cartridge：一个基于 Mezzanine 构建的购物车应用。<a href=\"https://github.com/stephenmcd/cartridge\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>shoop：一个基于 Django 的开源电子商务平台。<a href=\"https://www.shoop.io/en/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>alipay：非官方的 Python 支付宝 API。<a href=\"https://github.com/lxneng/alipay\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>merchant：一个可以接收来自多种支付平台支付的 Django 应用。<a href=\"https://github.com/agiliq/merchant\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>money：货币类库with optional CLDR-backed locale-aware formatting and an extensible currency exchange solution.<a href=\"https://github.com/carlospalol/money\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-currencies：显示货币格式以及它的数值。<a href=\"https://github.com/Alir3z4/python-currencies\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"RESTful-API\"><a href=\"#RESTful-API\" class=\"headerlink\" title=\"RESTful API\"></a>RESTful API</h3><p>用来开发RESTful APIs的库</p>\n<ul>\n<li>Django<ul>\n<li><a href=\"http://hao.jobbole.com/django-rest-framework/\" target=\"_blank\" rel=\"external\">django-rest-framework</a>：一个强大灵活的工具，用来构建 web API。<a href=\"http://www.django-rest-framework.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-tastypie：为Django 应用开发API。<a href=\"http://tastypieapi.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-formapi：为 Django 的表单验证，创建 JSON APIs 。<a href=\"https://github.com/5monkeys/django-formapi\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>Flask<ul>\n<li>flask-api：为 flask 开发的，可浏览 Web APIs 。<a href=\"http://www.flaskapi.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>flask-restful：为 flask 快速创建REST APIs 。<a href=\"http://flask-restful.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>flask-restless：为 SQLAlchemy 定义的数据库模型创建 RESTful APIs 。<a href=\"https://flask-restless.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>flask-api-utils：为 Flask 处理 API 表示和验证。<a href=\"https://github.com/marselester/flask-api-utils\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>eve：REST API 框架，由 Flask, MongoDB 等驱动。<a href=\"https://github.com/nicolaiarocci/eve\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>Pyramid<ul>\n<li>cornice：一个Pyramid 的 REST 框架 。<a href=\"https://cornice.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>与框架无关的<ul>\n<li>falcon：一个用来建立云 API 和 web app 后端的高性能框架。<a href=\"http://falconframework.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>sandman：为现存的数据库驱动系统自动创建 REST APIs 。<a href=\"https://github.com/jeffknupp/sandman\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>restless：框架无关的 REST 框架 ，基于从 Tastypie 学到的知识。<a href=\"http://restless.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>ripozo：快速创建 REST/HATEOAS/Hypermedia APIs。<a href=\"https://github.com/vertical-knowledge/ripozo\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>实现验证方案的库。</p>\n<ul>\n<li>OAuth<ul>\n<li>Authomatic：简单但是强大的框架，身份验证/授权客户端。<a href=\"http://peterhudec.github.io/authomatic/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-allauth：Django 的验证应用。<a href=\"https://github.com/pennersr/django-allauth\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-oauth-toolkit：为 Django 用户准备的 OAuth2。<a href=\"https://github.com/evonove/django-oauth-toolkit\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-oauth2-provider：为 Django 应用提供 OAuth2 接入。<a href=\"https://github.com/caffeinehit/django-oauth2-provider\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Flask-OAuthlib：OAuth 1.0/a, 2.0 客户端实现，供 Flask 使用。<a href=\"https://github.com/lepture/flask-oauthlib\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>OAuthLib：一个 OAuth 请求-签名逻辑通用、 完整的实现。<a href=\"https://github.com/idan/oauthlib\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-oauth2：一个完全测试的抽象接口。用来创建 OAuth 客户端和服务端。<a href=\"https://github.com/joestump/python-oauth2\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-social-auth：一个设置简单的社会化验证方式。<a href=\"https://github.com/omab/python-social-auth\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>rauth：OAuth 1.0/a, 2.0, 和 Ofly 的 Python 库。<a href=\"https://github.com/litl/rauth\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>sanction：一个超级简单的OAuth2 客户端实现。<a href=\"https://github.com/demianbrecht/sanction\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>其他<ul>\n<li>jose：JavaScript 对象签名和加密草案的实现。<a href=\"https://github.com/demonware/jose\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyJWT：JSON Web 令牌草案 01。<a href=\"https://github.com/jpadilla/pyjwt\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-jws：JSON Web 签名草案 02 的实现。<a href=\"https://github.com/brianloveswords/python-jws\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-jwt：一个用来生成和验证 JSON Web 令牌的模块。<a href=\"https://github.com/davedoesdev/python-jwt\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h3><p>模板生成和词法解析的库和工具。</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/jinja2/\" target=\"_blank\" rel=\"external\">Jinja2</a>：一个现代的，对设计师友好的模板引擎。<a href=\"https://github.com/pallets/jinja\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Chameleon：一个 HTML/XML 模板引擎。 模仿了 ZPT（Zope Page Templates）, 进行了速度上的优化。<a href=\"https://chameleon.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Genshi：Python 模板工具，用以生成 web 感知的结果。<a href=\"https://genshi.edgewall.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Mako：Python 平台的超高速轻量级模板。<a href=\"http://www.makotemplates.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h3><p>处理事件以及任务队列的库。</p>\n<ul>\n<li>celery：一个异步任务队列/作业队列，基于分布式消息传递。<a href=\"http://www.celeryproject.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>huey：小型多线程任务队列。<a href=\"https://github.com/coleifer/huey\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/mrq/\" target=\"_blank\" rel=\"external\">mrq</a>：Mr. Queue -一个 Python 的分布式 worker 任务队列， 使用 Redis 和 gevent。<a href=\"https://github.com/pricingassistant/mrq\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>rq：简单的 Python 作业队列。<a href=\"http://python-rq.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>simpleq：一个简单的，可无限扩张的，基于亚马逊 SQS 的队列。<a href=\"https://github.com/rdegges/simpleq\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><p>对数据进行索引和执行搜索查询的库和软件。</p>\n<ul>\n<li>django-haystack：Django 模块化搜索。<a href=\"https://github.com/django-haystack/django-haystack\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>elasticsearch-py：Elasticsearch 的官方底层 Python 客户端。<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>elasticsearch-dsl-py：Elasticsearch 的官方高级 Python 客户端。<a href=\"https://github.com/elastic/elasticsearch-dsl-py\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>solrpy：<a href=\"http://lucene.apache.org/solr/\" target=\"_blank\" rel=\"external\">solr</a>的 Python 客户端。<a href=\"https://github.com/edsu/solrpy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Whoosh：一个快速的纯 Python 搜索引擎库。<a href=\"http://whoosh.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"动态消息\"><a href=\"#动态消息\" class=\"headerlink\" title=\"动态消息\"></a>动态消息</h3><p>用来创建用户活动的库。</p>\n<ul>\n<li>django-activity-stream：从你的站点行为中生成通用活动信息流。<a href=\"https://github.com/justquick/django-activity-stream\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Stream-Framework：使用 Cassandra 和 Redis 创建动态消息和通知系统。<a href=\"https://github.com/tschellenbach/Stream-Framework\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"资源管理\"><a href=\"#资源管理\" class=\"headerlink\" title=\"资源管理\"></a>资源管理</h3><p>管理、压缩、缩小网站资源的工具。</p>\n<ul>\n<li>django-compressor：将链接和内联的 JavaScript 或 CSS 压缩到一个单独的缓存文件中。<a href=\"https://github.com/django-compressor/django-compressor\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-storages：一个针对 Django 的自定义存储后端的工具集合。<a href=\"http://django-storages.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>fanstatic：打包、优化，并且把静态文件依赖作为 Python 的包来提供。<a href=\"http://www.fanstatic.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>File Conveyor：一个后台驻留的程序，用来发现和同步文件到 CDNs, S3 和 FTP。<a href=\"http://fileconveyor.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Flask-Assets：帮你将 web 资源整合到你的 Flask app 中。<a href=\"http://flask-assets.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>jinja-assets-compressor：一个 Jinja 扩展，用来编译和压缩你的资源。<a href=\"https://github.com/jaysonsantos/jinja-assets-compressor\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>webassets：为你的静态资源打包、优化和管理生成独一无二的缓存 URL。<a href=\"http://webassets.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>缓存数据的库。</p>\n<ul>\n<li>Beaker：一个缓存和会话库，可以用在 web 应用和独立 Python脚本和应用上。<a href=\"http://beaker.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-cache-machine：Django 模型的自动缓存和失效。<a href=\"https://github.com/django-cache-machine/django-cache-machine\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-cacheops：具有自动颗粒化事件驱动失效功能的 ORM。<a href=\"https://github.com/Suor/django-cacheops\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-viewlet：渲染模板，同时具有额外的缓存控制功能。<a href=\"https://github.com/5monkeys/django-viewlet\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>dogpile.cache：dogpile.cache 是 Beaker 的下一代替代品，由同一作者开发。<a href=\"http://dogpilecache.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>HermesCache：Python 缓存库，具有基于标签的失效和 dogpile effect 保护功能。<a href=\"https://pypi.python.org/pypi/HermesCache\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>johnny-cache：django应用缓存框架。<a href=\"https://github.com/jmoiron/johnny-cache\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pylibmc：<a href=\"http://libmemcached.org/libMemcached.html\" target=\"_blank\" rel=\"external\">libmemcached</a> 接口的 Python 封装。<a href=\"https://github.com/lericson/pylibmc\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"电子邮件\"><a href=\"#电子邮件\" class=\"headerlink\" title=\"电子邮件\"></a>电子邮件</h3><p>用来发送和解析电子邮件的库。</p>\n<ul>\n<li>django-celery-ses：带有 AWS SES 和 Celery 的 Django email 后端。<a href=\"https://github.com/StreetVoice/django-celery-ses\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>envelopes：供人类使用的电子邮件库。<a href=\"http://tomekwojcik.github.io/envelopes/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>flanker：一个 email 地址和 Mime 解析库。<a href=\"https://github.com/mailgun/flanker\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>imbox：Python IMAP 库<a href=\"https://github.com/martinrusev/imbox\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>inbox.py：Python SMTP 服务器。<a href=\"https://github.com/kennethreitz/inbox.py\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>inbox：一个开源电子邮件工具箱。<a href=\"https://github.com/nylas/sync-engine\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>lamson：Python 风格的 SMTP 应用服务器。<a href=\"https://github.com/zedshaw/lamson\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>mailjet：Mailjet API 实现，用来提供批量发送邮件，统计等功能。<a href=\"https://github.com/WoLpH/mailjet\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>marrow.mailer：高性能可扩展邮件分发框架。<a href=\"https://github.com/marrow/mailer\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>modoboa：一个邮件托管和管理平台，具有现代的、简约的 Web UI。<a href=\"https://github.com/tonioo/modoboa\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyzmail：创建，发送和解析电子邮件。<a href=\"http://www.magiksys.net/pyzmail/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Talon：Mailgun 库，用来抽取信息和签名。<a href=\"https://github.com/mailgun/talon\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"国际化\"><a href=\"#国际化\" class=\"headerlink\" title=\"国际化\"></a>国际化</h3><p>用来进行国际化的库。</p>\n<ul>\n<li>Babel：一个Python 的国际化库。<a href=\"http://babel.pocoo.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Korean：一个韩语词态库。<a href=\"https://korean.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"URL处理\"><a href=\"#URL处理\" class=\"headerlink\" title=\"URL处理\"></a>URL处理</h3><p>解析URLs的库</p>\n<ul>\n<li>furl：一个让处理 URL 更简单小型 Python 库。<a href=\"https://github.com/gruns/furl\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>purl：一个简单的，不可变的URL类，具有简洁的 API 来进行询问和处理。<a href=\"https://github.com/codeinthehole/purl\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyshorteners：一个纯 Python URL 缩短库。<a href=\"https://github.com/ellisonleao/pyshorteners\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>shorturl：生成短小 URL 和类似 bit.ly 短链的Python 实现。<a href=\"https://github.com/Alir3z4/python-shorturl\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>webargs：一个解析 HTTP 请求参数的库，内置对流行 web 框架的支持，包括 Flask, Django, Bottle, Tornado和 Pyramid。<a href=\"https://github.com/sloria/webargs\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"HTML处理\"><a href=\"#HTML处理\" class=\"headerlink\" title=\"HTML处理\"></a>HTML处理</h3><p>处理 HTML和XML的库。</p>\n<ul>\n<li>BeautifulSoup：以 Python 风格的方式来对 HTML 或 XML 进行迭代，搜索和修改。<a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>bleach：一个基于白名单的 HTML 清理和文本链接库。<a href=\"http://bleach.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>cssutils：一个 Python 的 CSS 库。<a href=\"https://pypi.python.org/pypi/cssutils/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>html5lib：一个兼容标准的 HTML 文档和片段解析及序列化库。<a href=\"https://github.com/html5lib/html5lib-python\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>lxml：一个非常快速，简单易用，功能齐全的库，用来处理 HTML 和 XML。<a href=\"http://lxml.de/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>MarkupSafe：为Python 实现 XML/HTML/XHTML 标记安全字符串。<a href=\"https://github.com/pallets/markupsafe\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyquery：一个解析 HTML 的库，类似 jQuery。<a href=\"https://github.com/gawel/pyquery\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>untangle：将XML文档转换为Python对象，使其可以方便的访问。<a href=\"https://github.com/stchris/untangle\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>xhtml2pdf：HTML/CSS 转 PDF 工具。<a href=\"https://github.com/xhtml2pdf/xhtml2pdf\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>xmltodict：像处理 JSON 一样处理 XML。<a href=\"https://github.com/martinblech/xmltodict\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<p>爬取网络站点的库</p>\n<ul>\n<li>Scrapy：一个快速高级的屏幕爬取及网页采集框架。<a href=\"http://scrapy.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>cola：一个分布式爬虫框架。<a href=\"https://github.com/chineking/cola\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Demiurge：基于PyQuery 的爬虫微型框架。<a href=\"https://github.com/matiasb/demiurge\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>feedparser：通用 feed 解析器。<a href=\"http://pythonhosted.org/feedparser/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Grab：站点爬取框架。<a href=\"http://grablib.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>MechanicalSoup：用于自动和网络站点交互的 Python 库。<a href=\"https://github.com/hickford/MechanicalSoup\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>portia：Scrapy 可视化爬取。<a href=\"https://github.com/scrapinghub/portia\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyspider：一个强大的爬虫系统。<a href=\"https://github.com/binux/pyspider\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>RoboBrowser：一个简单的，Python 风格的库，用来浏览网站，而不需要一个独立安装的浏览器。<a href=\"https://github.com/jmcarp/robobrowser\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"网页内容提取\"><a href=\"#网页内容提取\" class=\"headerlink\" title=\"网页内容提取\"></a>网页内容提取</h3><p>用于进行网页内容提取的库。</p>\n<ul>\n<li>Haul：一个可以扩展的图像爬取工具。<a href=\"https://github.com/vinta/Haul\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>html2text：将 HTML 转换为 Markdown 格式文本<a href=\"https://github.com/Alir3z4/html2text\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>lassie：人性化的网页内容检索库。<a href=\"https://github.com/michaelhelmick/lassie\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>micawber：一个小型网页内容提取库，用来从 URLs 提取富内容。<a href=\"https://github.com/coleifer/micawber\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-newspaper/\" target=\"_blank\" rel=\"external\">newspaper</a>：使用 Python 进行新闻提取，文章提取以及内容策展。<a href=\"https://github.com/codelucas/newspaper\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>opengraph：一个用来解析开放内容协议(Open Graph Protocol)的 Python模块。<a href=\"https://github.com/erikriver/opengraph\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-goose/\" target=\"_blank\" rel=\"external\">python-goose</a>：HTML内容/文章提取器。<a href=\"https://github.com/grangier/python-goose\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-readability：arc90 公司 readability 工具的 Python 高速端口。<a href=\"https://github.com/buriy/python-readability\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>sanitize：为杂乱的数据世界带来调理性。<a href=\"https://github.com/Alir3z4/python-sanitize\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>sumy：一个为文本文件和 HTML 页面进行自动摘要的模块。<a href=\"https://github.com/miso-belica/sumy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>textract：从任何格式的文档中提取文本，Word，PowerPoint，PDFs 等等。<a href=\"https://github.com/deanmalmgren/textract\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h3><p>进行表单操作的库。</p>\n<ul>\n<li>Deform：Python HTML 表单生成库，受到了 formish 表单生成库的启发。<a href=\"http://deform.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-bootstrap3：集成了 Bootstrap 3 的 Django。<a href=\"https://github.com/dyve/django-bootstrap3\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-crispy-forms：一个 Django 应用，他可以让你以一种非常优雅且 DRY（Don’t repeat yourself） 的方式来创建美观的表单。<a href=\"http://django-crispy-forms.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-remote-forms：一个平台独立的 Django 表单序列化工具。<a href=\"https://github.com/WiserTogether/django-remote-forms\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>WTForms：一个灵活的表单验证和呈现库。<a href=\"http://wtforms.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>WTForms-JSON：一个 WTForms 扩展，用来处理 JSON 数据。<a href=\"http://wtforms-json.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"数据验证\"><a href=\"#数据验证\" class=\"headerlink\" title=\"数据验证\"></a>数据验证</h3><p>数据验证库。多用于表单验证。</p>\n<ul>\n<li>Cerberus：A mappings-validator with a variety of rules, normalization-features and simple customization that uses a pythonic schema-definition.<a href=\"http://docs.python-cerberus.org/en/stable/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>colander：一个用于对从 XML, JSON，HTML 表单获取的数据或其他同样简单的序列化数据进行验证和反序列化的系统。<a href=\"http://docs.pylonsproject.org/projects/colander/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>kmatch：一种用于匹配/验证/筛选 Python 字典的语言。<a href=\"https://github.com/ambitioninc/kmatch\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>schema：一个用于对 Python 数据结构进行验证的库。<a href=\"https://github.com/keleshev/schema\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Schematics：数据结构验证。<a href=\"https://github.com/schematics/schematics\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>valideer：轻量级可扩展的数据验证和适配库。<a href=\"https://github.com/podio/valideer\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>voluptuous：一个 Python 数据验证库。主要是为了验证传入 Python的 JSON，YAML 等数据。<a href=\"https://github.com/alecthomas/voluptuous\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"反垃圾技术\"><a href=\"#反垃圾技术\" class=\"headerlink\" title=\"反垃圾技术\"></a>反垃圾技术</h3><p>帮助你和电子垃圾进行战斗的库。</p>\n<ul>\n<li>django-simple-captcha：一个简单、高度可定制的Django 应用，可以为任何Django表单添加验证码。<a href=\"https://github.com/mbi/django-simple-captcha\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-simple-spam-blocker：一个用于Django的简单的电子垃圾屏蔽工具。<a href=\"https://github.com/moqada/django-simple-spam-blocker\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"标记\"><a href=\"#标记\" class=\"headerlink\" title=\"标记\"></a>标记</h3><p>用来进行标记的库。</p>\n<ul>\n<li>django-taggit：简单的 Django 标记工具。<a href=\"https://github.com/alex/django-taggit\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"管理面板\"><a href=\"#管理面板\" class=\"headerlink\" title=\"管理面板\"></a>管理面板</h3><p>管理界面库。</p>\n<ul>\n<li>Ajenti：一个你的服务器值得拥有的管理面板。<a href=\"https://github.com/Eugeny/ajenti\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-suit：Django 管理界面的一个替代品 (仅对于非商业用途是免费的)。<a href=\"http://djangosuit.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-xadmin：Django admin 的一个替代品，具有很多不错的功能。<a href=\"https://github.com/sshwsfc/django-xadmin\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>flask-admin：一个用于 Flask 的简单可扩展的管理界面框架。<a href=\"https://github.com/flask-admin/flask-admin\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>flower：一个对 Celery 集群进行实时监控和提供 web 管理界面的工具。<a href=\"https://github.com/mher/flower\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Grappelli：Django 管理界面的一个漂亮的皮肤。<a href=\"http://grappelliproject.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Wooey：一个 Django 应用，可以为 Python 脚本创建 web 用户界面。<a href=\"https://github.com/wooey/wooey\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"静态站点生成器\"><a href=\"#静态站点生成器\" class=\"headerlink\" title=\"静态站点生成器\"></a>静态站点生成器</h3><p>静态站点生成器是一个软件，它把文本和模板作为输入，然后输出HTML文件。</p>\n<ul>\n<li>Pelican：使用 Markdown 或 ReST 来处理内容， Jinja 2 来制作主题。支持 DVCS, Disqus.。AGPL 许可。<a href=\"http://blog.getpelican.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Cactus：为设计师设计的静态站点生成器。<a href=\"https://github.com/koenbok/Cactus/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Hyde：基于 Jinja2 的静态站点生成器。<a href=\"http://hyde.github.io/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Nikola：一个静态网站和博客生成器。<a href=\"https://www.getnikola.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Tinkerer：Tinkerer 是一个博客引擎/静态站点生成器，由Sphinx驱动。<a href=\"http://tinkerer.me/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Lektor：一个简单易用的静态 CMS 和博客引擎。<a href=\"https://www.getlektor.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><p>操作系统进程启动及通信库。</p>\n<ul>\n<li>envoy：比 Python <a href=\"https://docs.python.org/2/library/subprocess.html\" target=\"_blank\" rel=\"external\">subprocess</a> 模块更人性化。<a href=\"https://github.com/kennethreitz/envoy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>sarge：另一 种 subprocess 模块的封装。<a href=\"http://sarge.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>sh：一个完备的 subprocess 替代库。<a href=\"https://github.com/amoffat/sh\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"并发和并行\"><a href=\"#并发和并行\" class=\"headerlink\" title=\"并发和并行\"></a>并发和并行</h3><p>用以进行并发和并行操作的库。</p>\n<ul>\n<li>multiprocessing：(Python 标准库) 基于进程的“线程”接口。<a href=\"https://docs.python.org/2/library/multiprocessing.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>threading：(Python 标准库)更高层的线程接口。<a href=\"https://docs.python.org/2/library/threading.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>eventlet：支持 WSGI 的异步框架。<a href=\"http://eventlet.net/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>gevent：一个基于协程的 Python 网络库，使用<a href=\"https://github.com/python-greenlet/greenlet\" target=\"_blank\" rel=\"external\">greenlet</a>。<a href=\"http://www.gevent.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Tomorrow：用于产生异步代码的神奇的装饰器语法实现。<a href=\"https://github.com/madisonmay/Tomorrow\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>uvloop：在libuv之上超快速实现asyncio事件循环。<a href=\"https://github.com/MagicStack/uvloop\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p>用于网络编程的库。</p>\n<ul>\n<li>asyncio：(Python 标准库) 异步 I/O, 事件循环, 协程以及任务。<a href=\"https://docs.python.org/3/library/asyncio.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/twisted/\" target=\"_blank\" rel=\"external\">Twisted</a>：一个事件驱动的网络引擎。<a href=\"https://twistedmatrix.com/trac/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pulsar：事件驱动的并发框架。<a href=\"https://github.com/quantmind/pulsar\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>diesel：基于Greenlet 的事件 I/O 框架。<a href=\"https://github.com/dieseldev/diesel\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyzmq：一个 ZeroMQ 消息库的 Python 封装。<a href=\"http://zeromq.github.io/pyzmq/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>txZMQ：基于 Twisted 的 ZeroMQ 消息库的 Python 封装。<a href=\"https://github.com/smira/txZMQ\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><p>帮助使用WebSocket的库。</p>\n<ul>\n<li>AutobahnPython：给 Python 、使用的 WebSocket &amp; WAMP 基于 Twisted 和 <a href=\"https://docs.python.org/3/library/asyncio.html\" target=\"_blank\" rel=\"external\">asyncio</a>。<a href=\"https://github.com/crossbario/autobahn-python\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Crossbar：开源统一应用路由(Websocket &amp; WAMP for Python on Autobahn).<a href=\"https://github.com/crossbario/crossbar/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-socketio：给 Django 用的 WebSockets。<a href=\"https://github.com/stephenmcd/django-socketio\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>WebSocket-for-Python：为Python2/3 以及 PyPy 编写的 WebSocket 客户端和服务器库。<a href=\"https://github.com/Lawouach/WebSocket-for-Python\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"WSGI-服务器\"><a href=\"#WSGI-服务器\" class=\"headerlink\" title=\"WSGI 服务器\"></a>WSGI 服务器</h3><p>兼容 WSGI 的 web 服务器</p>\n<ul>\n<li>gunicorn：Pre-forked, 部分是由 C 语言编写的。<a href=\"https://pypi.python.org/pypi/gunicorn\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>uwsgi：uwsgi 项目的目的是开发一组全栈工具，用来建立托管服务， 由 C 语言编写。<a href=\"https://uwsgi-docs.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/bjoern/\" target=\"_blank\" rel=\"external\">bjoern</a>：异步，非常快速，由 C 语言编写。<a href=\"https://pypi.python.org/pypi/bjoern\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>fapws3：异步 (仅对于网络端)，由 C 语言编写。<a href=\"http://www.fapws.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>meinheld：异步，部分是由 C 语言编写的。<a href=\"https://pypi.python.org/pypi/meinheld\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>netius：异步，非常快速。<a href=\"https://github.com/hivesolutions/netius\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>paste：多线程，稳定，久经考验。<a href=\"http://pythonpaste.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>rocket：多线程。<a href=\"https://pypi.python.org/pypi/rocket\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>waitress：多线程, 是它驱动着 Pyramid 框架。<a href=\"https://waitress.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Werkzeug：一个 WSGI 工具库，驱动着 Flask ，而且可以很方便大嵌入到你的项目中去。<a href=\"http://werkzeug.pocoo.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"RPC-服务器\"><a href=\"#RPC-服务器\" class=\"headerlink\" title=\"RPC 服务器\"></a>RPC 服务器</h3><p>兼容 RPC 的服务器。</p>\n<ul>\n<li>SimpleJSONRPCServer：这个库是 JSON-RPC 规范的一个实现。<a href=\"https://github.com/joshmarshall/jsonrpclib/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>SimpleXMLRPCServer：(Python 标准库) 简单的 XML-RPC 服务器实现，单线程。<a href=\"https://docs.python.org/2/library/simplexmlrpcserver.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>zeroRPC：zerorpc 是一个灵活的 RPC 实现，基于 ZeroMQ 和 MessagePack。<a href=\"https://github.com/0rpc/zerorpc-python\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"密码学\"><a href=\"#密码学\" class=\"headerlink\" title=\"密码学\"></a>密码学</h3><ul>\n<li>cryptography：这个软件包意在提供密码学基本内容和方法提供给 Python 开发者。<a href=\"https://cryptography.io/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>hashids：在 Python 中实现 <a href=\"http://hashids.org/\" target=\"_blank\" rel=\"external\">hashids</a> 。<a href=\"https://github.com/davidaurelio/hashids-python\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Paramiko：SSHv2 协议的 Python (2.6+, 3.3+) ，提供客户端和服务端的功能。<a href=\"http://www.paramiko.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Passlib：安全密码存储／哈希库，<a href=\"https://pythonhosted.org/passlib/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyCrypto：Python 密码学工具箱。<a href=\"https://www.dlitz.net/software/pycrypto/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyNacl：网络和密码学(NaCl) 库的 Python 绑定。<a href=\"https://github.com/pyca/pynacl\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"图形用户界面\"><a href=\"#图形用户界面\" class=\"headerlink\" title=\"图形用户界面\"></a>图形用户界面</h3><p>用来创建图形用户界面程序的库。</p>\n<ul>\n<li>curses：内建的 <a href=\"http://www.gnu.org/software/ncurses/\" target=\"_blank\" rel=\"external\">ncurses</a> 封装，用来创建终端图形用户界面。<a href=\"https://docs.python.org/2/library/curses.html#module-curses\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>enaml：使用类似 QML 的Declaratic语法来创建美观的用户界面。<a href=\"https://github.com/nucleic/enaml\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/kivy/\" target=\"_blank\" rel=\"external\">kivy</a>：一个用来创建自然用户交互（NUI）应用程序的库，可以运行在 Windows, Linux, Mac OS X, Android 以及 iOS平台上。<a href=\"https://kivy.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyglet：一个Python 的跨平台窗口及多媒体库。<a href=\"https://bitbucket.org/pyglet/pyglet/wiki/Home\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyQt：跨平台用户界面框架 <a href=\"http://www.qt.io/\" target=\"_blank\" rel=\"external\">Qt</a> 的 Python 绑定 ，支持Qt v4 和 Qt v5。<a href=\"https://riverbankcomputing.com/software/pyqt/intro\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PySide：P跨平台用户界面框架 <a href=\"http://www.qt.io/\" target=\"_blank\" rel=\"external\">Qt</a> 的 Python 绑定 ，支持Qt v4。<a href=\"https://wiki.qt.io/PySide\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Tkinter：Tkinter 是 Python GUI 的一个事实标准库。<a href=\"https://wiki.python.org/moin/TkInter\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Toga：一个 Python 原生的, 操作系统原生的 GUI 工具包。<a href=\"https://github.com/pybee/toga\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>urwid：一个用来创建终端 GUI 应用的库，支持组件，事件和丰富的色彩等。<a href=\"http://urwid.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>wxPython：wxPython 是 wxWidgets C++ 类库和 Python 语言混合的产物。<a href=\"http://wxpython.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyGObject：GLib/GObject/GIO/GTK+ (GTK+3) 的 Python 绑定<a href=\"https://wiki.gnome.org/Projects/PyGObject\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Flexx：Flexx 是一个纯 Python 语言编写的用来创建 GUI 程序的工具集，它使用 web 技术进行界面的展示。<a href=\"https://github.com/zoofIO/flexx\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"游戏开发\"><a href=\"#游戏开发\" class=\"headerlink\" title=\"游戏开发\"></a>游戏开发</h3><p>超赞的游戏开发库。</p>\n<ul>\n<li>Cocos2d：cocos2d 是一个用来开发 2D 游戏， 示例和其他图形/交互应用的框架。基于 pyglet。<a href=\"http://cocos2d.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Panda3D：由迪士尼开发的 3D 游戏引擎，并由卡内基梅陇娱乐技术中心负责维护。使用C++编写, 针对 Python 进行了完全的封装。<a href=\"https://www.panda3d.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Pygame：Pygame 是一组 Python 模块，用来编写游戏。<a href=\"http://www.pygame.org/news.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyOgre：Ogre 3D 渲染引擎的 Python 绑定，可以用来开发游戏和仿真程序等任何 3D 应用。<a href=\"http://www.ogre3d.org/tikiwiki/PyOgre\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyOpenGL：OpenGL 的 Python 绑定及其相关 APIs。<a href=\"http://pyopengl.sourceforge.net/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PySDL2：SDL2 库的封装，基于 ctypes。<a href=\"http://pysdl2.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>RenPy：一个视觉小说（visual novel）引擎。<a href=\"https://www.renpy.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><p>用来生成和操作日志的库。</p>\n<ul>\n<li>logging：(Python 标准库) 为 Python 提供日志功能。<a href=\"https://docs.python.org/2/library/logging.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>logbook：Logging 库的替代品。<a href=\"http://pythonhosted.org/Logbook/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Eliot：为复杂的和分布式系统创建日志。<a href=\"https://eliot.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Raven：Sentry的 Python 客户端。<a href=\"http://raven.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Sentry：实时记录和收集日志的服务器。<a href=\"https://pypi.python.org/pypi/sentry\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h3><p>进行代码库测试和生成测试数据的库。</p>\n<ul>\n<li>测试框架<ul>\n<li>unittest：(Python 标准库) 单元测试框架。<a href=\"https://docs.python.org/2/library/unittest.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>nose：nose 扩展了 unittest 的功能。<a href=\"https://nose.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>contexts：一个 Python 3.3+ 的 BDD 框架。受到C# – Machine.Specifications的启发。<a href=\"https://github.com/benjamin-hodgson/Contexts\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>hypothesis：Hypothesis 是一个基于先进的 Quickcheck 风格特性的测试库。<a href=\"https://github.com/DRMacIver/hypothesis\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>mamba：Python 的终极测试工具， 拥护BDD。<a href=\"http://nestorsalceda.github.io/mamba/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyAutoGUI：PyAutoGUI 是一个人性化的跨平台 GUI 自动测试模块。<a href=\"https://github.com/asweigart/pyautogui\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyshould：Should 风格的断言，基于 <a href=\"https://github.com/hamcrest/PyHamcrest\" target=\"_blank\" rel=\"external\">PyHamcrest</a>。<a href=\"https://github.com/drslump/pyshould\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pytest：一个成熟的全功能 Python 测试工具。<a href=\"http://pytest.org/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>green：干净，多彩的测试工具。<a href=\"https://github.com/CleanCut/green\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyvows：BDD 风格的测试工具，受Vows.js的启发。<a href=\"http://heynemann.github.io/pyvows/\" target=\"_blank\" rel=\"external\">官网</a>-</li>\n<li>Robot Framework：一个通用的自动化测试框架。<a href=\"https://github.com/robotframework/robotframework\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>Web 测试<ul>\n<li>Selenium：<a href=\"http://www.seleniumhq.org/\" target=\"_blank\" rel=\"external\">Selenium</a> WebDriver 的 Python 绑定。<a href=\"https://pypi.python.org/pypi/selenium\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>locust：使用 Python 编写的，可扩展的用户加载测试工具。<a href=\"https://github.com/locustio/locust\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>sixpack：一个和语言无关的 A/B 测试框架。<a href=\"https://github.com/seatgeek/sixpack\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>splinter：开源的 web 应用测试工具。<a href=\"https://splinter.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>Mock测试<ul>\n<li>mock：(Python 标准库) 一个用于伪造测试的库。<a href=\"https://docs.python.org/3/library/unittest.mock.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>doublex：Python 的一个功能强大的 doubles  测试框架。<a href=\"https://pypi.python.org/pypi/doublex\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>freezegun：通过伪造日期模块来生成不同的时间。<a href=\"https://github.com/spulec/freezegun\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>httmock：针对 Python 2.6+ 和 3.2+ 生成 伪造请求的库。<a href=\"https://github.com/patrys/httmock\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>httpretty：Python 的 HTTP 请求 mock 工具。<a href=\"http://falcao.it/HTTPretty/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>responses：伪造 Python 中的 requests 库的一个通用库。<a href=\"https://github.com/getsentry/responses\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>VCR.py：在你的测试中记录和重放 HTTP 交互。<a href=\"https://github.com/kevin1024/vcrpy\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>对象工厂<ul>\n<li>factoryboy：一个 Python 用的测试固件 (test fixtures) 替代库。<a href=\"https://github.com/rbarrois/factoryboy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>mixer：另外一个测试固件 (test fixtures) 替代库，支持 Django, Flask, SQLAlchemy, Peewee 等。<a href=\"https://github.com/klen/mixer\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>modelmommy：为 Django 测试创建随机固件<a href=\"https://github.com/vandersonmota/modelmommy\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>代码覆盖率<ul>\n<li>coverage：代码覆盖率测量。<a href=\"https://pypi.python.org/pypi/coverage\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>伪数据<ul>\n<li>faker：一个 Python 库，用来生成伪数据。<a href=\"http://www.joke2k.net/faker/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>fake2db：伪数据库生成器。<a href=\"https://github.com/emirozer/fake2db\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>radar：生成随机的日期/时间。<a href=\"https://pypi.python.org/pypi/radar\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>错误处理<ul>\n<li>FuckIt.py：FuckIt.py 使用最先进的技术来保证你的 Python 代码无论对错都能继续运行。<a href=\"https://github.com/ajalt/fuckitpy\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码分析和Lint工具\"><a href=\"#代码分析和Lint工具\" class=\"headerlink\" title=\"代码分析和Lint工具\"></a>代码分析和Lint工具</h3><p>进行代码分析，解析和操作代码库的库和工具。</p>\n<ul>\n<li>代码分析<ul>\n<li>coala：语言独立和易于扩展的代码分析应用程序。<a href=\"http://coala-analyzer.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>code2flow：把你的 Python 和 JavaScript 代码转换为流程图。<a href=\"https://github.com/scottrogowski/code2flow\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pycallgraph：这个库可以把你的Python 应用的流程(调用图)进行可视化。<a href=\"https://github.com/gak/pycallgraph\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pysonar2：Python 类型推断和检索工具。<a href=\"https://github.com/yinwang0/pysonar2\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>Lint工具<ul>\n<li>Flake8：模块化源码检查工具: pep8, pyflakes 以及 co。<a href=\"https://pypi.python.org/pypi/flake8\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Pylint：一个完全可定制的源码分析器。<a href=\"https://www.pylint.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pylama：Python 和 JavaScript 的代码审查工具。<a href=\"https://pylama.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>代码格式化<ul>\n<li>autopep8：自动格式化 Python 代码，以使其符合 PEP8 规范。<a href=\"https://github.com/hhatto/autopep8\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Debugging-Tools\"><a href=\"#Debugging-Tools\" class=\"headerlink\" title=\"Debugging Tools\"></a>Debugging Tools</h3><p>用来进行代码调试的库。</p>\n<ul>\n<li>调试器<ul>\n<li>ipdb：IPython 启用的 <a href=\"https://docs.python.org/2/library/pdb.html\" target=\"_blank\" rel=\"external\">pdb</a>。<a href=\"https://pypi.python.org/pypi/ipdb\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pudb：全屏，基于控制台的 Python 调试器。<a href=\"https://pypi.python.org/pypi/pudb\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyringe：可以在 Python 进程中附加和注入代码的调试器。<a href=\"https://github.com/google/pyringe\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>wdb：一个奇异的 web 调试器，通过 WebSockets 工作。<a href=\"https://github.com/Kozea/wdb\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>winpdb：一个具有图形用户界面的 Python 调试器，可以进行远程调试，基于 rpdb2。<a href=\"http://winpdb.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-debug-toolbar：为 Django 显示各种调试信息。<a href=\"https://github.com/django-debug-toolbar/django-debug-toolbar\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-devserver：一个 Django 运行服务器的替代品。<a href=\"https://github.com/dcramer/django-devserver\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>flask-debugtoolbar：django-debug-toolbar 的 flask 版。<a href=\"https://github.com/mgood/flask-debugtoolbar\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>性能分析器<ul>\n<li>lineprofiler：逐行性能分析。<a href=\"https://github.com/rkern/lineprofiler\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/memory_profiler/\" target=\"_blank\" rel=\"external\">Memory Profiler</a>：监控 Python 代码的内存使用。<a href=\"http://pypi.python.org/pypi/memory_profiler\" target=\"_blank\" rel=\"external\">官网</a>、<a href=\"https://github.com/fabianp/memoryprofiler\" target=\"_blank\" rel=\"external\">内存</a></li>\n<li>profiling：一个交互式 Python 性能分析工具。<a href=\"https://github.com/what-studio/profiling\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>其他<ul>\n<li>pyelftools：解析和分析 ELF 文件以及 DWARF 调试信息。<a href=\"https://github.com/eliben/pyelftools\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-statsd：<a href=\"https://github.com/etsy/statsd/\" target=\"_blank\" rel=\"external\">statsd</a> 服务器的 Python 客户端。<a href=\"https://github.com/WoLpH/python-statsd\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Science-and-Data-Analysis\"><a href=\"#Science-and-Data-Analysis\" class=\"headerlink\" title=\"Science and Data Analysis\"></a>Science and Data Analysis</h3><p>用来进行科学计算和数据分析的库。</p>\n<ul>\n<li>astropy：一个天文学 Python 库。<a href=\"http://www.astropy.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/bcbio-nextgen/\" target=\"_blank\" rel=\"external\">bcbio-nextgen</a>：这个工具箱为全自动高通量测序分析提供符合最佳实践的处理流程。<a href=\"https://github.com/chapmanb/bcbio-nextgen\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>bccb：生物分析相关代码集合<a href=\"https://github.com/chapmanb/bcbb\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Biopython：Biopython 是一组可以免费使用的用来进行生物计算的工具。<a href=\"http://biopython.org/wiki/MainPage\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/blaze/\" target=\"_blank\" rel=\"external\">blaze</a>：NumPy 和 Pandas 的大数据接口。<a href=\"http://blaze.readthedocs.org/en/latest/index.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/cclib/\" target=\"_blank\" rel=\"external\">cclib</a>：一个用来解析和解释计算化学软件包输出结果的库。<a href=\"http://cclib.github.io/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>NetworkX：一个为复杂网络设计的高性能软件。<a href=\"https://networkx.github.io/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Neupy：执行和测试各种不同的人工神经网络算法。<a href=\"http://neupy.com/pages/home.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Numba：Python JIT (just in time) 编译器，针对科学用的 Python ，由Cython 和 NumPy 的开发者开发。<a href=\"http://numba.pydata.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/numpy/\" target=\"_blank\" rel=\"external\">NumPy</a>：使用 Python 进行科学计算的基础包。<a href=\"http://www.numpy.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Open Babel：一个化学工具箱，用来描述多种化学数据。<a href=\"http://openbabel.org/wiki/MainPage\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/open-mining/\" target=\"_blank\" rel=\"external\">Open Mining</a>：使用 Python 挖掘商业情报 (BI) (Pandas web 接口)。<a href=\"https://github.com/mining/mining\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/orange/\" target=\"_blank\" rel=\"external\">orange</a>：通过可视化编程或 Python 脚本进行数据挖掘，数据可视化，分析和机器学习。<a href=\"http://orange.biolab.si/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Pandas：提供高性能，易用的数据结构和数据分析工具。<a href=\"http://pandas.pydata.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyDy：PyDy 是 Python Dynamics 的缩写，用来为动力学运动建模工作流程提供帮助， 基于 NumPy, SciPy, IPython 和 matplotlib。<a href=\"http://www.pydy.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/pymc/\" target=\"_blank\" rel=\"external\">PyMC</a>：马尔科夫链蒙特卡洛采样工具。<a href=\"https://github.com/pymc-devs/pymc3\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>RDKit：化学信息学和机器学习软件。<a href=\"http://www.rdkit.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/scipy/\" target=\"_blank\" rel=\"external\">SciPy</a>：由一些基于 Python ，用于数学，科学和工程的开源软件构成的生态系统。<a href=\"http://www.scipy.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/statsmodels/\" target=\"_blank\" rel=\"external\">statsmodels</a>：统计建模和计量经济学。<a href=\"https://github.com/statsmodels/statsmodels\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>SymPy：一个用于符号数学的 Python 库。<a href=\"https://github.com/sympy/sympy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>zipline：一个 Python 算法交易库。<a href=\"https://github.com/quantopian/zipline\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/bayesian-belief-networks/\" target=\"_blank\" rel=\"external\">Bayesian-belief-networks</a>：优雅的贝叶斯信念网络框架。<a href=\"https://github.com/eBay/bayesian-belief-networks\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>keras: 以tensorflow或者theano为后端的深度学习封装库，快速上手神经网络<a href=\"https://keras.io/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"数据可视化\"><a href=\"#数据可视化\" class=\"headerlink\" title=\"数据可视化\"></a>数据可视化</h3><p>进行数据可视化的库。 参见: <a href=\"https://github.com/sorrycc/awesome-javascript#data-visualization\" target=\"_blank\" rel=\"external\">awesome-javascript</a>。</p>\n<ul>\n<li>matplotlib：一个 Python 2D 绘图库。<a href=\"http://matplotlib.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>bokeh：用 Python 进行交互式 web 绘图。<a href=\"https://github.com/bokeh/bokeh\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>ggplot：ggplot2 给 R 提供的 API 的 Python 版本。<a href=\"https://github.com/yhat/ggplot\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>plotly：协同 Python 和 matplotlib 工作的 web 绘图库。<a href=\"https://plot.ly/python/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pygal：一个 Python SVG 图表创建工具。<a href=\"http://www.pygal.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pygraphviz：Graphviz 的 Python 接口。<a href=\"https://pypi.python.org/pypi/pygraphviz\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyQtGraph：交互式实时2D/3D/图像绘制及科学/工程学组件。<a href=\"http://www.pyqtgraph.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>SnakeViz：一个基于浏览器的 Python’s cProfile 模块输出结果查看工具。<a href=\"http://jiffyclub.github.io/snakeviz/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>vincent：把 Python 转换为 Vega 语法的转换工具。<a href=\"https://github.com/wrobstory/vincent\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>VisPy：基于 OpenGL 的高性能科学可视化工具。<a href=\"http://vispy.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"计算机视觉\"><a href=\"#计算机视觉\" class=\"headerlink\" title=\"计算机视觉\"></a>计算机视觉</h3><p>计算机视觉库。</p>\n<ul>\n<li>OpenCV：开源计算机视觉库。<a href=\"http://opencv.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pyocr：Tesseract和Cuneiform的包装库。<a href=\"https://github.com/jflesch/pyocr\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pytesseract：<a href=\"https://github.com/tesseract-ocr\" target=\"_blank\" rel=\"external\">Google Tesseract OCR</a>的另一包装库。<a href=\"https://github.com/madmaze/pytesseract\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/simplecv/\" target=\"_blank\" rel=\"external\">SimpleCV</a>：一个用来创建计算机视觉应用的开源框架。<a href=\"http://simplecv.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h3><p>机器学习库。 参见: <a href=\"https://github.com/josephmisiti/awesome-machine-learning#python\" target=\"_blank\" rel=\"external\">awesome-machine-learning</a>.</p>\n<ul>\n<li>Crab：灵活、快速的推荐引擎。<a href=\"https://github.com/muricoca/crab\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>gensim：人性化的话题建模库。<a href=\"https://github.com/piskvorky/gensim\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>hebel：GPU 加速的深度学习库。<a href=\"https://github.com/hannes-brt/hebel\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>NuPIC：智能计算 Numenta 平台。<a href=\"https://github.com/numenta/nupic\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pattern：Python 网络挖掘模块。<a href=\"https://github.com/clips/pattern\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/pybrain/\" target=\"_blank\" rel=\"external\">PyBrain</a>：另一个 Python 机器学习库。<a href=\"https://github.com/pybrain/pybrain\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/pylearn2/\" target=\"_blank\" rel=\"external\">Pylearn2</a>：一个基于 <a href=\"https://github.com/Theano/Theano\" target=\"_blank\" rel=\"external\">Theano</a> 的机器学习库。<a href=\"https://github.com/lisa-lab/pylearn2\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-recsys/\" target=\"_blank\" rel=\"external\">python-recsys</a>：一个用来实现推荐系统的 Python 库。<a href=\"https://github.com/ocelma/python-recsys\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>scikit-learn：基于 SciPy 构建的机器学习 Python 模块。<a href=\"http://scikit-learn.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pydeep：Python 深度学习库。<a href=\"https://github.com/andersbll/deeppy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>vowpalporpoise：轻量级 <a href=\"https://github.com/JohnLangford/vowpalwabbit/\" target=\"_blank\" rel=\"external\">Vowpal Wabbit</a> 的 Python 封装。<a href=\"https://github.com/josephreisinger/vowpalporpoise\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>skflow：一个 <a href=\"https://github.com/tensorflow/tensorflow\" target=\"_blank\" rel=\"external\">TensorFlow</a> 的简化接口(模仿 scikit-learn)。<a href=\"https://github.com/tensorflow/skflow\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"MapReduce\"><a href=\"#MapReduce\" class=\"headerlink\" title=\"MapReduce\"></a>MapReduce</h3><p>MapReduce 框架和库。</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/dpark/\" target=\"_blank\" rel=\"external\">dpark</a>：Spark 的 Python 克隆版，一个类似 MapReduce 的框架。<a href=\"https://github.com/douban/dpark\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>dumbo：这个 Python 模块可以让人轻松的编写和运行 Hadoop 程序。<a href=\"https://github.com/klbostee/dumbo\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>luigi：这个模块帮你构建批处理作业的复杂流水线。<a href=\"https://github.com/spotify/luigi\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>mrjob：在 Hadoop 或 Amazon Web Services 上运行 MapReduce 任务。<a href=\"https://github.com/Yelp/mrjob\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PySpark：Spark 的 Python API 。<a href=\"http://spark.apache.org/docs/latest/programming-guide.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>streamparse：运行针对事实数据流的 Python 代码。集成了<a href=\"http://storm.apache.org/\" target=\"_blank\" rel=\"external\">Apache Storm</a>。<a href=\"https://github.com/Parsely/streamparse\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h3><p>使用 Python 进行函数式编程。</p>\n<ul>\n<li>CyToolz：Toolz 的 Cython 实现 : 高性能函数式工具。<a href=\"https://github.com/pytoolz/cytoolz/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>fn.py：在 Python 中进行函数式编程 : 实现了一些享受函数式编程缺失的功能。<a href=\"https://github.com/kachayev/fn.py\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>funcy：炫酷又实用的函数式工具。<a href=\"https://github.com/Suor/funcy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Toolz：一组用于迭代器，函数和字典的函数式编程工具。<a href=\"https://github.com/pytoolz/toolz\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"第三方-API\"><a href=\"#第三方-API\" class=\"headerlink\" title=\"第三方 API\"></a>第三方 API</h3><p>用来访问第三方 API的库。 参见： <a href=\"https://github.com/realpython/list-of-python-api-wrappers\" target=\"_blank\" rel=\"external\">List of Python API Wrappers and Libraries</a>。</p>\n<ul>\n<li>apache-libcloud：一个为各种云设计的 Python 库。<a href=\"https://libcloud.apache.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>boto：Amazon Web Services 的 Python 接口。<a href=\"https://github.com/boto/boto\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-wordpress：WordPress models and views for Django.<a href=\"https://github.com/sunlightlabs/django-wordpress/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>facebook-sdk：Facebook 平台的 Python SDK.<a href=\"https://github.com/mobolic/facebook-sdk\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>facepy：Facepy 让和 Facebook’s Graph API 的交互变得更容易。<a href=\"https://github.com/jgorset/facepy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>gmail：Gmail 的 Python 接口。<a href=\"https://github.com/charlierguo/gmail\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>google-api-python-client：Python 用的 Google APIs 客户端库。<a href=\"https://github.com/google/google-api-python-client\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>gspread：Google 电子表格的 Python API.<a href=\"https://github.com/burnash/gspread\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>twython：Twitter API 的封装。<a href=\"https://github.com/ryanmcgrath/twython\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"DevOps-工具\"><a href=\"#DevOps-工具\" class=\"headerlink\" title=\"DevOps 工具\"></a>DevOps 工具</h3><p>用于 DevOps 的软件和库。</p>\n<ul>\n<li>Ansible：一个非常简单的 IT 自动化平台。<a href=\"https://github.com/ansible/ansible\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>SaltStack：基础设施自动化和管理系统。<a href=\"https://github.com/saltstack/salt\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>OpenStack：用于构建私有和公有云的开源软件。<a href=\"http://www.openstack.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Docker Compose：快速，分离的开发环境，使用 Docker。<a href=\"https://docs.docker.com/compose/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Fabric：一个简单的，Python 风格的工具，用来进行远程执行和部署。<a href=\"http://www.fabfile.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>cuisine：为 Fabric 提供一系列高级函数。<a href=\"https://github.com/sebastien/cuisine\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Fabtools：一个用来编写超赞的 Fabric 文件的工具。<a href=\"https://github.com/ronnix/fabtools\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>gitapi：Git 的纯 Python API。<a href=\"https://bitbucket.org/haard/gitapi\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>hgapi：Mercurial 的纯 Python API。<a href=\"https://bitbucket.org/haard/hgapi\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>honcho：<a href=\"https://github.com/ddollar/foreman\" target=\"_blank\" rel=\"external\">Foreman</a>的 Python 克隆版，用来管理基于<a href=\"https://devcenter.heroku.com/articles/procfile\" target=\"_blank\" rel=\"external\">Procfile</a>的应用。<a href=\"https://github.com/nickstenning/honcho\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pexpect：Controlling interactive programs in a pseudo-terminal like 在一个伪终端中控制交互程序，就像 GNU expect 一样。<a href=\"https://github.com/pexpect/pexpect\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>psutil：一个跨平台进程和系统工具模块。<a href=\"https://github.com/giampaolo/psutil\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>supervisor：UNIX 的进程控制系统。<a href=\"https://github.com/Supervisor/supervisor\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h3><p>任务调度库。</p>\n<ul>\n<li>APScheduler：轻巧但强大的进程内任务调度，使你可以调度函数。<a href=\"http://apscheduler.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>django-schedule：一个 Django 排程应用。<a href=\"https://github.com/thauber/django-schedule\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>doit：一个任务执行和构建工具。<a href=\"http://pydoit.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>gunnery：分布式系统使用的多用途任务执行工具 ，具有 web 交互界面。<a href=\"https://github.com/gunnery/gunnery\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Joblib：一组为 Python 提供轻量级作业流水线的工具。<a href=\"http://pythonhosted.org/joblib/index.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Plan：如有神助地编写 crontab 文件。<a href=\"https://github.com/fengsp/plan\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>schedule：人性化的 Python 任务调度库。<a href=\"https://github.com/dbader/schedule\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Spiff：使用纯 Python 实现的强大的工作流引擎。<a href=\"https://github.com/knipknap/SpiffWorkflow\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>TaskFlow：一个可以让你方便执行任务的 Python 库，一致并且可靠。<a href=\"http://docs.openstack.org/developer/taskflow/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"外来函数接口\"><a href=\"#外来函数接口\" class=\"headerlink\" title=\"外来函数接口\"></a>外来函数接口</h3><p>使用外来函数接口的库。</p>\n<ul>\n<li>cffi：用来调用 C 代码的外来函数接口。<a href=\"https://pypi.python.org/pypi/cffi\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/ctypes/\" target=\"_blank\" rel=\"external\">ctypes</a>：(Python 标准库) 用来调用 C 代码的外来函数接口。<a href=\"https://docs.python.org/2/library/ctypes.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyCUDA：Nvidia CUDA API 的封装。<a href=\"https://mathema.tician.de/software/pycuda/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>SWIG：简化的封装和接口生成器。<a href=\"http://www.swig.org/Doc1.3/Python.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"高性能\"><a href=\"#高性能\" class=\"headerlink\" title=\"高性能\"></a>高性能</h3><p>让 Python 更快的库。</p>\n<ul>\n<li>Cython：优化的 Python 静态编译器。使用类型混合使 Python 编译成 C 或 C++ 模块来获得性能的极大提升。<a href=\"http://cython.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PeachPy：嵌入 Python 的 x86-64 汇编器。可以被用作 Python 内联的汇编器或者是独立的汇编器，用于 Windows, Linux, OS X, Native Client 或者 Go 。<a href=\"https://github.com/Maratyszcza/PeachPy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyPy：使用 Python 实现的 Python。解释器使用黑魔法加快 Python 运行速度且不需要加入额外的类型信息。<a href=\"http://pypy.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/pyston-llvm-jit/\" target=\"_blank\" rel=\"external\">Pyston</a>：使用 LLVM 和现代 JIT 技术构建的 Python 实现，目标是为了获得很好的性能。<a href=\"https://github.com/dropbox/pyston\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Stackless Python：一个强化版的 Python。<a href=\"https://bitbucket.org/stackless-dev/stackless/overview\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"微软的-Windows平台\"><a href=\"#微软的-Windows平台\" class=\"headerlink\" title=\"微软的 Windows平台\"></a>微软的 Windows平台</h3><p>在 Windows 平台上进行 Python 编程。</p>\n<ul>\n<li>Python(x,y)：面向科学应用的 Python 发行版，基于 Qt 和 Spyder。<a href=\"http://python-xy.github.io/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pythonlibs：非官方的 Windows 平台 Python 扩展二进制包。<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PythonNet：Python 与 .NET 公共语言运行库 (CLR)的集成。<a href=\"https://github.com/pythonnet/pythonnet\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyWin32：针对 Windows 的Python 扩展。<a href=\"https://sourceforge.net/projects/pywin32/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>WinPython：Windows 7/8 系统下便携式开发环境。<a href=\"https://winpython.github.io/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"网络可视化和SDN\"><a href=\"#网络可视化和SDN\" class=\"headerlink\" title=\"网络可视化和SDN\"></a>网络可视化和SDN</h3><p>用来进行网络可视化和SDN(软件定义网络)的工具和库。</p>\n<ul>\n<li>Mininet：一款流行的网络模拟器以及用 Python 编写的 API。<a href=\"http://mininet.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>POX：一个针对基于 Python 的软件定义网络应用（例如 OpenFlow SDN 控制器）的开源开发平台。<a href=\"https://github.com/noxrepo/pox\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Pyretic：火热的 SDN 编程语言中的一员，为网络交换机和模拟器提供强大的抽象能力。<a href=\"http://frenetic-lang.org/pyretic/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>SDX Platform：基于 SDN 的 IXP 实现，影响了 Mininet, POX 和 Pyretic。<a href=\"https://github.com/sdn-ixp/internet2award\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h3><p>用来对硬件进行编程的库。</p>\n<ul>\n<li>ino：操作<a href=\"https://www.arduino.cc/\" target=\"_blank\" rel=\"external\">Arduino</a>的命令行工具。<a href=\"http://inotool.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Pyro：Python 机器人编程库。<a href=\"http://pyrorobotics.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>PyUserInput：跨平台的，控制鼠标和键盘的模块。<a href=\"https://github.com/SavinaRoja/PyUserInput\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>scapy：一个非常棒的操作数据包的库。<a href=\"https://github.com/secdev/scapy\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>wifi：一个 Python 库和命令行工具用来在 Linux 平台上操作WiFi。<a href=\"https://wifi.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Pingo：Pingo 为类似Raspberry Pi，pcDuino， Intel Galileo等设备提供统一的API用以编程。<a href=\"http://www.pingo.io/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>帮助从 Python 2 向 Python 3迁移的库。</p>\n<ul>\n<li>Python-Future：这就是 Python 2 和 Python 3 之间丢失的那个兼容性层。<a href=\"http://python-future.org/index.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Python-Modernize：使 Python 代码更加现代化以便最终迁移到 Python 3。<a href=\"https://github.com/mitsuhiko/python-modernize\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Six：Python 2 和 3 的兼容性工具。<a href=\"https://pypi.python.org/pypi/six\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><p>不属于上面任何一个类别，但是非常有用的库。</p>\n<ul>\n<li>blinker：一个快速的 Python 进程内信号/事件分发系统。<a href=\"https://github.com/jek/blinker\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>itsdangerous：一系列辅助工具用来将可信的数据传入不可信的环境。<a href=\"https://github.com/pallets/itsdangerous\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>pluginbase：一个简单但是非常灵活的 Python 插件系统。<a href=\"https://github.com/mitsuhiko/pluginbase\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Pychievements：一个用来创建和追踪成就的 Python 框架。<a href=\"https://github.com/PacketPerception/pychievements\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/tryton/\" target=\"_blank\" rel=\"external\">Tryton</a>：一个通用商务框架。<a href=\"http://www.tryton.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"算法和设计模式\"><a href=\"#算法和设计模式\" class=\"headerlink\" title=\"算法和设计模式\"></a>算法和设计模式</h3><p>Python 实现的算法和设计模式。</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/algorithms/\" target=\"_blank\" rel=\"external\">algorithms</a>：一个 Python 算法模块。<a href=\"https://github.com/nryoung/algorithms\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>python-patterns：Python 设计模式的集合。<a href=\"https://github.com/faif/python-patterns\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>sortedcontainers：快速，纯 Python 实现的SortedList，SortedDict 和 SortedSet 类型。<a href=\"http://www.grantjenks.com/docs/sortedcontainers/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"编辑器插件\"><a href=\"#编辑器插件\" class=\"headerlink\" title=\"编辑器插件\"></a>编辑器插件</h3><p>编辑器和 IDE 的插件</p>\n<ul>\n<li>Emacs<ul>\n<li>Elpy：Emacs Python 开发环境。<a href=\"https://github.com/jorgenschaefer/elpy\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>Sublime Text<ul>\n<li>SublimeJEDI：一个 Sublime Text 插件，用来使用超赞的自动补全库 Jedi。<a href=\"https://github.com/srusskih/SublimeJEDI\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Anaconda：Anaconda 把你的 Sublime Text 3 变成一个功能齐全的 Python IDE。<a href=\"https://github.com/DamnWidget/anaconda\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>Vim<ul>\n<li><a href=\"http://hao.jobbole.com/youcompleteme/\" target=\"_blank\" rel=\"external\">YouCompleteMe</a>：引入基于 <a href=\"https://github.com/davidhalter/jedi\" target=\"_blank\" rel=\"external\">Jedi</a> 的 Python 自动补全引擎。<a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Jedi-vim：绑定 Vim 和 Jedi 自动补全库对 Python 进行自动补全。<a href=\"https://github.com/davidhalter/jedi-vim\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Python-mode：将 Vim 变成 Python IDE 的一款多合一插件。<a href=\"https://github.com/klen/python-mode\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n<li>Visual Studio<ul>\n<li>PTVS：Visual Studio 的 Python 工具<a href=\"https://github.com/Microsoft/PTVS\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"集成开发环境\"><a href=\"#集成开发环境\" class=\"headerlink\" title=\"集成开发环境\"></a>集成开发环境</h3><p>流行的 Python 集成开发环境。</p>\n<ul>\n<li>PyCharm：商业化的 Python IDE ，由 JetBrains 开发。也有免费的社区版提供。<a href=\"https://www.jetbrains.com/pycharm/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>LiClipse：基于 Eclipse 的免费多语言 IDE 。使用 PyDev 来支持 Python 。<a href=\"http://www.liclipse.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Spyder：开源 Python IDE。<a href=\"https://github.com/spyder-ide/spyder\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"自动聊天工具\"><a href=\"#自动聊天工具\" class=\"headerlink\" title=\"自动聊天工具\"></a>自动聊天工具</h3><p>用于开发聊天机器人的库</p>\n<ul>\n<li>Errbot：最简单和最流行的聊天机器人用来实现自动聊天工具。<a href=\"http://errbot.io/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><p>在线工具和简化开发的 API 。</p>\n<h3 id=\"持续集成\"><a href=\"#持续集成\" class=\"headerlink\" title=\"持续集成\"></a>持续集成</h3><p>参见: <a href=\"https://github.com/ciandcd/awesome-ciandcd#online-build-system\" target=\"_blank\" rel=\"external\">awesome-CIandCD</a>.</p>\n<ul>\n<li>Travis CI：一个流行的工具，为你的开源和<a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"external\">私人</a>项目提供持续集成服务。(仅支持 GitHub)<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>CircleCI：一个持续集成工具，可以非常快速的进行并行测试。 (仅支持 GitHub)<a href=\"https://circleci.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Vexor CI：一个为私人 app 提供持续集成的工具，支持按分钟付费。<a href=\"https://vexor.io/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>Wercker：基于 Docker 平台，用来构建和部署微服务。<a href=\"http://wercker.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h3 id=\"代码质量\"><a href=\"#代码质量\" class=\"headerlink\" title=\"代码质量\"></a>代码质量</h3><ul>\n<li>Codacy：自动化代码审查，更加快速的发布高质量代码。对于开源项目是免费的。<a href=\"https://www.codacy.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li>QuantifiedCode：一个数据驱动、自动、持续的代码审查工具。<a href=\"https://www.quantifiedcode.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><p>在这里可以找到新的 Python 库。</p>\n<h3 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h3><ul>\n<li><a href=\"https://www.reddit.com/r/python\" target=\"_blank\" rel=\"external\">r/Python</a></li>\n<li><a href=\"https://www.coolgithubprojects.com/\" target=\"_blank\" rel=\"external\">CoolGithubProjects</a></li>\n<li><a href=\"https://www.djangopackages.com/\" target=\"_blank\" rel=\"external\">Django Packages</a></li>\n<li><a href=\"http://www.fullstackpython.com/\" target=\"_blank\" rel=\"external\">Full Stack Python</a></li>\n<li><a href=\"http://python3wos.appspot.com/\" target=\"_blank\" rel=\"external\">Python 3 Wall of Superpowers</a></li>\n<li><a href=\"http://pythonhackers.com/open-source/\" target=\"_blank\" rel=\"external\">Python Hackers</a></li>\n<li><a href=\"https://python.zeef.com/alan.richmond\" target=\"_blank\" rel=\"external\">Python ZEEF</a></li>\n<li><a href=\"https://github.com/trending?l=python\" target=\"_blank\" rel=\"external\">Trending Python repositories on GitHub today</a></li>\n<li><a href=\"http://pypi-ranking.info/alltime\" target=\"_blank\" rel=\"external\">PyPI Ranking</a></li>\n</ul>\n<h3 id=\"周刊\"><a href=\"#周刊\" class=\"headerlink\" title=\"周刊\"></a>周刊</h3><ul>\n<li><a href=\"http://importpython.com/newsletter/\" target=\"_blank\" rel=\"external\">Import Python Newsletter</a></li>\n<li><a href=\"http://pycoders.com/\" target=\"_blank\" rel=\"external\">Pycoder’s Weekly</a></li>\n<li><a href=\"http://www.pythonweekly.com/\" target=\"_blank\" rel=\"external\">Python Weekly</a></li>\n</ul>\n<h3 id=\"Twitter\"><a href=\"#Twitter\" class=\"headerlink\" title=\"Twitter\"></a>Twitter</h3><ul>\n<li><a href=\"https://twitter.com/codetengu\" target=\"_blank\" rel=\"external\">@codetengu</a></li>\n<li><a href=\"https://twitter.com/getpy\" target=\"_blank\" rel=\"external\">@getpy</a></li>\n<li><a href=\"https://twitter.com/planetpython\" target=\"_blank\" rel=\"external\">@planetpython</a></li>\n<li><a href=\"https://twitter.com/pycoders\" target=\"_blank\" rel=\"external\">@pycoders</a></li>\n<li><a href=\"https://twitter.com/pypi\" target=\"_blank\" rel=\"external\">@pypi</a></li>\n<li><a href=\"https://twitter.com/pythontrending\" target=\"_blank\" rel=\"external\">@pythontrending</a></li>\n<li><a href=\"https://twitter.com/PythonWeekly\" target=\"_blank\" rel=\"external\">@PythonWeekly</a></li>\n</ul>\n<h3 id=\"学习指南\"><a href=\"#学习指南\" class=\"headerlink\" title=\"学习指南\"></a>学习指南</h3><ul>\n<li><a href=\"http://hao.jobbole.com/scipy-lecture-notes/\" target=\"_blank\" rel=\"external\">Scipy-lecture-notes</a>：如何用Python来做学术？<a href=\"https://github.com/scipy-lectures/scipy-lecture-notes\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/scientific-python-lectures/\" target=\"_blank\" rel=\"external\">SScientific-python-lectures</a>：Python科学计算的资料。<a href=\"https://github.com/jrjohansson/scientific-python-lectures\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/mario-level-1/\" target=\"_blank\" rel=\"external\">Mario-Level-1</a>：用Python和Pygame写的超级马里奥第一关。<a href=\"https://github.com/justinmeister/Mario-Level-1\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-koans/\" target=\"_blank\" rel=\"external\">Python Koans</a>：Python的交互式学习工具。<a href=\"https://github.com/gregmalcolm/python_koans\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/minecraft-python/\" target=\"_blank\" rel=\"external\">Minecraft</a>：用python写的Minecraft游戏。<a href=\"https://github.com/fogleman/Minecraft\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-pycrumbs/\" target=\"_blank\" rel=\"external\">pycrumbs</a>：Python资源大全。<a href=\"https://github.com/kirang89/pycrumbs/blob/master/pycrumbs.md\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-patterns/\" target=\"_blank\" rel=\"external\">python-patterns</a>：使用python实现设计模式。<a href=\"https://github.com/faif/python-patterns\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-projects/\" target=\"_blank\" rel=\"external\">Projects</a>：Python项目大集合。<a href=\"https://github.com/karan/Projects\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/the-hitchhikers-guide-to-python/\" target=\"_blank\" rel=\"external\">The Hitchhiker’s Guide to Python</a>：旅行者的Python学习指南。<a href=\"http://docs.python-guide.org/en/latest/\" target=\"_blank\" rel=\"external\">官网</a></li>\n<li><a href=\"http://top.jobbole.com/18767/\" target=\"_blank\" rel=\"external\">Code Like a Pythonista: Idiomatic Python</a>：如何像Python高手(Pythonista)一样编程。<a href=\"http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<p></p><h3 id=\"websites\">知名网站</h3><br><em>值得关注的 Python 技术站点。</em><p></p>\n<h4>中文站点</h4>\n\n<ul>\n<li>伯乐在线 Python 频道：分享 Python 开发技术、相关的行业动态。<a href=\"http://python.jobbole.com/\" target=\"_blank\" rel=\"external\">官网</a></li>\n</ul>\n<h4>英文站点</h4>\n\n<ul>\n<li>《<a href=\"http://python.jobbole.com/81730/\" target=\"_blank\" rel=\"external\">值得关注的 10 个 Python 英文博客</a>》</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"写在最前\"><a href=\"#写在最前\" class=\"headerlink\" title=\"写在最前\"></a>写在最前</h1><p>这是一个笔记，方便自己查询，详情请看原出处<a href=\"https://github.com/jobbole/awesome-python-cn\">awesome-python-cn</a></p>\n<hr>\n<h1 id=\"Python-资源大全中文版\"><a href=\"#Python-资源大全中文版\" class=\"headerlink\" title=\"Python 资源大全中文版\"></a>Python 资源大全中文版</h1><p>我想很多程序员应该记得 GitHub 上有一个 Awesome - XXX 系列的资源整理。<a href=\"https://github.com/vinta/awesome-python\">awesome-python</a> 是 vinta 发起维护的 Python 资源列表，内容包括：Web框架、网络爬虫、网络内容提取、模板引擎、数据库、数据可视化、图片处理、文本处理、自然语言处理、机器学习、日志、代码分析等。由伯乐在线持续更新。</p>\n<p>Awesome 系列虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。</p>\n<hr>\n<h3 id=\"我们要做什么？\"><a href=\"#我们要做什么？\" class=\"headerlink\" title=\"我们要做什么？\"></a>我们要做什么？</h3><ul>\n<li>基于 awesome-python 列表，我们将对其中的各个资源项进行编译整理。此外还将从其他来源补充好资源。</li>\n<li>整理后的内容，将收录在<a href=\"http://hao.jobbole.com/\">伯乐在线资源频道</a>。可参考已整理的内容：<ul>\n<li>《<a href=\"http://hao.jobbole.com/python-scrapy/\">Scrapy：Python的爬虫框架</a>》</li>\n<li>《<a href=\"http://hao.jobbole.com/flask/\">Flask：一个使用Python编写的轻量级Web应用框架</a>》</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"环境管理\"><a href=\"#环境管理\" class=\"headerlink\" title=\"环境管理\"></a>环境管理</h3><p>管理 Python 版本和环境的工具</p>\n<ul>\n<li>p：非常简单的交互式 python 版本管理工具。<a href=\"https://github.com/qw3rtman/p\">官网</a></li>\n<li>pyenv：简单的 Python 版本管理工具。<a href=\"https://github.com/yyuu/pyenv\">官网</a></li>\n<li>Vex：可以在虚拟环境中执行命令。<a href=\"https://github.com/sashahart/vex\">官网</a></li>\n<li>virtualenv：创建独立 Python 环境的工具。<a href=\"https://pypi.python.org/pypi/virtualenv\">官网</a></li>\n<li>virtualenvwrapper：virtualenv 的一组扩展。<a href=\"https://pypi.python.org/pypi/virtualenvwrapper\">官网</a></li>\n</ul>\n<h3 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h3><p>管理包和依赖的工具。</p>\n<ul>\n<li>pip：Python 包和依赖关系管理工具。<a href=\"https://pip.pypa.io/\">官网</a></li>\n<li>pip-tools：保证 Python 包依赖关系更新的一组工具。<a href=\"https://github.com/nvie/pip-tools\">官网</a></li>\n<li>conda：跨平台，Python 二进制包管理工具。<a href=\"https://github.com/conda/conda/\">官网</a></li>\n<li>Curdling：管理 Python 包的命令行工具。<a href=\"http://clarete.li/curdling/\">官网</a></li>\n<li>wheel：Python 分发的新标准，意在取代 eggs。<a href=\"http://pythonwheels.com/\">官网</a></li>\n</ul>\n<h3 id=\"包仓库\"><a href=\"#包仓库\" class=\"headerlink\" title=\"包仓库\"></a>包仓库</h3><p>本地 PyPI 仓库服务和代理。</p>\n<ul>\n<li>warehouse：下一代 PyPI。<a href=\"https://github.com/pypa/warehouse\">官网</a><ul>\n<li>Warehouse：PyPA 提供的 PyPI 镜像工具。<a href=\"https://warehouse.python.org/\">官网</a> <a href=\"https://bitbucket.org/pypa/bandersnatch\">bandersnatch</a></li>\n</ul>\n</li>\n<li>devpi：PyPI 服务和打包/测试/分发工具。<a href=\"http://doc.devpi.net/\">官网</a></li>\n<li>localshop：本地 PyPI 服务（自定义包并且自动对 PyPI 镜像）。<a href=\"https://github.com/mvantellingen/localshop\">官网</a></li>\n</ul>\n<h3 id=\"分发\"><a href=\"#分发\" class=\"headerlink\" title=\"分发\"></a>分发</h3><p>打包为可执行文件以便分发。</p>\n<ul>\n<li>PyInstaller：将 Python 程序转换成独立的执行文件（跨平台）。<a href=\"https://github.com/pyinstaller/pyinstaller\">官网</a></li>\n<li>dh-virtualenv：构建并将 virtualenv 虚拟环境作为一个 Debian 包来发布。<a href=\"http://dh-virtualenv.readthedocs.org/\">官网</a></li>\n<li>Nuitka：将脚本、模块、包编译成可执行文件或扩展模块。<a href=\"http://nuitka.net/\">官网</a></li>\n<li>py2app：将 Python 脚本变为独立软件包（Mac OS X）。<a href=\"http://pythonhosted.org/py2app/\">官网</a></li>\n<li>py2exe：将 Python 脚本变为独立软件包（Windows）。<a href=\"http://www.py2exe.org/\">官网</a></li>\n<li>pynsist：一个用来创建 Windows 安装程序的工具，可以在安装程序中打包 Python本身。<a href=\"http://pynsist.readthedocs.org/\">官网</a></li>\n</ul>\n<h3 id=\"构建工具\"><a href=\"#构建工具\" class=\"headerlink\" title=\"构建工具\"></a>构建工具</h3><p>将源码编译成软件。</p>\n<ul>\n<li>buildout：一个构建系统，从多个组件来创建，组装和部署应用。<a href=\"http://www.buildout.org/\">官网</a></li>\n<li>BitBake：针对嵌入式 Linux 的类似 make 的构建工具。<a href=\"http://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html\">官网</a></li>\n<li>fabricate：对任何语言自动找到依赖关系的构建工具。<a href=\"https://code.google.com/archive/p/fabricate\">官网</a></li>\n<li>PlatformIO：多平台命令行构建工具。<a href=\"https://github.com/platformio/platformio\">官网</a></li>\n<li>PyBuilder：纯 Python 实现的持续化构建工具。<a href=\"https://github.com/pybuilder/pybuilder\">官网</a></li>\n<li>SCons：软件构建工具。<a href=\"http://www.scons.org/\">官网</a></li>\n</ul>\n<h3 id=\"交互式解析器\"><a href=\"#交互式解析器\" class=\"headerlink\" title=\"交互式解析器\"></a>交互式解析器</h3><p>交互式 Python 解析器。</p>\n<ul>\n<li>IPython：功能丰富的工具，非常有效的使用交互式 Python。<a href=\"https://github.com/ipython/ipython\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/bpython/\">bpython</a>：界面丰富的 Python 解析器。<a href=\"http://bpython-interpreter.org/\">官网</a></li>\n<li>ptpython：高级交互式Python解析器， 构建于<a href=\"https://github.com/jonathanslenders/python-prompt-toolkit\">python-prompt-toolkit</a> 之上。<a href=\"https://github.com/jonathanslenders/ptpython\">官网</a></li>\n</ul>\n<h3 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h3><p>文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。</p>\n<ul>\n<li>imghdr：（Python 标准库）检测图片类型。<a href=\"https://docs.python.org/2/library/imghdr.html\">官网</a></li>\n<li>mimetypes：（Python 标准库）将文件名映射为 MIME 类型。<a href=\"https://docs.python.org/2/library/mimetypes.html\">官网</a></li>\n<li>path.py：对 os.path 进行封装的模块。<a href=\"https://github.com/jaraco/path.py\">官网</a></li>\n<li>pathlib：（Python3.4+ 标准库）跨平台的、面向对象的路径操作库。<a href=\"https://pathlib.readthedocs.org/en/pep428/\">官网</a></li>\n<li>python-magic：文件类型检测的第三方库 libmagic 的 Python 接口。<a href=\"https://github.com/ahupp/python-magic\">官网</a></li>\n<li>Unipath：用面向对象的方式操作文件和目录。<a href=\"https://github.com/mikeorr/Unipath\">官网</a></li>\n<li>watchdog：管理文件系统事件的 API 和 shell 工具<a href=\"https://github.com/gorakhargosh/watchdog\">官网</a></li>\n</ul>\n<h3 id=\"日期和时间\"><a href=\"#日期和时间\" class=\"headerlink\" title=\"日期和时间\"></a>日期和时间</h3><p>操作日期和时间的类库。</p>\n<ul>\n<li>arrow：更好的 Python 日期时间操作类库。<a href=\"https://github.com/crsmithdev/arrow\">官网</a></li>\n<li>Chronyk：Python 3 的类库，用于解析手写格式的时间和日期。<a href=\"https://github.com/KoffeinFlummi/Chronyk\">官网</a></li>\n<li>dateutil：Python datetime 模块的扩展。<a href=\"https://pypi.python.org/pypi/python-dateutil\">官网</a></li>\n<li>delorean：解决 Python 中有关日期处理的棘手问题的库。<a href=\"https://github.com/myusuf3/delorean/\">官网</a></li>\n<li>moment：一个用来处理时间和日期的Python库。灵感来自于Moment.js。<a href=\"https://github.com/zachwill/moment\">官网</a></li>\n<li>PyTime：一个简单易用的Python模块，用于通过字符串来操作日期/时间。<a href=\"https://github.com/shinux/PyTime\">官网</a></li>\n<li>pytz：现代以及历史版本的世界时区定义。将时区数据库引入Python。<a href=\"https://launchpad.net/pytz\">官网</a></li>\n<li>when.py：提供用户友好的函数来帮助用户进行常用的日期和时间操作。<a href=\"https://github.com/dirn/When.py\">官网</a></li>\n</ul>\n<h3 id=\"文本处理\"><a href=\"#文本处理\" class=\"headerlink\" title=\"文本处理\"></a>文本处理</h3><p>用于解析和操作文本的库。</p>\n<ul>\n<li>通用<ul>\n<li><a href=\"http://hao.jobbole.com/chardet/\">chardet</a>：字符编码检测器，兼容 Python2 和 Python3。<a href=\"https://github.com/chardet/chardet\">官网</a></li>\n<li>difflib：(Python 标准库)帮助我们进行差异化比较。<a href=\"https://docs.python.org/2/library/difflib.html\">官网</a></li>\n<li>ftfy：让Unicode文本更完整更连贯。<a href=\"https://github.com/LuminosoInsight/python-ftfy\">官网</a></li>\n<li>fuzzywuzzy：模糊字符串匹配。<a href=\"https://github.com/seatgeek/fuzzywuzzy\">官网</a></li>\n<li>Levenshtein：快速计算编辑距离以及字符串的相似度。<a href=\"https://github.com/ztane/python-Levenshtein/\">官网</a></li>\n<li>pangu.py：在中日韩语字符和数字字母之间添加空格。<a href=\"https://github.com/vinta/pangu.py\">官网</a></li>\n<li>yfiglet-figlet：<a href=\"https://github.com/pwaller/pyfiglet\">pyfiglet -figlet</a> 的 Python实现。</li>\n<li>shortuuid：一个生成器库，用以生成简洁的，明白的，URL 安全的 UUID。<a href=\"https://github.com/stochastic-technologies/shortuuid\">官网</a></li>\n<li>unidecode：Unicode 文本的 ASCII 转换形式 。<a href=\"https://pypi.python.org/pypi/Unidecode\">官网</a></li>\n<li>uniout：打印可读的字符，而不是转义的字符串。<a href=\"https://github.com/moskytw/uniout\">官网</a></li>\n<li>xpinyin：一个用于把汉字转换为拼音的库。<a href=\"https://github.com/lxneng/xpinyin\">官网</a></li>\n<li>simplejson：Python的JSON编码、解码器。<a href=\"https://simplejson.readthedocs.io/en/latest/\">官网</a>、<a href=\"https://github.com/simplejson/simplejson\">GitHub</a></li>\n</ul>\n</li>\n<li>Slug化<ul>\n<li>awesome-slugify：一个 Python slug 化库，可以保持 Unicode。<a href=\"https://github.com/dimka665/awesome-slugify\">官网</a></li>\n<li>python-slugify：Python slug 化库，可以把 unicode 转化为 ASCII。<a href=\"https://github.com/un33k/python-slugify\">官网</a></li>\n<li>unicode-slugify：一个 slug 工具，可以生成 unicode slugs ,需要依赖 Django 。<a href=\"https://github.com/mozilla/unicode-slugify\">官网</a></li>\n</ul>\n</li>\n<li>解析器<ul>\n<li>phonenumbers：解析，格式化，储存，验证电话号码。<a href=\"https://github.com/daviddrysdale/python-phonenumbers\">官网</a></li>\n<li>PLY：lex 和 yacc 解析工具的 Python 实现。<a href=\"http://www.dabeaz.com/ply/\">官网</a></li>\n<li>Pygments：通用语法高亮工具。<a href=\"http://pygments.org/\">官网</a></li>\n<li>pyparsing：生成通用解析器的框架。<a href=\"http://pyparsing.wikispaces.com/\">官网</a></li>\n<li>python-nameparser：把一个人名分解为几个独立的部分。<a href=\"https://github.com/derek73/python-nameparser\">官网</a></li>\n<li>python-user-agents：浏览器 user agent 解析器。<a href=\"https://github.com/selwin/python-user-agents\">官网</a></li>\n<li>sqlparse：一个无验证的 SQL 解析器。<a href=\"https://sqlparse.readthedocs.org/en/latest/\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"特殊文本格式处理\"><a href=\"#特殊文本格式处理\" class=\"headerlink\" title=\"特殊文本格式处理\"></a>特殊文本格式处理</h3><p>一些用来解析和操作特殊文本格式的库。</p>\n<ul>\n<li>通用<ul>\n<li>tablib：一个用来处理中表格数据的模块。<a href=\"https://github.com/kennethreitz/tablib\">官网</a></li>\n</ul>\n</li>\n<li>Office<ul>\n<li>Marmir：把输入的Python 数据结构转换为电子表单。<a href=\"https://github.com/brianray/mm\">官网</a></li>\n<li>openpyxl：一个用来读写 Excel 2010 xlsx/xlsm/xltx/xltm 文件的库。<a href=\"https://openpyxl.readthedocs.org/en/latest/\">官网</a></li>\n<li>python-docx：读取，查询以及修改 Microsoft Word 2007/2008 docx 文件。<a href=\"https://github.com/python-openxml/python-docx\">官网</a></li>\n<li>unoconv：在 LibreOffice/OpenOffice 支持的任意文件格式之间进行转换。<a href=\"https://github.com/dagwieers/unoconv\">官网</a></li>\n<li>XlsxWriter：一个用于创建 Excel .xlsx 文件的 Python 模块。<a href=\"https://xlsxwriter.readthedocs.org/en/latest/\">官网</a></li>\n<li>xlwings：一个使得在 Excel 中方便调用 Python 的库（反之亦然），基于 BSD 协议。<a href=\"http://xlwings.org/\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/xlwt/\">xlwt</a>：读写 Excel 文件的数据和格式信息。<a href=\"https://github.com/python-excel/xlwt\">官网</a> / <a href=\"https://github.com/python-excel/xlrd\">xlrd</a></li>\n<li>relatorio：模板化OpenDocument 文件。<a href=\"http://relatorio.tryton.org/\">官网</a></li>\n</ul>\n</li>\n<li>PDF<ul>\n<li>PDFMiner：一个用于从PDF文档中抽取信息的工具。<a href=\"https://github.com/euske/pdfminer\">官网</a></li>\n<li>PyPDF2：一个可以分割，合并和转换 PDF 页面的库。<a href=\"https://github.com/mstamy2/PyPDF2\">官网</a></li>\n<li>ReportLab：快速创建富文本 PDF 文档。<a href=\"http://www.reportlab.com/opensource/\">官网</a></li>\n</ul>\n</li>\n<li>Markdown<ul>\n<li>Mistune：快速并且功能齐全的纯 Python 实现的 Markdown 解析器。<a href=\"https://github.com/lepture/mistune\">官网</a></li>\n<li>Python-Markdown：John Gruber’s Markdown 的 Python 版实现。<a href=\"https://github.com/waylan/Python-Markdown\">官网</a></li>\n<li>Python-Markdiwn2：纯 Python 实现的 Markdown 解析器，比 Python-Markdown 更快，更准确，可扩展。<a href=\"https://github.com/trentm/python-markdown2\">官网</a></li>\n</ul>\n</li>\n<li>YAML<ul>\n<li>PyYAML：Python 版本的 YAML 解析器。<a href=\"http://pyyaml.org/\">官网</a></li>\n</ul>\n</li>\n<li>CSV<ul>\n<li>csvkit：用于转换和操作 CSV 的工具。<a href=\"https://github.com/wireservice/csvkit\">官网</a></li>\n</ul>\n</li>\n<li>Archive<ul>\n<li>unp：一个用来方便解包归档文件的命令行工具。<a href=\"https://github.com/mitsuhiko/unp\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自然语言处理\"><a href=\"#自然语言处理\" class=\"headerlink\" title=\"自然语言处理\"></a>自然语言处理</h3><p>用来处理人类语言的库。</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/nltk/\">NLTK</a>：一个先进的平台，用以构建处理人类语言数据的 Python 程序。<a href=\"http://www.nltk.org/\">官网</a></li>\n<li>jieba：中文分词工具。<a href=\"https://github.com/fxsjy/jieba\">官网</a></li>\n<li>langid.py：独立的语言识别系统。<a href=\"https://github.com/saffsd/langid.py\">官网</a></li>\n<li>Pattern：Python 网络信息挖掘模块。<a href=\"http://www.clips.ua.ac.be/pattern\">官网</a></li>\n<li>SnowNLP：一个用来处理中文文本的库。<a href=\"https://github.com/isnowfy/snownlp\">官网</a></li>\n<li>TextBlob：为进行普通自然语言处理任务提供一致的 API。<a href=\"http://textblob.readthedocs.org/en/latest/\">官网</a></li>\n<li>TextGrocery：一简单高效的短文本分类工具，基于 LibLinear 和 Jieba。<a href=\"https://github.com/2shou/TextGrocery\">官网</a></li>\n</ul>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><p>用以生成项目文档的库。</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/sphinx/\">Sphinx</a>：Python 文档生成器。<a href=\"http://www.sphinx-doc.org/en/latest/\">官网</a><ul>\n<li>awesome-sphinxdoc：<a href=\"https://github.com/yoloseem/awesome-sphinxdoc\">官网</a></li>\n</ul>\n</li>\n<li>MkDocs：对 Markdown 友好的文档生成器。<a href=\"http://www.mkdocs.org/\">官网</a></li>\n<li>pdoc：一个可以替换Epydoc 的库，可以自动生成 Python 库的 API 文档。<a href=\"https://github.com/BurntSushi/pdoc\">官网</a></li>\n<li>Pycco：文学编程（literate-programming）风格的文档生成器。<a href=\"https://github.com/pycco-docs/pycco\">官网</a></li>\n</ul>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>用来保存和解析配置的库。</p>\n<ul>\n<li>config：<a href=\"https://docs.python.org/2/library/logging.html\">logging</a> 模块作者写的分级配置模块。<a href=\"https://www.red-dove.com/config-doc/\">官网</a></li>\n<li>ConfigObj：INI 文件解析器，带验证功能。<a href=\"http://www.voidspace.org.uk/python/configobj.html\">官网</a></li>\n<li>ConfigParser：(Python 标准库) INI 文件解析器。<a href=\"https://docs.python.org/2/library/configparser.html\">官网</a></li>\n<li>profig：通过多种格式进行配置，具有数值转换功能。<a href=\"http://profig.readthedocs.org/en/default/\">官网</a></li>\n<li>python-decouple：将设置和代码完全隔离。<a href=\"https://github.com/henriquebastos/python-decouple\">官网</a></li>\n</ul>\n<h3 id=\"命令行工具\"><a href=\"#命令行工具\" class=\"headerlink\" title=\"命令行工具\"></a>命令行工具</h3><p>用于创建命令行程序的库。</p>\n<ul>\n<li>命令行程序开发<ul>\n<li>asciimatics：跨平台，全屏终端包（即鼠标/键盘输入和彩色，定位文本输出），完整的复杂动画和特殊效果的高级API。<a href=\"https://github.com/peterbrittain/asciimatics\">官网</a></li>\n<li>cement：Python 的命令行程序框架。<a href=\"http://builtoncement.com/\">官网</a></li>\n<li>click：一个通过组合的方式来创建精美命令行界面的包。<a href=\"http://click.pocoo.org/dev/\">官网</a></li>\n<li>cliff：一个用于创建命令行程序的框架，可以创建具有多层命令的命令行程序。<a href=\"http://docs.openstack.org/developer/cliff/\">官网</a></li>\n<li>clint：Python 命令行程序工具。<a href=\"https://github.com/kennethreitz/clint\">官网</a></li>\n<li>colorama：跨平台彩色终端文本。<a href=\"https://pypi.python.org/pypi/colorama\">官网</a></li>\n<li>docopt：Python 风格的命令行参数解析器。<a href=\"http://docopt.org/\">官网</a></li>\n<li>Gooey：一条命令，将命令行程序变成一个 GUI 程序。<a href=\"https://github.com/chriskiehl/Gooey\">官网</a></li>\n<li>python-prompt-toolkit：一个用于构建强大的交互式命令行程序的库。<a href=\"https://github.com/jonathanslenders/python-prompt-toolkit\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/pythonpy/\">Pythonpy</a>：在命令行中直接执行任何Python指令。<a href=\"https://github.com/Russell91/pythonpy/wiki\">官网</a></li>\n</ul>\n</li>\n<li>生产力工具<ul>\n<li>aws-cli：Amazon Web Services 的通用命令行界面。<a href=\"https://github.com/aws/aws-cli\">官网</a></li>\n<li>bashplotlib：在终端中进行基本绘图。<a href=\"https://github.com/glamp/bashplotlib\">官网</a></li>\n<li>caniusepython3：判断是哪个项目妨碍你你移植到 Python 3。<a href=\"https://github.com/brettcannon/caniusepython3\">官网</a></li>\n<li>cookiecutter：从 cookiecutters（项目模板）创建项目的一个命令行工具。<a href=\"https://github.com/audreyr/cookiecutter\">官网</a></li>\n<li>doitlive：一个用来在终端中进行现场演示的工具。<a href=\"https://github.com/sloria/doitlive\">官网</a></li>\n<li>howdoi：通过命令行获取即时的编程问题解答。<a href=\"https://github.com/gleitz/howdoi\">官网</a></li>\n<li>httpie：一个命令行HTTP 客户端，cURL 的替代品，易用性更好。<a href=\"https://github.com/jkbrzt/httpie\">官网</a></li>\n<li>PathPicker：从bash输出中选出文件。<a href=\"https://github.com/facebook/PathPicker\">官网</a></li>\n<li>percol：向UNIX shell 传统管道概念中加入交互式选择功能。<a href=\"https://github.com/mooz/percol\">官网</a></li>\n<li>SAWS：一个加强版的 AWS 命令行。<a href=\"https://github.com/donnemartin/saws\">官网</a></li>\n<li>thefuck：修正你之前的命令行指令。<a href=\"https://github.com/nvbn/thefuck\">官网</a></li>\n<li>mycli：一个 MySQL 命令行客户端，具有自动补全和语法高亮功能。<a href=\"https://github.com/dbcli/mycli\">官网</a></li>\n<li>pgcli：Postgres 命令行工具，具有自动补全和语法高亮功能。<a href=\"https://github.com/dbcli/pgcli\">官网</a></li>\n<li>try：一个从来没有更简单的命令行工具，用来试用python库。<a href=\"https://github.com/timofurrer/try\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"下载器\"><a href=\"#下载器\" class=\"headerlink\" title=\"下载器\"></a>下载器</h3><p>用来进行下载的库.</p>\n<ul>\n<li>s3cmd：一个用来管理Amazon S3 和 CloudFront 的命令行工具。<a href=\"https://github.com/s3tools/s3cmd\">官网</a></li>\n<li>s4cmd：超级 S3 命令行工具，性能更加强劲。<a href=\"https://github.com/bloomreach/s4cmd\">官网</a></li>\n<li>you-get：一个 YouTube/Youku/Niconico 视频下载器，使用 Python3 编写。<a href=\"https://www.soimort.org/you-get/\">官网</a></li>\n<li>youtube-dl：一个小巧的命令行程序，用来下载 YouTube 视频。<a href=\"http://rg3.github.io/youtube-dl/\">官网</a></li>\n</ul>\n<h3 id=\"图像处理\"><a href=\"#图像处理\" class=\"headerlink\" title=\"图像处理\"></a>图像处理</h3><p>用来操作图像的库.</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/pillow/\">pillow</a>：Pillow 是一个更加易用版的 <a href=\"http://www.pythonware.com/products/pil/\">PIL</a>。<a href=\"http://pillow.readthedocs.org/en/latest/\">官网</a></li>\n<li>hmap：图像直方图映射。<a href=\"https://github.com/rossgoodwin/hmap\">官网</a></li>\n<li>imgSeek：一个使用视觉相似性搜索一组图片集合的项目。<a href=\"https://sourceforge.net/projects/imgseek/\">官网</a></li>\n<li>nude.py：裸体检测。<a href=\"https://github.com/hhatto/nude.py\">官网</a></li>\n<li>pyBarcode：不借助 PIL 库在 Python 程序中生成条形码。<a href=\"https://pythonhosted.org/pyBarcode/\">官网</a></li>\n<li>pygram：类似 Instagram 的图像滤镜。<a href=\"https://github.com/ajkumar25/pygram\">官网</a></li>\n<li>python-qrcode：一个纯 Python 实现的二维码生成器。<a href=\"https://github.com/lincolnloop/python-qrcode\">官网</a></li>\n<li>Quads：基于四叉树的计算机艺术。<a href=\"https://github.com/fogleman/Quads\">官网</a></li>\n<li>scikit-image：一个用于（科学）图像处理的 Python 库。<a href=\"http://scikit-image.org/\">官网</a></li>\n<li>thumbor：一个小型图像服务，具有剪裁，尺寸重设和翻转功能。<a href=\"https://github.com/thumbor/thumbor\">官网</a></li>\n<li>wand：<a href=\"http://www.imagemagick.org/script/magick-wand.php\">MagickWand</a>的Python 绑定。MagickWand 是 ImageMagick的 C API 。<a href=\"https://github.com/dahlia/wand\">官网</a></li>\n</ul>\n<h3 id=\"OCR\"><a href=\"#OCR\" class=\"headerlink\" title=\"OCR\"></a>OCR</h3><p>光学字符识别库。</p>\n<ul>\n<li>pyocr：Tesseract 和 Cuneiform 的一个封装(wrapper)。<a href=\"https://github.com/jflesch/pyocr\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/pytesseract/\">pytesseract</a>：<a href=\"https://github.com/tesseract-ocr\">Google Tesseract OCR</a> 的另一个封装(wrapper)。<a href=\"https://github.com/madmaze/pytesseract\">官网</a></li>\n<li>python-tesseract - <a href=\"https://github.com/tesseract-ocr\">Google Tesseract OCR</a> 的一个包装类。</li>\n</ul>\n<h3 id=\"音频\"><a href=\"#音频\" class=\"headerlink\" title=\"音频\"></a>音频</h3><p>用来操作音频的库</p>\n<ul>\n<li>audiolazy：Python 的数字信号处理包。<a href=\"https://github.com/danilobellini/audiolazy\">官网</a></li>\n<li>audioread：交叉库 (GStreamer + Core Audio + MAD + FFmpeg) 音频解码。<a href=\"https://github.com/beetbox/audioread\">官网</a></li>\n<li>beets：一个音乐库管理工具及 <a href=\"https://musicbrainz.org/\">MusicBrainz</a> 标签添加工具<a href=\"http://beets.io/\">官网</a></li>\n<li>dejavu：音频指纹提取和识别<a href=\"https://github.com/worldveil/dejavu\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/django-elastic-transcoder/\">django-elastic-transcoder</a>：Django + <a href=\"http://aws.amazon.com/elastictranscoder/\">Amazon Elastic Transcoder</a>。<a href=\"https://github.com/StreetVoice/django-elastic-transcoder\">官网</a></li>\n<li>eyeD3：一个用来操作音频文件的工具，具体来讲就是包含 ID3 元信息的 MP3 文件。<a href=\"http://eyed3.nicfit.net/\">官网</a></li>\n<li>id3reader：一个用来读取 MP3 元数据的 Python 模块。<a href=\"http://nedbatchelder.com/code/modules/id3reader.py\">官网</a></li>\n<li>m3u8：一个用来解析 m3u8 文件的模块。<a href=\"https://github.com/globocom/m3u8\">官网</a></li>\n<li>mutagen：一个用来处理音频元数据的 Python 模块。<a href=\"https://bitbucket.org/lazka/mutagen\">官网</a></li>\n<li>pydub：通过简单、简洁的高层接口来操作音频文件。<a href=\"https://github.com/jiaaro/pydub\">官网</a></li>\n<li>pyechonest：<a href=\"http://developer.echonest.com/\">Echo Nest</a> API 的 Python 客户端<a href=\"https://github.com/echonest/pyechonest\">官网</a></li>\n<li>talkbox：一个用来处理演讲/信号的 Python 库<a href=\"http://scikits.appspot.com/talkbox\">官网</a></li>\n<li>TimeSide：开源 web 音频处理框架。<a href=\"https://github.com/Parisson/TimeSide\">官网</a></li>\n<li>tinytag：一个用来读取MP3, OGG, FLAC 以及 Wave 文件音乐元数据的库。<a href=\"https://github.com/devsnd/tinytag\">官网</a></li>\n<li>mingus：一个高级音乐理论和曲谱包，支持 MIDI 文件和回放功能。<a href=\"http://bspaans.github.io/python-mingus/\">官网</a></li>\n</ul>\n<h3 id=\"Video\"><a href=\"#Video\" class=\"headerlink\" title=\"Video\"></a>Video</h3><p>用来操作视频和GIF的库。</p>\n<ul>\n<li>moviepy：一个用来进行基于脚本的视频编辑模块，适用于多种格式，包括动图 GIFs。<a href=\"http://zulko.github.io/moviepy/\">官网</a></li>\n<li>scikit-video：SciPy 视频处理常用程序。<a href=\"https://github.com/aizvorski/scikit-video\">官网</a></li>\n</ul>\n<h3 id=\"地理位置\"><a href=\"#地理位置\" class=\"headerlink\" title=\"地理位置\"></a>地理位置</h3><p>地理编码地址以及用来处理经纬度的库。</p>\n<ul>\n<li>GeoDjango：世界级地理图形 web 框架。<a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/gis/\">官网</a></li>\n<li>GeoIP：MaxMind GeoIP Legacy 数据库的 Python API。<a href=\"https://github.com/maxmind/geoip-api-python\">官网</a></li>\n<li>geojson：GeoJSON 的 Python 绑定及工具。<a href=\"https://github.com/frewsxcv/python-geojson\">官网</a></li>\n<li>geopy：Python 地址编码工具箱。<a href=\"https://github.com/geopy/geopy\">官网</a></li>\n<li>pygeoip：纯 Python GeoIP API。<a href=\"https://github.com/appliedsec/pygeoip\">官网</a></li>\n<li>django-countries：一个 Django 应用程序，提供用于表格的国家选择功能，国旗图标静态文件以及模型中的国家字段。<a href=\"https://github.com/SmileyChris/django-countries\">官网</a></li>\n</ul>\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><p>使用HTTP的库。</p>\n<ul>\n<li>requests：人性化的HTTP请求库。<a href=\"http://docs.python-requests.org/en/latest/\">官网</a></li>\n<li>grequests：requests 库 + gevent ，用于异步 HTTP 请求.<a href=\"https://github.com/kennethreitz/grequests\">官网</a></li>\n<li>httplib2：全面的 HTTP 客户端库。<a href=\"https://github.com/jcgregorio/httplib2\">官网</a></li>\n<li>treq：类似 requests 的Python API 构建于 Twisted HTTP 客户端之上。<a href=\"https://github.com/twisted/treq\">官网</a></li>\n<li>urllib3：一个具有线程安全连接池，支持文件 post，清晰友好的 HTTP 库。<a href=\"https://github.com/shazow/urllib3\">官网</a></li>\n</ul>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>Python实现的数据库。</p>\n<ul>\n<li>pickleDB：一个简单，轻量级键值储存数据库。<a href=\"https://pythonhosted.org/pickleDB/\">官网</a></li>\n<li>PipelineDB：流式 SQL 数据库。<a href=\"https://www.pipelinedb.com/\">官网</a></li>\n<li>TinyDB：一个微型的，面向文档型数据库。<a href=\"https://github.com/msiemens/tinydb\">官网</a></li>\n<li>ZODB：一个 Python 原生对象数据库。一个键值和对象图数据库。<a href=\"http://www.zodb.org/en/latest/\">官网</a></li>\n</ul>\n<h3 id=\"数据库驱动\"><a href=\"#数据库驱动\" class=\"headerlink\" title=\"数据库驱动\"></a>数据库驱动</h3><p>用来连接和操作数据库的库。</p>\n<ul>\n<li>MySQL：<a href=\"http://shlomi-noach.github.io/awesome-mysql/\">awesome-mysql</a>系列<ul>\n<li>mysql-python：Python 的 MySQL 数据库连接器。<a href=\"https://sourceforge.net/projects/mysql-python/\">官网</a></li>\n<li>ysqlclient：<a href=\"https://github.com/PyMySQL/mysqlclient-python\">mysql-python</a> 分支，支持 Python 3。</li>\n<li>oursql：一个更好的 MySQL 连接器，支持原生预编译指令和 BLOBs.<a href=\"https://pythonhosted.org/oursql/\">官网</a></li>\n<li>PyMySQL：纯 Python MySQL 驱动，兼容 mysql-python。<a href=\"https://github.com/PyMySQL/PyMySQL\">官网</a></li>\n</ul>\n</li>\n<li>PostgreSQL<ul>\n<li>psycopg2：Python 中最流行的 PostgreSQL 适配器。<a href=\"http://initd.org/psycopg/\">官网</a></li>\n<li>queries：psycopg2 库的封装，用来和 PostgreSQL 进行交互。<a href=\"https://github.com/gmr/queries\">官网</a></li>\n<li>txpostgres：基于 Twisted 的异步 PostgreSQL 驱动。<a href=\"http://txpostgres.readthedocs.org/en/latest/\">官网</a></li>\n</ul>\n</li>\n<li>其他关系型数据库<ul>\n<li>apsw：另一个 Python SQLite封装。<a href=\"http://rogerbinns.github.io/apsw/\">官网</a></li>\n<li>dataset：在数据库中存储Python字典</li>\n<li>pymssql：一个简单的Microsoft SQL Server数据库接口。<a href=\"http://www.pymssql.org/en/latest/\">官网</a></li>\n</ul>\n</li>\n<li>NoSQL 数据库<ul>\n<li>cassandra-python-driver：Cassandra 的 Python 驱动。<a href=\"https://github.com/datastax/python-driver\">官网</a></li>\n<li>HappyBase：一个为 Apache HBase 设计的，对开发者友好的库。<a href=\"http://happybase.readthedocs.org/en/latest/\">官网</a></li>\n<li>Plyvel：一个快速且功能丰富的 LevelDB 的 Python 接口。<a href=\"https://plyvel.readthedocs.org/en/latest/\">官网</a></li>\n<li>py2neo：Neo4j restful 接口的Python 封装客户端。<a href=\"http://py2neo.org/2.0/\">官网</a></li>\n<li>pycassa：Cassandra 的 Python Thrift 驱动。<a href=\"https://github.com/pycassa/pycassa\">官网</a></li>\n<li>PyMongo：MongoDB 的官方 Python 客户端。<a href=\"https://docs.mongodb.org/ecosystem/drivers/python/\">官网</a></li>\n<li>redis-py：Redis 的 Python 客户端。<a href=\"https://github.com/andymccurdy/redis-py\">官网</a></li>\n<li>telephus：基于 Twisted 的 Cassandra 客户端。<a href=\"https://github.com/driftx/Telephus\">官网</a></li>\n<li>txRedis：基于 Twisted 的 Redis 客户端。<a href=\"https://github.com/deldotdr/txRedis\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h3><p>实现对象关系映射或数据映射技术的库。</p>\n<ul>\n<li>关系型数据库<ul>\n<li>Django Models：Django 的一部分。<a href=\"https://docs.djangoproject.com/en/dev/topics/db/models/\">官网</a></li>\n<li>SQLAlchemy：Python SQL 工具以及对象关系映射工具。<a href=\"http://www.sqlalchemy.org/\">官网</a><ul>\n<li><a href=\"https://github.com/dahlia/awesome-sqlalchemy\">awesome-sqlalchemy</a>系列</li>\n</ul>\n</li>\n<li><a href=\"http://hao.jobbole.com/peewee/\">Peewee</a>：一个小巧，富有表达力的 ORM。<a href=\"https://github.com/coleifer/peewee\">官网</a></li>\n<li>PonyORM：提供面向生成器的 SQL 接口的 ORM。<a href=\"https://ponyorm.com/\">官网</a></li>\n<li>python-sql：编写 Python 风格的 SQL 查询。<a href=\"https://pypi.python.org/pypi/python-sql\">官网</a></li>\n</ul>\n</li>\n<li>NoSQL 数据库<ul>\n<li>django-mongodb-engine：Django MongoDB 后端。<a href=\"https://github.com/django-nonrel/mongodb-engine\">官网</a></li>\n<li>PynamoDB：<a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a> 的一个 Python 风格接口。<a href=\"https://github.com/jlafon/PynamoDB\">官网</a></li>\n<li>flywheel：Amazon DynamoDB 的对象映射工具。<a href=\"https://github.com/mathcamp/flywheel\">官网</a></li>\n<li>MongoEngine：一个Python 对象文档映射工具，用于 MongoDB。<a href=\"http://mongoengine.org/\">官网</a></li>\n<li>hot-redis：为 Redis 提供 Python 丰富的数据类型。<a href=\"https://github.com/stephenmcd/hot-redis\">官网</a></li>\n<li>redisco：一个 Python 库，提供可以持续存在在 Redis 中的简单模型和容器。<a href=\"https://github.com/kiddouk/redisco\">官网</a></li>\n</ul>\n</li>\n<li>其他<ul>\n<li>butterdb：Google Drive 电子表格的 Python ORM。<a href=\"https://github.com/Widdershin/butterdb\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Web-框架\"><a href=\"#Web-框架\" class=\"headerlink\" title=\"Web 框架\"></a>Web 框架</h3><p>全栈 Web 框架。</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/django/\">Django</a>：Python 界最流行的 web 框架。<a href=\"https://www.djangoproject.com/\">官网</a><ul>\n<li><a href=\"https://github.com/rosarior/awesome-django\">awesome-django</a>系列</li>\n</ul>\n</li>\n<li><a href=\"http://hao.jobbole.com/flask/\">Flask</a>：一个 Python 微型框架。<a href=\"http://flask.pocoo.org/\">官网</a><ul>\n<li><a href=\"https://github.com/humiaozuzu/awesome-flask\">awesome-flask</a>系列</li>\n</ul>\n</li>\n<li>pyramid：一个小巧，快速，接地气的开源Python web 框架。<ul>\n<li><a href=\"https://github.com/uralbash/awesome-pyramid\">awesome-pyramid</a>系列</li>\n</ul>\n</li>\n<li><a href=\"http://hao.jobbole.com/bottle/\">Bottle</a>：一个快速小巧，轻量级的 WSGI 微型 web 框架。<a href=\"http://bottlepy.org/docs/dev/index.html\">官网</a></li>\n<li>CherryPy：一个极简的 Python web 框架，服从 HTTP/1.1 协议且具有WSGI 线程池。<a href=\"http://www.cherrypy.org/\">官网</a></li>\n<li>TurboGears：一个可以扩展为全栈解决方案的微型框架。<a href=\"http://www.turbogears.org/\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-webpy/\">web.py</a>：一个 Python 的 web 框架，既简单，又强大。<a href=\"http://webpy.org/\">官网</a></li>\n<li>web2py：一个全栈 web 框架和平台，专注于简单易用。<a href=\"http://www.web2py.com/\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/tornado/\">Tornado</a>：一个web 框架和异步网络库。<a href=\"http://www.tornadoweb.org/en/latest/\">官网</a></li>\n</ul>\n<h3 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h3><p>允许或拒绝用户访问数据或功能的库。</p>\n<ul>\n<li>Carteblanche：Module to align code with thoughts of users and designers. Also magically handles navigation and permissions.<a href=\"https://github.com/neuman/python-carteblanche/\">官网</a></li>\n<li>django-guardian：Django 1.2+ 实现了单个对象权限。<a href=\"https://github.com/django-guardian/django-guardian\">官网</a></li>\n<li>django-rules：一个小巧但是强大的应用，提供对象级别的权限管理，且不需要使用数据库。<a href=\"https://github.com/dfunckt/django-rules\">官网</a></li>\n</ul>\n<h3 id=\"CMS\"><a href=\"#CMS\" class=\"headerlink\" title=\"CMS\"></a>CMS</h3><p>内容管理系统</p>\n<ul>\n<li>odoo-cms: 一个开源的，企业级 CMS，基于odoo。<a href=\"http://www.odoo.com\">官网</a></li>\n<li>django-cms：一个开源的，企业级 CMS，基于 Django。<a href=\"http://www.django-cms.org/en/\">官网</a></li>\n<li>djedi-cms：一个轻量级但却非常强大的 Django CMS ，考虑到了插件，内联编辑以及性能。<a href=\"http://djedi-cms.org/\">官网</a></li>\n<li>FeinCMS：基于 Django 构建的最先进的内容管理系统之一。<a href=\"http://www.feincms.org/\">官网</a></li>\n<li>Kotti：一个高级的，Python 范的 web 应用框架，基于 Pyramid 构建。<a href=\"http://kotti.pylonsproject.org/\">官网</a></li>\n<li>Mezzanine：一个强大的，持续的，灵活的内容管理平台。<a href=\"http://mezzanine.jupo.org/\">官网</a></li>\n<li>Opps：一个为杂志，报纸网站以及大流量门户网站设计的 CMS 平台，基于 Django。<a href=\"http://opps.github.io/opps/\">官网</a></li>\n<li>Plone：一个构建于开源应用服务器 Zope 之上的 CMS。<a href=\"https://plone.org/\">官网</a></li>\n<li>Quokka：灵活，可扩展的小型 CMS，基于 Flask 和 MongoDB。<a href=\"http://quokkaproject.org/\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/wagtail/\">Wagtail</a>：一个 Django 内容管理系统。<a href=\"https://wagtail.io/\">官网</a></li>\n<li>Widgy：最新的 CMS 框架，基于 Django。<a href=\"https://wid.gy/\">官网</a></li>\n</ul>\n<h3 id=\"电子商务\"><a href=\"#电子商务\" class=\"headerlink\" title=\"电子商务\"></a>电子商务</h3><p>用于电子商务以及支付的框架和库。</p>\n<ul>\n<li>django-oscar：一个用于 Django 的开源的电子商务框架。<a href=\"http://oscarcommerce.com/\">官网</a></li>\n<li>django-shop：一个基于 Django 的店铺系统。<a href=\"https://github.com/awesto/django-shop\">官网</a></li>\n<li>Cartridge：一个基于 Mezzanine 构建的购物车应用。<a href=\"https://github.com/stephenmcd/cartridge\">官网</a></li>\n<li>shoop：一个基于 Django 的开源电子商务平台。<a href=\"https://www.shoop.io/en/\">官网</a></li>\n<li>alipay：非官方的 Python 支付宝 API。<a href=\"https://github.com/lxneng/alipay\">官网</a></li>\n<li>merchant：一个可以接收来自多种支付平台支付的 Django 应用。<a href=\"https://github.com/agiliq/merchant\">官网</a></li>\n<li>money：货币类库with optional CLDR-backed locale-aware formatting and an extensible currency exchange solution.<a href=\"https://github.com/carlospalol/money\">官网</a></li>\n<li>python-currencies：显示货币格式以及它的数值。<a href=\"https://github.com/Alir3z4/python-currencies\">官网</a></li>\n</ul>\n<h3 id=\"RESTful-API\"><a href=\"#RESTful-API\" class=\"headerlink\" title=\"RESTful API\"></a>RESTful API</h3><p>用来开发RESTful APIs的库</p>\n<ul>\n<li>Django<ul>\n<li><a href=\"http://hao.jobbole.com/django-rest-framework/\">django-rest-framework</a>：一个强大灵活的工具，用来构建 web API。<a href=\"http://www.django-rest-framework.org/\">官网</a></li>\n<li>django-tastypie：为Django 应用开发API。<a href=\"http://tastypieapi.org/\">官网</a></li>\n<li>django-formapi：为 Django 的表单验证，创建 JSON APIs 。<a href=\"https://github.com/5monkeys/django-formapi\">官网</a></li>\n</ul>\n</li>\n<li>Flask<ul>\n<li>flask-api：为 flask 开发的，可浏览 Web APIs 。<a href=\"http://www.flaskapi.org/\">官网</a></li>\n<li>flask-restful：为 flask 快速创建REST APIs 。<a href=\"http://flask-restful.readthedocs.org/en/latest/\">官网</a></li>\n<li>flask-restless：为 SQLAlchemy 定义的数据库模型创建 RESTful APIs 。<a href=\"https://flask-restless.readthedocs.org/en/latest/\">官网</a></li>\n<li>flask-api-utils：为 Flask 处理 API 表示和验证。<a href=\"https://github.com/marselester/flask-api-utils\">官网</a></li>\n<li>eve：REST API 框架，由 Flask, MongoDB 等驱动。<a href=\"https://github.com/nicolaiarocci/eve\">官网</a></li>\n</ul>\n</li>\n<li>Pyramid<ul>\n<li>cornice：一个Pyramid 的 REST 框架 。<a href=\"https://cornice.readthedocs.org/en/latest/\">官网</a></li>\n</ul>\n</li>\n<li>与框架无关的<ul>\n<li>falcon：一个用来建立云 API 和 web app 后端的高性能框架。<a href=\"http://falconframework.org/\">官网</a></li>\n<li>sandman：为现存的数据库驱动系统自动创建 REST APIs 。<a href=\"https://github.com/jeffknupp/sandman\">官网</a></li>\n<li>restless：框架无关的 REST 框架 ，基于从 Tastypie 学到的知识。<a href=\"http://restless.readthedocs.org/en/latest/\">官网</a></li>\n<li>ripozo：快速创建 REST/HATEOAS/Hypermedia APIs。<a href=\"https://github.com/vertical-knowledge/ripozo\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>实现验证方案的库。</p>\n<ul>\n<li>OAuth<ul>\n<li>Authomatic：简单但是强大的框架，身份验证/授权客户端。<a href=\"http://peterhudec.github.io/authomatic/\">官网</a></li>\n<li>django-allauth：Django 的验证应用。<a href=\"https://github.com/pennersr/django-allauth\">官网</a></li>\n<li>django-oauth-toolkit：为 Django 用户准备的 OAuth2。<a href=\"https://github.com/evonove/django-oauth-toolkit\">官网</a></li>\n<li>django-oauth2-provider：为 Django 应用提供 OAuth2 接入。<a href=\"https://github.com/caffeinehit/django-oauth2-provider\">官网</a></li>\n<li>Flask-OAuthlib：OAuth 1.0/a, 2.0 客户端实现，供 Flask 使用。<a href=\"https://github.com/lepture/flask-oauthlib\">官网</a></li>\n<li>OAuthLib：一个 OAuth 请求-签名逻辑通用、 完整的实现。<a href=\"https://github.com/idan/oauthlib\">官网</a></li>\n<li>python-oauth2：一个完全测试的抽象接口。用来创建 OAuth 客户端和服务端。<a href=\"https://github.com/joestump/python-oauth2\">官网</a></li>\n<li>python-social-auth：一个设置简单的社会化验证方式。<a href=\"https://github.com/omab/python-social-auth\">官网</a></li>\n<li>rauth：OAuth 1.0/a, 2.0, 和 Ofly 的 Python 库。<a href=\"https://github.com/litl/rauth\">官网</a></li>\n<li>sanction：一个超级简单的OAuth2 客户端实现。<a href=\"https://github.com/demianbrecht/sanction\">官网</a></li>\n</ul>\n</li>\n<li>其他<ul>\n<li>jose：JavaScript 对象签名和加密草案的实现。<a href=\"https://github.com/demonware/jose\">官网</a></li>\n<li>PyJWT：JSON Web 令牌草案 01。<a href=\"https://github.com/jpadilla/pyjwt\">官网</a></li>\n<li>python-jws：JSON Web 签名草案 02 的实现。<a href=\"https://github.com/brianloveswords/python-jws\">官网</a></li>\n<li>python-jwt：一个用来生成和验证 JSON Web 令牌的模块。<a href=\"https://github.com/davedoesdev/python-jwt\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h3><p>模板生成和词法解析的库和工具。</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/jinja2/\">Jinja2</a>：一个现代的，对设计师友好的模板引擎。<a href=\"https://github.com/pallets/jinja\">官网</a></li>\n<li>Chameleon：一个 HTML/XML 模板引擎。 模仿了 ZPT（Zope Page Templates）, 进行了速度上的优化。<a href=\"https://chameleon.readthedocs.org/en/latest/\">官网</a></li>\n<li>Genshi：Python 模板工具，用以生成 web 感知的结果。<a href=\"https://genshi.edgewall.org/\">官网</a></li>\n<li>Mako：Python 平台的超高速轻量级模板。<a href=\"http://www.makotemplates.org/\">官网</a></li>\n</ul>\n<h3 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h3><p>处理事件以及任务队列的库。</p>\n<ul>\n<li>celery：一个异步任务队列/作业队列，基于分布式消息传递。<a href=\"http://www.celeryproject.org/\">官网</a></li>\n<li>huey：小型多线程任务队列。<a href=\"https://github.com/coleifer/huey\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/mrq/\">mrq</a>：Mr. Queue -一个 Python 的分布式 worker 任务队列， 使用 Redis 和 gevent。<a href=\"https://github.com/pricingassistant/mrq\">官网</a></li>\n<li>rq：简单的 Python 作业队列。<a href=\"http://python-rq.org/\">官网</a></li>\n<li>simpleq：一个简单的，可无限扩张的，基于亚马逊 SQS 的队列。<a href=\"https://github.com/rdegges/simpleq\">官网</a></li>\n</ul>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><p>对数据进行索引和执行搜索查询的库和软件。</p>\n<ul>\n<li>django-haystack：Django 模块化搜索。<a href=\"https://github.com/django-haystack/django-haystack\">官网</a></li>\n<li>elasticsearch-py：Elasticsearch 的官方底层 Python 客户端。<a href=\"https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html\">官网</a></li>\n<li>elasticsearch-dsl-py：Elasticsearch 的官方高级 Python 客户端。<a href=\"https://github.com/elastic/elasticsearch-dsl-py\">官网</a></li>\n<li>solrpy：<a href=\"http://lucene.apache.org/solr/\">solr</a>的 Python 客户端。<a href=\"https://github.com/edsu/solrpy\">官网</a></li>\n<li>Whoosh：一个快速的纯 Python 搜索引擎库。<a href=\"http://whoosh.readthedocs.org/en/latest/\">官网</a></li>\n</ul>\n<h3 id=\"动态消息\"><a href=\"#动态消息\" class=\"headerlink\" title=\"动态消息\"></a>动态消息</h3><p>用来创建用户活动的库。</p>\n<ul>\n<li>django-activity-stream：从你的站点行为中生成通用活动信息流。<a href=\"https://github.com/justquick/django-activity-stream\">官网</a></li>\n<li>Stream-Framework：使用 Cassandra 和 Redis 创建动态消息和通知系统。<a href=\"https://github.com/tschellenbach/Stream-Framework\">官网</a></li>\n</ul>\n<h3 id=\"资源管理\"><a href=\"#资源管理\" class=\"headerlink\" title=\"资源管理\"></a>资源管理</h3><p>管理、压缩、缩小网站资源的工具。</p>\n<ul>\n<li>django-compressor：将链接和内联的 JavaScript 或 CSS 压缩到一个单独的缓存文件中。<a href=\"https://github.com/django-compressor/django-compressor\">官网</a></li>\n<li>django-storages：一个针对 Django 的自定义存储后端的工具集合。<a href=\"http://django-storages.readthedocs.org/en/latest/\">官网</a></li>\n<li>fanstatic：打包、优化，并且把静态文件依赖作为 Python 的包来提供。<a href=\"http://www.fanstatic.org/en/latest/\">官网</a></li>\n<li>File Conveyor：一个后台驻留的程序，用来发现和同步文件到 CDNs, S3 和 FTP。<a href=\"http://fileconveyor.org/\">官网</a></li>\n<li>Flask-Assets：帮你将 web 资源整合到你的 Flask app 中。<a href=\"http://flask-assets.readthedocs.org/en/latest/\">官网</a></li>\n<li>jinja-assets-compressor：一个 Jinja 扩展，用来编译和压缩你的资源。<a href=\"https://github.com/jaysonsantos/jinja-assets-compressor\">官网</a></li>\n<li>webassets：为你的静态资源打包、优化和管理生成独一无二的缓存 URL。<a href=\"http://webassets.readthedocs.org/en/latest/\">官网</a></li>\n</ul>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>缓存数据的库。</p>\n<ul>\n<li>Beaker：一个缓存和会话库，可以用在 web 应用和独立 Python脚本和应用上。<a href=\"http://beaker.readthedocs.org/en/latest/\">官网</a></li>\n<li>django-cache-machine：Django 模型的自动缓存和失效。<a href=\"https://github.com/django-cache-machine/django-cache-machine\">官网</a></li>\n<li>django-cacheops：具有自动颗粒化事件驱动失效功能的 ORM。<a href=\"https://github.com/Suor/django-cacheops\">官网</a></li>\n<li>django-viewlet：渲染模板，同时具有额外的缓存控制功能。<a href=\"https://github.com/5monkeys/django-viewlet\">官网</a></li>\n<li>dogpile.cache：dogpile.cache 是 Beaker 的下一代替代品，由同一作者开发。<a href=\"http://dogpilecache.readthedocs.org/en/latest/\">官网</a></li>\n<li>HermesCache：Python 缓存库，具有基于标签的失效和 dogpile effect 保护功能。<a href=\"https://pypi.python.org/pypi/HermesCache\">官网</a></li>\n<li>johnny-cache：django应用缓存框架。<a href=\"https://github.com/jmoiron/johnny-cache\">官网</a></li>\n<li>pylibmc：<a href=\"http://libmemcached.org/libMemcached.html\">libmemcached</a> 接口的 Python 封装。<a href=\"https://github.com/lericson/pylibmc\">官网</a></li>\n</ul>\n<h3 id=\"电子邮件\"><a href=\"#电子邮件\" class=\"headerlink\" title=\"电子邮件\"></a>电子邮件</h3><p>用来发送和解析电子邮件的库。</p>\n<ul>\n<li>django-celery-ses：带有 AWS SES 和 Celery 的 Django email 后端。<a href=\"https://github.com/StreetVoice/django-celery-ses\">官网</a></li>\n<li>envelopes：供人类使用的电子邮件库。<a href=\"http://tomekwojcik.github.io/envelopes/\">官网</a></li>\n<li>flanker：一个 email 地址和 Mime 解析库。<a href=\"https://github.com/mailgun/flanker\">官网</a></li>\n<li>imbox：Python IMAP 库<a href=\"https://github.com/martinrusev/imbox\">官网</a></li>\n<li>inbox.py：Python SMTP 服务器。<a href=\"https://github.com/kennethreitz/inbox.py\">官网</a></li>\n<li>inbox：一个开源电子邮件工具箱。<a href=\"https://github.com/nylas/sync-engine\">官网</a></li>\n<li>lamson：Python 风格的 SMTP 应用服务器。<a href=\"https://github.com/zedshaw/lamson\">官网</a></li>\n<li>mailjet：Mailjet API 实现，用来提供批量发送邮件，统计等功能。<a href=\"https://github.com/WoLpH/mailjet\">官网</a></li>\n<li>marrow.mailer：高性能可扩展邮件分发框架。<a href=\"https://github.com/marrow/mailer\">官网</a></li>\n<li>modoboa：一个邮件托管和管理平台，具有现代的、简约的 Web UI。<a href=\"https://github.com/tonioo/modoboa\">官网</a></li>\n<li>pyzmail：创建，发送和解析电子邮件。<a href=\"http://www.magiksys.net/pyzmail/\">官网</a></li>\n<li>Talon：Mailgun 库，用来抽取信息和签名。<a href=\"https://github.com/mailgun/talon\">官网</a></li>\n</ul>\n<h3 id=\"国际化\"><a href=\"#国际化\" class=\"headerlink\" title=\"国际化\"></a>国际化</h3><p>用来进行国际化的库。</p>\n<ul>\n<li>Babel：一个Python 的国际化库。<a href=\"http://babel.pocoo.org/en/latest/\">官网</a></li>\n<li>Korean：一个韩语词态库。<a href=\"https://korean.readthedocs.org/en/latest/\">官网</a></li>\n</ul>\n<h3 id=\"URL处理\"><a href=\"#URL处理\" class=\"headerlink\" title=\"URL处理\"></a>URL处理</h3><p>解析URLs的库</p>\n<ul>\n<li>furl：一个让处理 URL 更简单小型 Python 库。<a href=\"https://github.com/gruns/furl\">官网</a></li>\n<li>purl：一个简单的，不可变的URL类，具有简洁的 API 来进行询问和处理。<a href=\"https://github.com/codeinthehole/purl\">官网</a></li>\n<li>pyshorteners：一个纯 Python URL 缩短库。<a href=\"https://github.com/ellisonleao/pyshorteners\">官网</a></li>\n<li>shorturl：生成短小 URL 和类似 bit.ly 短链的Python 实现。<a href=\"https://github.com/Alir3z4/python-shorturl\">官网</a></li>\n<li>webargs：一个解析 HTTP 请求参数的库，内置对流行 web 框架的支持，包括 Flask, Django, Bottle, Tornado和 Pyramid。<a href=\"https://github.com/sloria/webargs\">官网</a></li>\n</ul>\n<h3 id=\"HTML处理\"><a href=\"#HTML处理\" class=\"headerlink\" title=\"HTML处理\"></a>HTML处理</h3><p>处理 HTML和XML的库。</p>\n<ul>\n<li>BeautifulSoup：以 Python 风格的方式来对 HTML 或 XML 进行迭代，搜索和修改。<a href=\"http://www.crummy.com/software/BeautifulSoup/bs4/doc/\">官网</a></li>\n<li>bleach：一个基于白名单的 HTML 清理和文本链接库。<a href=\"http://bleach.readthedocs.org/en/latest/\">官网</a></li>\n<li>cssutils：一个 Python 的 CSS 库。<a href=\"https://pypi.python.org/pypi/cssutils/\">官网</a></li>\n<li>html5lib：一个兼容标准的 HTML 文档和片段解析及序列化库。<a href=\"https://github.com/html5lib/html5lib-python\">官网</a></li>\n<li>lxml：一个非常快速，简单易用，功能齐全的库，用来处理 HTML 和 XML。<a href=\"http://lxml.de/\">官网</a></li>\n<li>MarkupSafe：为Python 实现 XML/HTML/XHTML 标记安全字符串。<a href=\"https://github.com/pallets/markupsafe\">官网</a></li>\n<li>pyquery：一个解析 HTML 的库，类似 jQuery。<a href=\"https://github.com/gawel/pyquery\">官网</a></li>\n<li>untangle：将XML文档转换为Python对象，使其可以方便的访问。<a href=\"https://github.com/stchris/untangle\">官网</a></li>\n<li>xhtml2pdf：HTML/CSS 转 PDF 工具。<a href=\"https://github.com/xhtml2pdf/xhtml2pdf\">官网</a></li>\n<li>xmltodict：像处理 JSON 一样处理 XML。<a href=\"https://github.com/martinblech/xmltodict\">官网</a></li>\n</ul>\n<p>爬取网络站点的库</p>\n<ul>\n<li>Scrapy：一个快速高级的屏幕爬取及网页采集框架。<a href=\"http://scrapy.org/\">官网</a></li>\n<li>cola：一个分布式爬虫框架。<a href=\"https://github.com/chineking/cola\">官网</a></li>\n<li>Demiurge：基于PyQuery 的爬虫微型框架。<a href=\"https://github.com/matiasb/demiurge\">官网</a></li>\n<li>feedparser：通用 feed 解析器。<a href=\"http://pythonhosted.org/feedparser/\">官网</a></li>\n<li>Grab：站点爬取框架。<a href=\"http://grablib.org/\">官网</a></li>\n<li>MechanicalSoup：用于自动和网络站点交互的 Python 库。<a href=\"https://github.com/hickford/MechanicalSoup\">官网</a></li>\n<li>portia：Scrapy 可视化爬取。<a href=\"https://github.com/scrapinghub/portia\">官网</a></li>\n<li>pyspider：一个强大的爬虫系统。<a href=\"https://github.com/binux/pyspider\">官网</a></li>\n<li>RoboBrowser：一个简单的，Python 风格的库，用来浏览网站，而不需要一个独立安装的浏览器。<a href=\"https://github.com/jmcarp/robobrowser\">官网</a></li>\n</ul>\n<h3 id=\"网页内容提取\"><a href=\"#网页内容提取\" class=\"headerlink\" title=\"网页内容提取\"></a>网页内容提取</h3><p>用于进行网页内容提取的库。</p>\n<ul>\n<li>Haul：一个可以扩展的图像爬取工具。<a href=\"https://github.com/vinta/Haul\">官网</a></li>\n<li>html2text：将 HTML 转换为 Markdown 格式文本<a href=\"https://github.com/Alir3z4/html2text\">官网</a></li>\n<li>lassie：人性化的网页内容检索库。<a href=\"https://github.com/michaelhelmick/lassie\">官网</a></li>\n<li>micawber：一个小型网页内容提取库，用来从 URLs 提取富内容。<a href=\"https://github.com/coleifer/micawber\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-newspaper/\">newspaper</a>：使用 Python 进行新闻提取，文章提取以及内容策展。<a href=\"https://github.com/codelucas/newspaper\">官网</a></li>\n<li>opengraph：一个用来解析开放内容协议(Open Graph Protocol)的 Python模块。<a href=\"https://github.com/erikriver/opengraph\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-goose/\">python-goose</a>：HTML内容/文章提取器。<a href=\"https://github.com/grangier/python-goose\">官网</a></li>\n<li>python-readability：arc90 公司 readability 工具的 Python 高速端口。<a href=\"https://github.com/buriy/python-readability\">官网</a></li>\n<li>sanitize：为杂乱的数据世界带来调理性。<a href=\"https://github.com/Alir3z4/python-sanitize\">官网</a></li>\n<li>sumy：一个为文本文件和 HTML 页面进行自动摘要的模块。<a href=\"https://github.com/miso-belica/sumy\">官网</a></li>\n<li>textract：从任何格式的文档中提取文本，Word，PowerPoint，PDFs 等等。<a href=\"https://github.com/deanmalmgren/textract\">官网</a></li>\n</ul>\n<h3 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h3><p>进行表单操作的库。</p>\n<ul>\n<li>Deform：Python HTML 表单生成库，受到了 formish 表单生成库的启发。<a href=\"http://deform.readthedocs.org/en/latest/\">官网</a></li>\n<li>django-bootstrap3：集成了 Bootstrap 3 的 Django。<a href=\"https://github.com/dyve/django-bootstrap3\">官网</a></li>\n<li>django-crispy-forms：一个 Django 应用，他可以让你以一种非常优雅且 DRY（Don’t repeat yourself） 的方式来创建美观的表单。<a href=\"http://django-crispy-forms.readthedocs.org/en/latest/\">官网</a></li>\n<li>django-remote-forms：一个平台独立的 Django 表单序列化工具。<a href=\"https://github.com/WiserTogether/django-remote-forms\">官网</a></li>\n<li>WTForms：一个灵活的表单验证和呈现库。<a href=\"http://wtforms.readthedocs.org/en/latest/\">官网</a></li>\n<li>WTForms-JSON：一个 WTForms 扩展，用来处理 JSON 数据。<a href=\"http://wtforms-json.readthedocs.org/en/latest/\">官网</a></li>\n</ul>\n<h3 id=\"数据验证\"><a href=\"#数据验证\" class=\"headerlink\" title=\"数据验证\"></a>数据验证</h3><p>数据验证库。多用于表单验证。</p>\n<ul>\n<li>Cerberus：A mappings-validator with a variety of rules, normalization-features and simple customization that uses a pythonic schema-definition.<a href=\"http://docs.python-cerberus.org/en/stable/\">官网</a></li>\n<li>colander：一个用于对从 XML, JSON，HTML 表单获取的数据或其他同样简单的序列化数据进行验证和反序列化的系统。<a href=\"http://docs.pylonsproject.org/projects/colander/en/latest/\">官网</a></li>\n<li>kmatch：一种用于匹配/验证/筛选 Python 字典的语言。<a href=\"https://github.com/ambitioninc/kmatch\">官网</a></li>\n<li>schema：一个用于对 Python 数据结构进行验证的库。<a href=\"https://github.com/keleshev/schema\">官网</a></li>\n<li>Schematics：数据结构验证。<a href=\"https://github.com/schematics/schematics\">官网</a></li>\n<li>valideer：轻量级可扩展的数据验证和适配库。<a href=\"https://github.com/podio/valideer\">官网</a></li>\n<li>voluptuous：一个 Python 数据验证库。主要是为了验证传入 Python的 JSON，YAML 等数据。<a href=\"https://github.com/alecthomas/voluptuous\">官网</a></li>\n</ul>\n<h3 id=\"反垃圾技术\"><a href=\"#反垃圾技术\" class=\"headerlink\" title=\"反垃圾技术\"></a>反垃圾技术</h3><p>帮助你和电子垃圾进行战斗的库。</p>\n<ul>\n<li>django-simple-captcha：一个简单、高度可定制的Django 应用，可以为任何Django表单添加验证码。<a href=\"https://github.com/mbi/django-simple-captcha\">官网</a></li>\n<li>django-simple-spam-blocker：一个用于Django的简单的电子垃圾屏蔽工具。<a href=\"https://github.com/moqada/django-simple-spam-blocker\">官网</a></li>\n</ul>\n<h3 id=\"标记\"><a href=\"#标记\" class=\"headerlink\" title=\"标记\"></a>标记</h3><p>用来进行标记的库。</p>\n<ul>\n<li>django-taggit：简单的 Django 标记工具。<a href=\"https://github.com/alex/django-taggit\">官网</a></li>\n</ul>\n<h3 id=\"管理面板\"><a href=\"#管理面板\" class=\"headerlink\" title=\"管理面板\"></a>管理面板</h3><p>管理界面库。</p>\n<ul>\n<li>Ajenti：一个你的服务器值得拥有的管理面板。<a href=\"https://github.com/Eugeny/ajenti\">官网</a></li>\n<li>django-suit：Django 管理界面的一个替代品 (仅对于非商业用途是免费的)。<a href=\"http://djangosuit.com/\">官网</a></li>\n<li>django-xadmin：Django admin 的一个替代品，具有很多不错的功能。<a href=\"https://github.com/sshwsfc/django-xadmin\">官网</a></li>\n<li>flask-admin：一个用于 Flask 的简单可扩展的管理界面框架。<a href=\"https://github.com/flask-admin/flask-admin\">官网</a></li>\n<li>flower：一个对 Celery 集群进行实时监控和提供 web 管理界面的工具。<a href=\"https://github.com/mher/flower\">官网</a></li>\n<li>Grappelli：Django 管理界面的一个漂亮的皮肤。<a href=\"http://grappelliproject.com/\">官网</a></li>\n<li>Wooey：一个 Django 应用，可以为 Python 脚本创建 web 用户界面。<a href=\"https://github.com/wooey/wooey\">官网</a></li>\n</ul>\n<h3 id=\"静态站点生成器\"><a href=\"#静态站点生成器\" class=\"headerlink\" title=\"静态站点生成器\"></a>静态站点生成器</h3><p>静态站点生成器是一个软件，它把文本和模板作为输入，然后输出HTML文件。</p>\n<ul>\n<li>Pelican：使用 Markdown 或 ReST 来处理内容， Jinja 2 来制作主题。支持 DVCS, Disqus.。AGPL 许可。<a href=\"http://blog.getpelican.com/\">官网</a></li>\n<li>Cactus：为设计师设计的静态站点生成器。<a href=\"https://github.com/koenbok/Cactus/\">官网</a></li>\n<li>Hyde：基于 Jinja2 的静态站点生成器。<a href=\"http://hyde.github.io/\">官网</a></li>\n<li>Nikola：一个静态网站和博客生成器。<a href=\"https://www.getnikola.com/\">官网</a></li>\n<li>Tinkerer：Tinkerer 是一个博客引擎/静态站点生成器，由Sphinx驱动。<a href=\"http://tinkerer.me/\">官网</a></li>\n<li>Lektor：一个简单易用的静态 CMS 和博客引擎。<a href=\"https://www.getlektor.com/\">官网</a></li>\n</ul>\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><p>操作系统进程启动及通信库。</p>\n<ul>\n<li>envoy：比 Python <a href=\"https://docs.python.org/2/library/subprocess.html\">subprocess</a> 模块更人性化。<a href=\"https://github.com/kennethreitz/envoy\">官网</a></li>\n<li>sarge：另一 种 subprocess 模块的封装。<a href=\"http://sarge.readthedocs.org/en/latest/\">官网</a></li>\n<li>sh：一个完备的 subprocess 替代库。<a href=\"https://github.com/amoffat/sh\">官网</a></li>\n</ul>\n<h3 id=\"并发和并行\"><a href=\"#并发和并行\" class=\"headerlink\" title=\"并发和并行\"></a>并发和并行</h3><p>用以进行并发和并行操作的库。</p>\n<ul>\n<li>multiprocessing：(Python 标准库) 基于进程的“线程”接口。<a href=\"https://docs.python.org/2/library/multiprocessing.html\">官网</a></li>\n<li>threading：(Python 标准库)更高层的线程接口。<a href=\"https://docs.python.org/2/library/threading.html\">官网</a></li>\n<li>eventlet：支持 WSGI 的异步框架。<a href=\"http://eventlet.net/\">官网</a></li>\n<li>gevent：一个基于协程的 Python 网络库，使用<a href=\"https://github.com/python-greenlet/greenlet\">greenlet</a>。<a href=\"http://www.gevent.org/\">官网</a></li>\n<li>Tomorrow：用于产生异步代码的神奇的装饰器语法实现。<a href=\"https://github.com/madisonmay/Tomorrow\">官网</a></li>\n<li>uvloop：在libuv之上超快速实现asyncio事件循环。<a href=\"https://github.com/MagicStack/uvloop\">官网</a></li>\n</ul>\n<h3 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h3><p>用于网络编程的库。</p>\n<ul>\n<li>asyncio：(Python 标准库) 异步 I/O, 事件循环, 协程以及任务。<a href=\"https://docs.python.org/3/library/asyncio.html\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/twisted/\">Twisted</a>：一个事件驱动的网络引擎。<a href=\"https://twistedmatrix.com/trac/\">官网</a></li>\n<li>pulsar：事件驱动的并发框架。<a href=\"https://github.com/quantmind/pulsar\">官网</a></li>\n<li>diesel：基于Greenlet 的事件 I/O 框架。<a href=\"https://github.com/dieseldev/diesel\">官网</a></li>\n<li>pyzmq：一个 ZeroMQ 消息库的 Python 封装。<a href=\"http://zeromq.github.io/pyzmq/\">官网</a></li>\n<li>txZMQ：基于 Twisted 的 ZeroMQ 消息库的 Python 封装。<a href=\"https://github.com/smira/txZMQ\">官网</a></li>\n</ul>\n<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><p>帮助使用WebSocket的库。</p>\n<ul>\n<li>AutobahnPython：给 Python 、使用的 WebSocket &amp; WAMP 基于 Twisted 和 <a href=\"https://docs.python.org/3/library/asyncio.html\">asyncio</a>。<a href=\"https://github.com/crossbario/autobahn-python\">官网</a></li>\n<li>Crossbar：开源统一应用路由(Websocket &amp; WAMP for Python on Autobahn).<a href=\"https://github.com/crossbario/crossbar/\">官网</a></li>\n<li>django-socketio：给 Django 用的 WebSockets。<a href=\"https://github.com/stephenmcd/django-socketio\">官网</a></li>\n<li>WebSocket-for-Python：为Python2/3 以及 PyPy 编写的 WebSocket 客户端和服务器库。<a href=\"https://github.com/Lawouach/WebSocket-for-Python\">官网</a></li>\n</ul>\n<h3 id=\"WSGI-服务器\"><a href=\"#WSGI-服务器\" class=\"headerlink\" title=\"WSGI 服务器\"></a>WSGI 服务器</h3><p>兼容 WSGI 的 web 服务器</p>\n<ul>\n<li>gunicorn：Pre-forked, 部分是由 C 语言编写的。<a href=\"https://pypi.python.org/pypi/gunicorn\">官网</a></li>\n<li>uwsgi：uwsgi 项目的目的是开发一组全栈工具，用来建立托管服务， 由 C 语言编写。<a href=\"https://uwsgi-docs.readthedocs.org/en/latest/\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/bjoern/\">bjoern</a>：异步，非常快速，由 C 语言编写。<a href=\"https://pypi.python.org/pypi/bjoern\">官网</a></li>\n<li>fapws3：异步 (仅对于网络端)，由 C 语言编写。<a href=\"http://www.fapws.org/\">官网</a></li>\n<li>meinheld：异步，部分是由 C 语言编写的。<a href=\"https://pypi.python.org/pypi/meinheld\">官网</a></li>\n<li>netius：异步，非常快速。<a href=\"https://github.com/hivesolutions/netius\">官网</a></li>\n<li>paste：多线程，稳定，久经考验。<a href=\"http://pythonpaste.org/\">官网</a></li>\n<li>rocket：多线程。<a href=\"https://pypi.python.org/pypi/rocket\">官网</a></li>\n<li>waitress：多线程, 是它驱动着 Pyramid 框架。<a href=\"https://waitress.readthedocs.org/en/latest/\">官网</a></li>\n<li>Werkzeug：一个 WSGI 工具库，驱动着 Flask ，而且可以很方便大嵌入到你的项目中去。<a href=\"http://werkzeug.pocoo.org/\">官网</a></li>\n</ul>\n<h3 id=\"RPC-服务器\"><a href=\"#RPC-服务器\" class=\"headerlink\" title=\"RPC 服务器\"></a>RPC 服务器</h3><p>兼容 RPC 的服务器。</p>\n<ul>\n<li>SimpleJSONRPCServer：这个库是 JSON-RPC 规范的一个实现。<a href=\"https://github.com/joshmarshall/jsonrpclib/\">官网</a></li>\n<li>SimpleXMLRPCServer：(Python 标准库) 简单的 XML-RPC 服务器实现，单线程。<a href=\"https://docs.python.org/2/library/simplexmlrpcserver.html\">官网</a></li>\n<li>zeroRPC：zerorpc 是一个灵活的 RPC 实现，基于 ZeroMQ 和 MessagePack。<a href=\"https://github.com/0rpc/zerorpc-python\">官网</a></li>\n</ul>\n<h3 id=\"密码学\"><a href=\"#密码学\" class=\"headerlink\" title=\"密码学\"></a>密码学</h3><ul>\n<li>cryptography：这个软件包意在提供密码学基本内容和方法提供给 Python 开发者。<a href=\"https://cryptography.io/en/latest/\">官网</a></li>\n<li>hashids：在 Python 中实现 <a href=\"http://hashids.org/\">hashids</a> 。<a href=\"https://github.com/davidaurelio/hashids-python\">官网</a></li>\n<li>Paramiko：SSHv2 协议的 Python (2.6+, 3.3+) ，提供客户端和服务端的功能。<a href=\"http://www.paramiko.org/\">官网</a></li>\n<li>Passlib：安全密码存储／哈希库，<a href=\"https://pythonhosted.org/passlib/\">官网</a></li>\n<li>PyCrypto：Python 密码学工具箱。<a href=\"https://www.dlitz.net/software/pycrypto/\">官网</a></li>\n<li>PyNacl：网络和密码学(NaCl) 库的 Python 绑定。<a href=\"https://github.com/pyca/pynacl\">官网</a></li>\n</ul>\n<h3 id=\"图形用户界面\"><a href=\"#图形用户界面\" class=\"headerlink\" title=\"图形用户界面\"></a>图形用户界面</h3><p>用来创建图形用户界面程序的库。</p>\n<ul>\n<li>curses：内建的 <a href=\"http://www.gnu.org/software/ncurses/\">ncurses</a> 封装，用来创建终端图形用户界面。<a href=\"https://docs.python.org/2/library/curses.html#module-curses\">官网</a></li>\n<li>enaml：使用类似 QML 的Declaratic语法来创建美观的用户界面。<a href=\"https://github.com/nucleic/enaml\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/kivy/\">kivy</a>：一个用来创建自然用户交互（NUI）应用程序的库，可以运行在 Windows, Linux, Mac OS X, Android 以及 iOS平台上。<a href=\"https://kivy.org/\">官网</a></li>\n<li>pyglet：一个Python 的跨平台窗口及多媒体库。<a href=\"https://bitbucket.org/pyglet/pyglet/wiki/Home\">官网</a></li>\n<li>PyQt：跨平台用户界面框架 <a href=\"http://www.qt.io/\">Qt</a> 的 Python 绑定 ，支持Qt v4 和 Qt v5。<a href=\"https://riverbankcomputing.com/software/pyqt/intro\">官网</a></li>\n<li>PySide：P跨平台用户界面框架 <a href=\"http://www.qt.io/\">Qt</a> 的 Python 绑定 ，支持Qt v4。<a href=\"https://wiki.qt.io/PySide\">官网</a></li>\n<li>Tkinter：Tkinter 是 Python GUI 的一个事实标准库。<a href=\"https://wiki.python.org/moin/TkInter\">官网</a></li>\n<li>Toga：一个 Python 原生的, 操作系统原生的 GUI 工具包。<a href=\"https://github.com/pybee/toga\">官网</a></li>\n<li>urwid：一个用来创建终端 GUI 应用的库，支持组件，事件和丰富的色彩等。<a href=\"http://urwid.org/\">官网</a></li>\n<li>wxPython：wxPython 是 wxWidgets C++ 类库和 Python 语言混合的产物。<a href=\"http://wxpython.org/\">官网</a></li>\n<li>PyGObject：GLib/GObject/GIO/GTK+ (GTK+3) 的 Python 绑定<a href=\"https://wiki.gnome.org/Projects/PyGObject\">官网</a></li>\n<li>Flexx：Flexx 是一个纯 Python 语言编写的用来创建 GUI 程序的工具集，它使用 web 技术进行界面的展示。<a href=\"https://github.com/zoofIO/flexx\">官网</a></li>\n</ul>\n<h3 id=\"游戏开发\"><a href=\"#游戏开发\" class=\"headerlink\" title=\"游戏开发\"></a>游戏开发</h3><p>超赞的游戏开发库。</p>\n<ul>\n<li>Cocos2d：cocos2d 是一个用来开发 2D 游戏， 示例和其他图形/交互应用的框架。基于 pyglet。<a href=\"http://cocos2d.org/\">官网</a></li>\n<li>Panda3D：由迪士尼开发的 3D 游戏引擎，并由卡内基梅陇娱乐技术中心负责维护。使用C++编写, 针对 Python 进行了完全的封装。<a href=\"https://www.panda3d.org/\">官网</a></li>\n<li>Pygame：Pygame 是一组 Python 模块，用来编写游戏。<a href=\"http://www.pygame.org/news.html\">官网</a></li>\n<li>PyOgre：Ogre 3D 渲染引擎的 Python 绑定，可以用来开发游戏和仿真程序等任何 3D 应用。<a href=\"http://www.ogre3d.org/tikiwiki/PyOgre\">官网</a></li>\n<li>PyOpenGL：OpenGL 的 Python 绑定及其相关 APIs。<a href=\"http://pyopengl.sourceforge.net/\">官网</a></li>\n<li>PySDL2：SDL2 库的封装，基于 ctypes。<a href=\"http://pysdl2.readthedocs.org/en/latest/\">官网</a></li>\n<li>RenPy：一个视觉小说（visual novel）引擎。<a href=\"https://www.renpy.org/\">官网</a></li>\n</ul>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><p>用来生成和操作日志的库。</p>\n<ul>\n<li>logging：(Python 标准库) 为 Python 提供日志功能。<a href=\"https://docs.python.org/2/library/logging.html\">官网</a></li>\n<li>logbook：Logging 库的替代品。<a href=\"http://pythonhosted.org/Logbook/\">官网</a></li>\n<li>Eliot：为复杂的和分布式系统创建日志。<a href=\"https://eliot.readthedocs.org/en/latest/\">官网</a></li>\n<li>Raven：Sentry的 Python 客户端。<a href=\"http://raven.readthedocs.org/en/latest/\">官网</a></li>\n<li>Sentry：实时记录和收集日志的服务器。<a href=\"https://pypi.python.org/pypi/sentry\">官网</a></li>\n</ul>\n<h3 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h3><p>进行代码库测试和生成测试数据的库。</p>\n<ul>\n<li>测试框架<ul>\n<li>unittest：(Python 标准库) 单元测试框架。<a href=\"https://docs.python.org/2/library/unittest.html\">官网</a></li>\n<li>nose：nose 扩展了 unittest 的功能。<a href=\"https://nose.readthedocs.org/en/latest/\">官网</a></li>\n<li>contexts：一个 Python 3.3+ 的 BDD 框架。受到C# – Machine.Specifications的启发。<a href=\"https://github.com/benjamin-hodgson/Contexts\">官网</a></li>\n<li>hypothesis：Hypothesis 是一个基于先进的 Quickcheck 风格特性的测试库。<a href=\"https://github.com/DRMacIver/hypothesis\">官网</a></li>\n<li>mamba：Python 的终极测试工具， 拥护BDD。<a href=\"http://nestorsalceda.github.io/mamba/\">官网</a></li>\n<li>PyAutoGUI：PyAutoGUI 是一个人性化的跨平台 GUI 自动测试模块。<a href=\"https://github.com/asweigart/pyautogui\">官网</a></li>\n<li>pyshould：Should 风格的断言，基于 <a href=\"https://github.com/hamcrest/PyHamcrest\">PyHamcrest</a>。<a href=\"https://github.com/drslump/pyshould\">官网</a></li>\n<li>pytest：一个成熟的全功能 Python 测试工具。<a href=\"http://pytest.org/latest/\">官网</a></li>\n<li>green：干净，多彩的测试工具。<a href=\"https://github.com/CleanCut/green\">官网</a></li>\n<li>pyvows：BDD 风格的测试工具，受Vows.js的启发。<a href=\"http://heynemann.github.io/pyvows/\">官网</a>-</li>\n<li>Robot Framework：一个通用的自动化测试框架。<a href=\"https://github.com/robotframework/robotframework\">官网</a></li>\n</ul>\n</li>\n<li>Web 测试<ul>\n<li>Selenium：<a href=\"http://www.seleniumhq.org/\">Selenium</a> WebDriver 的 Python 绑定。<a href=\"https://pypi.python.org/pypi/selenium\">官网</a></li>\n<li>locust：使用 Python 编写的，可扩展的用户加载测试工具。<a href=\"https://github.com/locustio/locust\">官网</a></li>\n<li>sixpack：一个和语言无关的 A/B 测试框架。<a href=\"https://github.com/seatgeek/sixpack\">官网</a></li>\n<li>splinter：开源的 web 应用测试工具。<a href=\"https://splinter.readthedocs.org/en/latest/\">官网</a></li>\n</ul>\n</li>\n<li>Mock测试<ul>\n<li>mock：(Python 标准库) 一个用于伪造测试的库。<a href=\"https://docs.python.org/3/library/unittest.mock.html\">官网</a></li>\n<li>doublex：Python 的一个功能强大的 doubles  测试框架。<a href=\"https://pypi.python.org/pypi/doublex\">官网</a></li>\n<li>freezegun：通过伪造日期模块来生成不同的时间。<a href=\"https://github.com/spulec/freezegun\">官网</a></li>\n<li>httmock：针对 Python 2.6+ 和 3.2+ 生成 伪造请求的库。<a href=\"https://github.com/patrys/httmock\">官网</a></li>\n<li>httpretty：Python 的 HTTP 请求 mock 工具。<a href=\"http://falcao.it/HTTPretty/\">官网</a></li>\n<li>responses：伪造 Python 中的 requests 库的一个通用库。<a href=\"https://github.com/getsentry/responses\">官网</a></li>\n<li>VCR.py：在你的测试中记录和重放 HTTP 交互。<a href=\"https://github.com/kevin1024/vcrpy\">官网</a></li>\n</ul>\n</li>\n<li>对象工厂<ul>\n<li>factoryboy：一个 Python 用的测试固件 (test fixtures) 替代库。<a href=\"https://github.com/rbarrois/factoryboy\">官网</a></li>\n<li>mixer：另外一个测试固件 (test fixtures) 替代库，支持 Django, Flask, SQLAlchemy, Peewee 等。<a href=\"https://github.com/klen/mixer\">官网</a></li>\n<li>modelmommy：为 Django 测试创建随机固件<a href=\"https://github.com/vandersonmota/modelmommy\">官网</a></li>\n</ul>\n</li>\n<li>代码覆盖率<ul>\n<li>coverage：代码覆盖率测量。<a href=\"https://pypi.python.org/pypi/coverage\">官网</a></li>\n</ul>\n</li>\n<li>伪数据<ul>\n<li>faker：一个 Python 库，用来生成伪数据。<a href=\"http://www.joke2k.net/faker/\">官网</a></li>\n<li>fake2db：伪数据库生成器。<a href=\"https://github.com/emirozer/fake2db\">官网</a></li>\n<li>radar：生成随机的日期/时间。<a href=\"https://pypi.python.org/pypi/radar\">官网</a></li>\n</ul>\n</li>\n<li>错误处理<ul>\n<li>FuckIt.py：FuckIt.py 使用最先进的技术来保证你的 Python 代码无论对错都能继续运行。<a href=\"https://github.com/ajalt/fuckitpy\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码分析和Lint工具\"><a href=\"#代码分析和Lint工具\" class=\"headerlink\" title=\"代码分析和Lint工具\"></a>代码分析和Lint工具</h3><p>进行代码分析，解析和操作代码库的库和工具。</p>\n<ul>\n<li>代码分析<ul>\n<li>coala：语言独立和易于扩展的代码分析应用程序。<a href=\"http://coala-analyzer.org/\">官网</a></li>\n<li>code2flow：把你的 Python 和 JavaScript 代码转换为流程图。<a href=\"https://github.com/scottrogowski/code2flow\">官网</a></li>\n<li>pycallgraph：这个库可以把你的Python 应用的流程(调用图)进行可视化。<a href=\"https://github.com/gak/pycallgraph\">官网</a></li>\n<li>pysonar2：Python 类型推断和检索工具。<a href=\"https://github.com/yinwang0/pysonar2\">官网</a></li>\n</ul>\n</li>\n<li>Lint工具<ul>\n<li>Flake8：模块化源码检查工具: pep8, pyflakes 以及 co。<a href=\"https://pypi.python.org/pypi/flake8\">官网</a></li>\n<li>Pylint：一个完全可定制的源码分析器。<a href=\"https://www.pylint.org/\">官网</a></li>\n<li>pylama：Python 和 JavaScript 的代码审查工具。<a href=\"https://pylama.readthedocs.org/en/latest/\">官网</a></li>\n</ul>\n</li>\n<li>代码格式化<ul>\n<li>autopep8：自动格式化 Python 代码，以使其符合 PEP8 规范。<a href=\"https://github.com/hhatto/autopep8\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Debugging-Tools\"><a href=\"#Debugging-Tools\" class=\"headerlink\" title=\"Debugging Tools\"></a>Debugging Tools</h3><p>用来进行代码调试的库。</p>\n<ul>\n<li>调试器<ul>\n<li>ipdb：IPython 启用的 <a href=\"https://docs.python.org/2/library/pdb.html\">pdb</a>。<a href=\"https://pypi.python.org/pypi/ipdb\">官网</a></li>\n<li>pudb：全屏，基于控制台的 Python 调试器。<a href=\"https://pypi.python.org/pypi/pudb\">官网</a></li>\n<li>pyringe：可以在 Python 进程中附加和注入代码的调试器。<a href=\"https://github.com/google/pyringe\">官网</a></li>\n<li>wdb：一个奇异的 web 调试器，通过 WebSockets 工作。<a href=\"https://github.com/Kozea/wdb\">官网</a></li>\n<li>winpdb：一个具有图形用户界面的 Python 调试器，可以进行远程调试，基于 rpdb2。<a href=\"http://winpdb.org/\">官网</a></li>\n<li>django-debug-toolbar：为 Django 显示各种调试信息。<a href=\"https://github.com/django-debug-toolbar/django-debug-toolbar\">官网</a></li>\n<li>django-devserver：一个 Django 运行服务器的替代品。<a href=\"https://github.com/dcramer/django-devserver\">官网</a></li>\n<li>flask-debugtoolbar：django-debug-toolbar 的 flask 版。<a href=\"https://github.com/mgood/flask-debugtoolbar\">官网</a></li>\n</ul>\n</li>\n<li>性能分析器<ul>\n<li>lineprofiler：逐行性能分析。<a href=\"https://github.com/rkern/lineprofiler\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/memory_profiler/\">Memory Profiler</a>：监控 Python 代码的内存使用。<a href=\"http://pypi.python.org/pypi/memory_profiler\">官网</a>、<a href=\"https://github.com/fabianp/memoryprofiler\">内存</a></li>\n<li>profiling：一个交互式 Python 性能分析工具。<a href=\"https://github.com/what-studio/profiling\">官网</a></li>\n</ul>\n</li>\n<li>其他<ul>\n<li>pyelftools：解析和分析 ELF 文件以及 DWARF 调试信息。<a href=\"https://github.com/eliben/pyelftools\">官网</a></li>\n<li>python-statsd：<a href=\"https://github.com/etsy/statsd/\">statsd</a> 服务器的 Python 客户端。<a href=\"https://github.com/WoLpH/python-statsd\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Science-and-Data-Analysis\"><a href=\"#Science-and-Data-Analysis\" class=\"headerlink\" title=\"Science and Data Analysis\"></a>Science and Data Analysis</h3><p>用来进行科学计算和数据分析的库。</p>\n<ul>\n<li>astropy：一个天文学 Python 库。<a href=\"http://www.astropy.org/\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/bcbio-nextgen/\">bcbio-nextgen</a>：这个工具箱为全自动高通量测序分析提供符合最佳实践的处理流程。<a href=\"https://github.com/chapmanb/bcbio-nextgen\">官网</a></li>\n<li>bccb：生物分析相关代码集合<a href=\"https://github.com/chapmanb/bcbb\">官网</a></li>\n<li>Biopython：Biopython 是一组可以免费使用的用来进行生物计算的工具。<a href=\"http://biopython.org/wiki/MainPage\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/blaze/\">blaze</a>：NumPy 和 Pandas 的大数据接口。<a href=\"http://blaze.readthedocs.org/en/latest/index.html\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/cclib/\">cclib</a>：一个用来解析和解释计算化学软件包输出结果的库。<a href=\"http://cclib.github.io/\">官网</a></li>\n<li>NetworkX：一个为复杂网络设计的高性能软件。<a href=\"https://networkx.github.io/\">官网</a></li>\n<li>Neupy：执行和测试各种不同的人工神经网络算法。<a href=\"http://neupy.com/pages/home.html\">官网</a></li>\n<li>Numba：Python JIT (just in time) 编译器，针对科学用的 Python ，由Cython 和 NumPy 的开发者开发。<a href=\"http://numba.pydata.org/\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/numpy/\">NumPy</a>：使用 Python 进行科学计算的基础包。<a href=\"http://www.numpy.org/\">官网</a></li>\n<li>Open Babel：一个化学工具箱，用来描述多种化学数据。<a href=\"http://openbabel.org/wiki/MainPage\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/open-mining/\">Open Mining</a>：使用 Python 挖掘商业情报 (BI) (Pandas web 接口)。<a href=\"https://github.com/mining/mining\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/orange/\">orange</a>：通过可视化编程或 Python 脚本进行数据挖掘，数据可视化，分析和机器学习。<a href=\"http://orange.biolab.si/\">官网</a></li>\n<li>Pandas：提供高性能，易用的数据结构和数据分析工具。<a href=\"http://pandas.pydata.org/\">官网</a></li>\n<li>PyDy：PyDy 是 Python Dynamics 的缩写，用来为动力学运动建模工作流程提供帮助， 基于 NumPy, SciPy, IPython 和 matplotlib。<a href=\"http://www.pydy.org/\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/pymc/\">PyMC</a>：马尔科夫链蒙特卡洛采样工具。<a href=\"https://github.com/pymc-devs/pymc3\">官网</a></li>\n<li>RDKit：化学信息学和机器学习软件。<a href=\"http://www.rdkit.org/\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/scipy/\">SciPy</a>：由一些基于 Python ，用于数学，科学和工程的开源软件构成的生态系统。<a href=\"http://www.scipy.org/\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/statsmodels/\">statsmodels</a>：统计建模和计量经济学。<a href=\"https://github.com/statsmodels/statsmodels\">官网</a></li>\n<li>SymPy：一个用于符号数学的 Python 库。<a href=\"https://github.com/sympy/sympy\">官网</a></li>\n<li>zipline：一个 Python 算法交易库。<a href=\"https://github.com/quantopian/zipline\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/bayesian-belief-networks/\">Bayesian-belief-networks</a>：优雅的贝叶斯信念网络框架。<a href=\"https://github.com/eBay/bayesian-belief-networks\">官网</a></li>\n<li>keras: 以tensorflow或者theano为后端的深度学习封装库，快速上手神经网络<a href=\"https://keras.io/\">官网</a></li>\n</ul>\n<h3 id=\"数据可视化\"><a href=\"#数据可视化\" class=\"headerlink\" title=\"数据可视化\"></a>数据可视化</h3><p>进行数据可视化的库。 参见: <a href=\"https://github.com/sorrycc/awesome-javascript#data-visualization\">awesome-javascript</a>。</p>\n<ul>\n<li>matplotlib：一个 Python 2D 绘图库。<a href=\"http://matplotlib.org/\">官网</a></li>\n<li>bokeh：用 Python 进行交互式 web 绘图。<a href=\"https://github.com/bokeh/bokeh\">官网</a></li>\n<li>ggplot：ggplot2 给 R 提供的 API 的 Python 版本。<a href=\"https://github.com/yhat/ggplot\">官网</a></li>\n<li>plotly：协同 Python 和 matplotlib 工作的 web 绘图库。<a href=\"https://plot.ly/python/\">官网</a></li>\n<li>pygal：一个 Python SVG 图表创建工具。<a href=\"http://www.pygal.org/en/latest/\">官网</a></li>\n<li>pygraphviz：Graphviz 的 Python 接口。<a href=\"https://pypi.python.org/pypi/pygraphviz\">官网</a></li>\n<li>PyQtGraph：交互式实时2D/3D/图像绘制及科学/工程学组件。<a href=\"http://www.pyqtgraph.org/\">官网</a></li>\n<li>SnakeViz：一个基于浏览器的 Python’s cProfile 模块输出结果查看工具。<a href=\"http://jiffyclub.github.io/snakeviz/\">官网</a></li>\n<li>vincent：把 Python 转换为 Vega 语法的转换工具。<a href=\"https://github.com/wrobstory/vincent\">官网</a></li>\n<li>VisPy：基于 OpenGL 的高性能科学可视化工具。<a href=\"http://vispy.org/\">官网</a></li>\n</ul>\n<h3 id=\"计算机视觉\"><a href=\"#计算机视觉\" class=\"headerlink\" title=\"计算机视觉\"></a>计算机视觉</h3><p>计算机视觉库。</p>\n<ul>\n<li>OpenCV：开源计算机视觉库。<a href=\"http://opencv.org/\">官网</a></li>\n<li>pyocr：Tesseract和Cuneiform的包装库。<a href=\"https://github.com/jflesch/pyocr\">官网</a></li>\n<li>pytesseract：<a href=\"https://github.com/tesseract-ocr\">Google Tesseract OCR</a>的另一包装库。<a href=\"https://github.com/madmaze/pytesseract\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/simplecv/\">SimpleCV</a>：一个用来创建计算机视觉应用的开源框架。<a href=\"http://simplecv.org/\">官网</a></li>\n</ul>\n<h3 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h3><p>机器学习库。 参见: <a href=\"https://github.com/josephmisiti/awesome-machine-learning#python\">awesome-machine-learning</a>.</p>\n<ul>\n<li>Crab：灵活、快速的推荐引擎。<a href=\"https://github.com/muricoca/crab\">官网</a></li>\n<li>gensim：人性化的话题建模库。<a href=\"https://github.com/piskvorky/gensim\">官网</a></li>\n<li>hebel：GPU 加速的深度学习库。<a href=\"https://github.com/hannes-brt/hebel\">官网</a></li>\n<li>NuPIC：智能计算 Numenta 平台。<a href=\"https://github.com/numenta/nupic\">官网</a></li>\n<li>pattern：Python 网络挖掘模块。<a href=\"https://github.com/clips/pattern\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/pybrain/\">PyBrain</a>：另一个 Python 机器学习库。<a href=\"https://github.com/pybrain/pybrain\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/pylearn2/\">Pylearn2</a>：一个基于 <a href=\"https://github.com/Theano/Theano\">Theano</a> 的机器学习库。<a href=\"https://github.com/lisa-lab/pylearn2\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-recsys/\">python-recsys</a>：一个用来实现推荐系统的 Python 库。<a href=\"https://github.com/ocelma/python-recsys\">官网</a></li>\n<li>scikit-learn：基于 SciPy 构建的机器学习 Python 模块。<a href=\"http://scikit-learn.org/\">官网</a></li>\n<li>pydeep：Python 深度学习库。<a href=\"https://github.com/andersbll/deeppy\">官网</a></li>\n<li>vowpalporpoise：轻量级 <a href=\"https://github.com/JohnLangford/vowpalwabbit/\">Vowpal Wabbit</a> 的 Python 封装。<a href=\"https://github.com/josephreisinger/vowpalporpoise\">官网</a></li>\n<li>skflow：一个 <a href=\"https://github.com/tensorflow/tensorflow\">TensorFlow</a> 的简化接口(模仿 scikit-learn)。<a href=\"https://github.com/tensorflow/skflow\">官网</a></li>\n</ul>\n<h3 id=\"MapReduce\"><a href=\"#MapReduce\" class=\"headerlink\" title=\"MapReduce\"></a>MapReduce</h3><p>MapReduce 框架和库。</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/dpark/\">dpark</a>：Spark 的 Python 克隆版，一个类似 MapReduce 的框架。<a href=\"https://github.com/douban/dpark\">官网</a></li>\n<li>dumbo：这个 Python 模块可以让人轻松的编写和运行 Hadoop 程序。<a href=\"https://github.com/klbostee/dumbo\">官网</a></li>\n<li>luigi：这个模块帮你构建批处理作业的复杂流水线。<a href=\"https://github.com/spotify/luigi\">官网</a></li>\n<li>mrjob：在 Hadoop 或 Amazon Web Services 上运行 MapReduce 任务。<a href=\"https://github.com/Yelp/mrjob\">官网</a></li>\n<li>PySpark：Spark 的 Python API 。<a href=\"http://spark.apache.org/docs/latest/programming-guide.html\">官网</a></li>\n<li>streamparse：运行针对事实数据流的 Python 代码。集成了<a href=\"http://storm.apache.org/\">Apache Storm</a>。<a href=\"https://github.com/Parsely/streamparse\">官网</a></li>\n</ul>\n<h3 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h3><p>使用 Python 进行函数式编程。</p>\n<ul>\n<li>CyToolz：Toolz 的 Cython 实现 : 高性能函数式工具。<a href=\"https://github.com/pytoolz/cytoolz/\">官网</a></li>\n<li>fn.py：在 Python 中进行函数式编程 : 实现了一些享受函数式编程缺失的功能。<a href=\"https://github.com/kachayev/fn.py\">官网</a></li>\n<li>funcy：炫酷又实用的函数式工具。<a href=\"https://github.com/Suor/funcy\">官网</a></li>\n<li>Toolz：一组用于迭代器，函数和字典的函数式编程工具。<a href=\"https://github.com/pytoolz/toolz\">官网</a></li>\n</ul>\n<h3 id=\"第三方-API\"><a href=\"#第三方-API\" class=\"headerlink\" title=\"第三方 API\"></a>第三方 API</h3><p>用来访问第三方 API的库。 参见： <a href=\"https://github.com/realpython/list-of-python-api-wrappers\">List of Python API Wrappers and Libraries</a>。</p>\n<ul>\n<li>apache-libcloud：一个为各种云设计的 Python 库。<a href=\"https://libcloud.apache.org/\">官网</a></li>\n<li>boto：Amazon Web Services 的 Python 接口。<a href=\"https://github.com/boto/boto\">官网</a></li>\n<li>django-wordpress：WordPress models and views for Django.<a href=\"https://github.com/sunlightlabs/django-wordpress/\">官网</a></li>\n<li>facebook-sdk：Facebook 平台的 Python SDK.<a href=\"https://github.com/mobolic/facebook-sdk\">官网</a></li>\n<li>facepy：Facepy 让和 Facebook’s Graph API 的交互变得更容易。<a href=\"https://github.com/jgorset/facepy\">官网</a></li>\n<li>gmail：Gmail 的 Python 接口。<a href=\"https://github.com/charlierguo/gmail\">官网</a></li>\n<li>google-api-python-client：Python 用的 Google APIs 客户端库。<a href=\"https://github.com/google/google-api-python-client\">官网</a></li>\n<li>gspread：Google 电子表格的 Python API.<a href=\"https://github.com/burnash/gspread\">官网</a></li>\n<li>twython：Twitter API 的封装。<a href=\"https://github.com/ryanmcgrath/twython\">官网</a></li>\n</ul>\n<h3 id=\"DevOps-工具\"><a href=\"#DevOps-工具\" class=\"headerlink\" title=\"DevOps 工具\"></a>DevOps 工具</h3><p>用于 DevOps 的软件和库。</p>\n<ul>\n<li>Ansible：一个非常简单的 IT 自动化平台。<a href=\"https://github.com/ansible/ansible\">官网</a></li>\n<li>SaltStack：基础设施自动化和管理系统。<a href=\"https://github.com/saltstack/salt\">官网</a></li>\n<li>OpenStack：用于构建私有和公有云的开源软件。<a href=\"http://www.openstack.org/\">官网</a></li>\n<li>Docker Compose：快速，分离的开发环境，使用 Docker。<a href=\"https://docs.docker.com/compose/\">官网</a></li>\n<li>Fabric：一个简单的，Python 风格的工具，用来进行远程执行和部署。<a href=\"http://www.fabfile.org/\">官网</a></li>\n<li>cuisine：为 Fabric 提供一系列高级函数。<a href=\"https://github.com/sebastien/cuisine\">官网</a></li>\n<li>Fabtools：一个用来编写超赞的 Fabric 文件的工具。<a href=\"https://github.com/ronnix/fabtools\">官网</a></li>\n<li>gitapi：Git 的纯 Python API。<a href=\"https://bitbucket.org/haard/gitapi\">官网</a></li>\n<li>hgapi：Mercurial 的纯 Python API。<a href=\"https://bitbucket.org/haard/hgapi\">官网</a></li>\n<li>honcho：<a href=\"https://github.com/ddollar/foreman\">Foreman</a>的 Python 克隆版，用来管理基于<a href=\"https://devcenter.heroku.com/articles/procfile\">Procfile</a>的应用。<a href=\"https://github.com/nickstenning/honcho\">官网</a></li>\n<li>pexpect：Controlling interactive programs in a pseudo-terminal like 在一个伪终端中控制交互程序，就像 GNU expect 一样。<a href=\"https://github.com/pexpect/pexpect\">官网</a></li>\n<li>psutil：一个跨平台进程和系统工具模块。<a href=\"https://github.com/giampaolo/psutil\">官网</a></li>\n<li>supervisor：UNIX 的进程控制系统。<a href=\"https://github.com/Supervisor/supervisor\">官网</a></li>\n</ul>\n<h3 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h3><p>任务调度库。</p>\n<ul>\n<li>APScheduler：轻巧但强大的进程内任务调度，使你可以调度函数。<a href=\"http://apscheduler.readthedocs.org/en/latest/\">官网</a></li>\n<li>django-schedule：一个 Django 排程应用。<a href=\"https://github.com/thauber/django-schedule\">官网</a></li>\n<li>doit：一个任务执行和构建工具。<a href=\"http://pydoit.org/\">官网</a></li>\n<li>gunnery：分布式系统使用的多用途任务执行工具 ，具有 web 交互界面。<a href=\"https://github.com/gunnery/gunnery\">官网</a></li>\n<li>Joblib：一组为 Python 提供轻量级作业流水线的工具。<a href=\"http://pythonhosted.org/joblib/index.html\">官网</a></li>\n<li>Plan：如有神助地编写 crontab 文件。<a href=\"https://github.com/fengsp/plan\">官网</a></li>\n<li>schedule：人性化的 Python 任务调度库。<a href=\"https://github.com/dbader/schedule\">官网</a></li>\n<li>Spiff：使用纯 Python 实现的强大的工作流引擎。<a href=\"https://github.com/knipknap/SpiffWorkflow\">官网</a></li>\n<li>TaskFlow：一个可以让你方便执行任务的 Python 库，一致并且可靠。<a href=\"http://docs.openstack.org/developer/taskflow/\">官网</a></li>\n</ul>\n<h3 id=\"外来函数接口\"><a href=\"#外来函数接口\" class=\"headerlink\" title=\"外来函数接口\"></a>外来函数接口</h3><p>使用外来函数接口的库。</p>\n<ul>\n<li>cffi：用来调用 C 代码的外来函数接口。<a href=\"https://pypi.python.org/pypi/cffi\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/ctypes/\">ctypes</a>：(Python 标准库) 用来调用 C 代码的外来函数接口。<a href=\"https://docs.python.org/2/library/ctypes.html\">官网</a></li>\n<li>PyCUDA：Nvidia CUDA API 的封装。<a href=\"https://mathema.tician.de/software/pycuda/\">官网</a></li>\n<li>SWIG：简化的封装和接口生成器。<a href=\"http://www.swig.org/Doc1.3/Python.html\">官网</a></li>\n</ul>\n<h3 id=\"高性能\"><a href=\"#高性能\" class=\"headerlink\" title=\"高性能\"></a>高性能</h3><p>让 Python 更快的库。</p>\n<ul>\n<li>Cython：优化的 Python 静态编译器。使用类型混合使 Python 编译成 C 或 C++ 模块来获得性能的极大提升。<a href=\"http://cython.org/\">官网</a></li>\n<li>PeachPy：嵌入 Python 的 x86-64 汇编器。可以被用作 Python 内联的汇编器或者是独立的汇编器，用于 Windows, Linux, OS X, Native Client 或者 Go 。<a href=\"https://github.com/Maratyszcza/PeachPy\">官网</a></li>\n<li>PyPy：使用 Python 实现的 Python。解释器使用黑魔法加快 Python 运行速度且不需要加入额外的类型信息。<a href=\"http://pypy.org/\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/pyston-llvm-jit/\">Pyston</a>：使用 LLVM 和现代 JIT 技术构建的 Python 实现，目标是为了获得很好的性能。<a href=\"https://github.com/dropbox/pyston\">官网</a></li>\n<li>Stackless Python：一个强化版的 Python。<a href=\"https://bitbucket.org/stackless-dev/stackless/overview\">官网</a></li>\n</ul>\n<h3 id=\"微软的-Windows平台\"><a href=\"#微软的-Windows平台\" class=\"headerlink\" title=\"微软的 Windows平台\"></a>微软的 Windows平台</h3><p>在 Windows 平台上进行 Python 编程。</p>\n<ul>\n<li>Python(x,y)：面向科学应用的 Python 发行版，基于 Qt 和 Spyder。<a href=\"http://python-xy.github.io/\">官网</a></li>\n<li>pythonlibs：非官方的 Windows 平台 Python 扩展二进制包。<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">官网</a></li>\n<li>PythonNet：Python 与 .NET 公共语言运行库 (CLR)的集成。<a href=\"https://github.com/pythonnet/pythonnet\">官网</a></li>\n<li>PyWin32：针对 Windows 的Python 扩展。<a href=\"https://sourceforge.net/projects/pywin32/\">官网</a></li>\n<li>WinPython：Windows 7/8 系统下便携式开发环境。<a href=\"https://winpython.github.io/\">官网</a></li>\n</ul>\n<h3 id=\"网络可视化和SDN\"><a href=\"#网络可视化和SDN\" class=\"headerlink\" title=\"网络可视化和SDN\"></a>网络可视化和SDN</h3><p>用来进行网络可视化和SDN(软件定义网络)的工具和库。</p>\n<ul>\n<li>Mininet：一款流行的网络模拟器以及用 Python 编写的 API。<a href=\"http://mininet.org/\">官网</a></li>\n<li>POX：一个针对基于 Python 的软件定义网络应用（例如 OpenFlow SDN 控制器）的开源开发平台。<a href=\"https://github.com/noxrepo/pox\">官网</a></li>\n<li>Pyretic：火热的 SDN 编程语言中的一员，为网络交换机和模拟器提供强大的抽象能力。<a href=\"http://frenetic-lang.org/pyretic/\">官网</a></li>\n<li>SDX Platform：基于 SDN 的 IXP 实现，影响了 Mininet, POX 和 Pyretic。<a href=\"https://github.com/sdn-ixp/internet2award\">官网</a></li>\n</ul>\n<h3 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h3><p>用来对硬件进行编程的库。</p>\n<ul>\n<li>ino：操作<a href=\"https://www.arduino.cc/\">Arduino</a>的命令行工具。<a href=\"http://inotool.org/\">官网</a></li>\n<li>Pyro：Python 机器人编程库。<a href=\"http://pyrorobotics.com/\">官网</a></li>\n<li>PyUserInput：跨平台的，控制鼠标和键盘的模块。<a href=\"https://github.com/SavinaRoja/PyUserInput\">官网</a></li>\n<li>scapy：一个非常棒的操作数据包的库。<a href=\"https://github.com/secdev/scapy\">官网</a></li>\n<li>wifi：一个 Python 库和命令行工具用来在 Linux 平台上操作WiFi。<a href=\"https://wifi.readthedocs.org/en/latest/\">官网</a></li>\n<li>Pingo：Pingo 为类似Raspberry Pi，pcDuino， Intel Galileo等设备提供统一的API用以编程。<a href=\"http://www.pingo.io/\">官网</a></li>\n</ul>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>帮助从 Python 2 向 Python 3迁移的库。</p>\n<ul>\n<li>Python-Future：这就是 Python 2 和 Python 3 之间丢失的那个兼容性层。<a href=\"http://python-future.org/index.html\">官网</a></li>\n<li>Python-Modernize：使 Python 代码更加现代化以便最终迁移到 Python 3。<a href=\"https://github.com/mitsuhiko/python-modernize\">官网</a></li>\n<li>Six：Python 2 和 3 的兼容性工具。<a href=\"https://pypi.python.org/pypi/six\">官网</a></li>\n</ul>\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><p>不属于上面任何一个类别，但是非常有用的库。</p>\n<ul>\n<li>blinker：一个快速的 Python 进程内信号/事件分发系统。<a href=\"https://github.com/jek/blinker\">官网</a></li>\n<li>itsdangerous：一系列辅助工具用来将可信的数据传入不可信的环境。<a href=\"https://github.com/pallets/itsdangerous\">官网</a></li>\n<li>pluginbase：一个简单但是非常灵活的 Python 插件系统。<a href=\"https://github.com/mitsuhiko/pluginbase\">官网</a></li>\n<li>Pychievements：一个用来创建和追踪成就的 Python 框架。<a href=\"https://github.com/PacketPerception/pychievements\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/tryton/\">Tryton</a>：一个通用商务框架。<a href=\"http://www.tryton.org/\">官网</a></li>\n</ul>\n<h3 id=\"算法和设计模式\"><a href=\"#算法和设计模式\" class=\"headerlink\" title=\"算法和设计模式\"></a>算法和设计模式</h3><p>Python 实现的算法和设计模式。</p>\n<ul>\n<li><a href=\"http://hao.jobbole.com/algorithms/\">algorithms</a>：一个 Python 算法模块。<a href=\"https://github.com/nryoung/algorithms\">官网</a></li>\n<li>python-patterns：Python 设计模式的集合。<a href=\"https://github.com/faif/python-patterns\">官网</a></li>\n<li>sortedcontainers：快速，纯 Python 实现的SortedList，SortedDict 和 SortedSet 类型。<a href=\"http://www.grantjenks.com/docs/sortedcontainers/\">官网</a></li>\n</ul>\n<h3 id=\"编辑器插件\"><a href=\"#编辑器插件\" class=\"headerlink\" title=\"编辑器插件\"></a>编辑器插件</h3><p>编辑器和 IDE 的插件</p>\n<ul>\n<li>Emacs<ul>\n<li>Elpy：Emacs Python 开发环境。<a href=\"https://github.com/jorgenschaefer/elpy\">官网</a></li>\n</ul>\n</li>\n<li>Sublime Text<ul>\n<li>SublimeJEDI：一个 Sublime Text 插件，用来使用超赞的自动补全库 Jedi。<a href=\"https://github.com/srusskih/SublimeJEDI\">官网</a></li>\n<li>Anaconda：Anaconda 把你的 Sublime Text 3 变成一个功能齐全的 Python IDE。<a href=\"https://github.com/DamnWidget/anaconda\">官网</a></li>\n</ul>\n</li>\n<li>Vim<ul>\n<li><a href=\"http://hao.jobbole.com/youcompleteme/\">YouCompleteMe</a>：引入基于 <a href=\"https://github.com/davidhalter/jedi\">Jedi</a> 的 Python 自动补全引擎。<a href=\"https://github.com/Valloric/YouCompleteMe\">官网</a></li>\n<li>Jedi-vim：绑定 Vim 和 Jedi 自动补全库对 Python 进行自动补全。<a href=\"https://github.com/davidhalter/jedi-vim\">官网</a></li>\n<li>Python-mode：将 Vim 变成 Python IDE 的一款多合一插件。<a href=\"https://github.com/klen/python-mode\">官网</a></li>\n</ul>\n</li>\n<li>Visual Studio<ul>\n<li>PTVS：Visual Studio 的 Python 工具<a href=\"https://github.com/Microsoft/PTVS\">官网</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"集成开发环境\"><a href=\"#集成开发环境\" class=\"headerlink\" title=\"集成开发环境\"></a>集成开发环境</h3><p>流行的 Python 集成开发环境。</p>\n<ul>\n<li>PyCharm：商业化的 Python IDE ，由 JetBrains 开发。也有免费的社区版提供。<a href=\"https://www.jetbrains.com/pycharm/\">官网</a></li>\n<li>LiClipse：基于 Eclipse 的免费多语言 IDE 。使用 PyDev 来支持 Python 。<a href=\"http://www.liclipse.com/\">官网</a></li>\n<li>Spyder：开源 Python IDE。<a href=\"https://github.com/spyder-ide/spyder\">官网</a></li>\n</ul>\n<h3 id=\"自动聊天工具\"><a href=\"#自动聊天工具\" class=\"headerlink\" title=\"自动聊天工具\"></a>自动聊天工具</h3><p>用于开发聊天机器人的库</p>\n<ul>\n<li>Errbot：最简单和最流行的聊天机器人用来实现自动聊天工具。<a href=\"http://errbot.io/en/latest/\">官网</a></li>\n</ul>\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><p>在线工具和简化开发的 API 。</p>\n<h3 id=\"持续集成\"><a href=\"#持续集成\" class=\"headerlink\" title=\"持续集成\"></a>持续集成</h3><p>参见: <a href=\"https://github.com/ciandcd/awesome-ciandcd#online-build-system\">awesome-CIandCD</a>.</p>\n<ul>\n<li>Travis CI：一个流行的工具，为你的开源和<a href=\"https://travis-ci.com/\">私人</a>项目提供持续集成服务。(仅支持 GitHub)<a href=\"https://travis-ci.org/\">官网</a></li>\n<li>CircleCI：一个持续集成工具，可以非常快速的进行并行测试。 (仅支持 GitHub)<a href=\"https://circleci.com/\">官网</a></li>\n<li>Vexor CI：一个为私人 app 提供持续集成的工具，支持按分钟付费。<a href=\"https://vexor.io/\">官网</a></li>\n<li>Wercker：基于 Docker 平台，用来构建和部署微服务。<a href=\"http://wercker.com/\">官网</a></li>\n</ul>\n<h3 id=\"代码质量\"><a href=\"#代码质量\" class=\"headerlink\" title=\"代码质量\"></a>代码质量</h3><ul>\n<li>Codacy：自动化代码审查，更加快速的发布高质量代码。对于开源项目是免费的。<a href=\"https://www.codacy.com/\">官网</a></li>\n<li>QuantifiedCode：一个数据驱动、自动、持续的代码审查工具。<a href=\"https://www.quantifiedcode.com/\">官网</a></li>\n</ul>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><p>在这里可以找到新的 Python 库。</p>\n<h3 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h3><ul>\n<li><a href=\"https://www.reddit.com/r/python\">r/Python</a></li>\n<li><a href=\"https://www.coolgithubprojects.com/\">CoolGithubProjects</a></li>\n<li><a href=\"https://www.djangopackages.com/\">Django Packages</a></li>\n<li><a href=\"http://www.fullstackpython.com/\">Full Stack Python</a></li>\n<li><a href=\"http://python3wos.appspot.com/\">Python 3 Wall of Superpowers</a></li>\n<li><a href=\"http://pythonhackers.com/open-source/\">Python Hackers</a></li>\n<li><a href=\"https://python.zeef.com/alan.richmond\">Python ZEEF</a></li>\n<li><a href=\"https://github.com/trending?l=python\">Trending Python repositories on GitHub today</a></li>\n<li><a href=\"http://pypi-ranking.info/alltime\">PyPI Ranking</a></li>\n</ul>\n<h3 id=\"周刊\"><a href=\"#周刊\" class=\"headerlink\" title=\"周刊\"></a>周刊</h3><ul>\n<li><a href=\"http://importpython.com/newsletter/\">Import Python Newsletter</a></li>\n<li><a href=\"http://pycoders.com/\">Pycoder’s Weekly</a></li>\n<li><a href=\"http://www.pythonweekly.com/\">Python Weekly</a></li>\n</ul>\n<h3 id=\"Twitter\"><a href=\"#Twitter\" class=\"headerlink\" title=\"Twitter\"></a>Twitter</h3><ul>\n<li><a href=\"https://twitter.com/codetengu\">@codetengu</a></li>\n<li><a href=\"https://twitter.com/getpy\">@getpy</a></li>\n<li><a href=\"https://twitter.com/planetpython\">@planetpython</a></li>\n<li><a href=\"https://twitter.com/pycoders\">@pycoders</a></li>\n<li><a href=\"https://twitter.com/pypi\">@pypi</a></li>\n<li><a href=\"https://twitter.com/pythontrending\">@pythontrending</a></li>\n<li><a href=\"https://twitter.com/PythonWeekly\">@PythonWeekly</a></li>\n</ul>\n<h3 id=\"学习指南\"><a href=\"#学习指南\" class=\"headerlink\" title=\"学习指南\"></a>学习指南</h3><ul>\n<li><a href=\"http://hao.jobbole.com/scipy-lecture-notes/\">Scipy-lecture-notes</a>：如何用Python来做学术？<a href=\"https://github.com/scipy-lectures/scipy-lecture-notes\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/scientific-python-lectures/\">SScientific-python-lectures</a>：Python科学计算的资料。<a href=\"https://github.com/jrjohansson/scientific-python-lectures\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/mario-level-1/\">Mario-Level-1</a>：用Python和Pygame写的超级马里奥第一关。<a href=\"https://github.com/justinmeister/Mario-Level-1\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-koans/\">Python Koans</a>：Python的交互式学习工具。<a href=\"https://github.com/gregmalcolm/python_koans\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/minecraft-python/\">Minecraft</a>：用python写的Minecraft游戏。<a href=\"https://github.com/fogleman/Minecraft\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-pycrumbs/\">pycrumbs</a>：Python资源大全。<a href=\"https://github.com/kirang89/pycrumbs/blob/master/pycrumbs.md\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-patterns/\">python-patterns</a>：使用python实现设计模式。<a href=\"https://github.com/faif/python-patterns\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/python-projects/\">Projects</a>：Python项目大集合。<a href=\"https://github.com/karan/Projects\">官网</a></li>\n<li><a href=\"http://hao.jobbole.com/the-hitchhikers-guide-to-python/\">The Hitchhiker’s Guide to Python</a>：旅行者的Python学习指南。<a href=\"http://docs.python-guide.org/en/latest/\">官网</a></li>\n<li><a href=\"http://top.jobbole.com/18767/\">Code Like a Pythonista: Idiomatic Python</a>：如何像Python高手(Pythonista)一样编程。<a href=\"http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html\">官网</a></li>\n</ul>\n<p></p><h3 id=\"websites\">知名网站</h3><br><em>值得关注的 Python 技术站点。</em><p></p>\n<h4>中文站点</h4>\n\n<ul>\n<li>伯乐在线 Python 频道：分享 Python 开发技术、相关的行业动态。<a href=\"http://python.jobbole.com/\">官网</a></li>\n</ul>\n<h4>英文站点</h4>\n\n<ul>\n<li>《<a href=\"http://python.jobbole.com/81730/\">值得关注的 10 个 Python 英文博客</a>》</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/Dockerfile的创建/docker.jpg","post":"cj3bpqyok0000sof1wcf2ep55","slug":"docker.jpg","modified":1,"renderable":1},{"_id":"source/_posts/docker-本地Registry的部署/docker.jpg","post":"cj3bpqyoz0005sof181h8t60u","slug":"docker.jpg","modified":1,"renderable":1},{"_id":"source/_posts/my-promise/yueshujun.png","post":"cj3bpqyp00006sof13x9wafkb","slug":"yueshujun.png","modified":1,"renderable":1},{"_id":"source/_posts/【SOAR】cosplay社/QQ20170516-0.jpg","slug":"QQ20170516-0.jpg","post":"cj3bpqyp8000esof1wnk1lnfq","modified":1,"renderable":0},{"_id":"source/_posts/第十三章-红黑树/13_2_1.png","post":"cj3bpqyp9000fsof1pg18nxcg","slug":"13_2_1.png","modified":1,"renderable":1},{"_id":"source/_posts/算法导论-第二章-算法基础/pic1.png","post":"cj3bpqypd000jsof1mx3zo0f2","slug":"pic1.png","modified":1,"renderable":1},{"_id":"source/_posts/机器学习-一-简单线性回归/ex1data1.txt","post":"cj3bpqypb000hsof19kkpo3gh","slug":"ex1data1.txt","modified":1,"renderable":1},{"_id":"source/_posts/机器学习-一-简单线性回归/figure1.png","post":"cj3bpqypb000hsof19kkpo3gh","slug":"figure1.png","modified":1,"renderable":1},{"_id":"source/_posts/机器学习-一-简单线性回归/figure2.png","post":"cj3bpqypb000hsof19kkpo3gh","slug":"figure2.png","modified":1,"renderable":1},{"_id":"source/_posts/机器学习-一-简单线性回归/figure3.png","post":"cj3bpqypb000hsof19kkpo3gh","slug":"figure3.png","modified":1,"renderable":1},{"_id":"source/_posts/机器学习-一-简单线性回归/formula1.png","post":"cj3bpqypb000hsof19kkpo3gh","slug":"formula1.png","modified":1,"renderable":1},{"_id":"source/_posts/机器学习-一-简单线性回归/formula2.png","post":"cj3bpqypb000hsof19kkpo3gh","slug":"formula2.png","modified":1,"renderable":1},{"_id":"source/_posts/机器学习-一-简单线性回归/formula3.png","post":"cj3bpqypb000hsof19kkpo3gh","slug":"formula3.png","modified":1,"renderable":1},{"_id":"source/_posts/机器学习-一-简单线性回归/formula4.png","post":"cj3bpqypb000hsof19kkpo3gh","slug":"formula4.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cj3bpqyoz0005sof181h8t60u","tag_id":"cj3bpqyou0003sof19wk0hvoo","_id":"cj3bpqyp30008sof19opimkak"},{"post_id":"cj3bpqyok0000sof1wcf2ep55","tag_id":"cj3bpqyou0003sof19wk0hvoo","_id":"cj3bpqyp5000asof1cn0i1nky"},{"post_id":"cj3bpqyoq0002sof1y4oml7qk","tag_id":"cj3bpqyou0003sof19wk0hvoo","_id":"cj3bpqyp8000dsof12c7irj6m"},{"post_id":"cj3bpqyow0004sof14rtkaa02","tag_id":"cj3bpqyp7000csof17ymvoxlo","_id":"cj3bpqypc000isof1hzbuum8o"},{"post_id":"cj3bpqyp30009sof1vu7n8uzp","tag_id":"cj3bpqyp7000csof17ymvoxlo","_id":"cj3bpqype000lsof1jwv5rjy0"},{"post_id":"cj3bpqyp5000bsof1wd3ybwkl","tag_id":"cj3bpqype000ksof1qj4f0f5w","_id":"cj3bpqypf000nsof1mhjyysak"},{"post_id":"cj3bpqyp8000esof1wnk1lnfq","tag_id":"cj3bpqypf000msof1p5ftmjzu","_id":"cj3bpqypg000psof15fmu0rd2"},{"post_id":"cj3bpqyp9000fsof1pg18nxcg","tag_id":"cj3bpqypf000osof1dnd770ek","_id":"cj3bpqyph000rsof1s98g7zp9"},{"post_id":"cj3bpqypb000hsof19kkpo3gh","tag_id":"cj3bpqyph000qsof1jasq3kbr","_id":"cj3bpqypj000vsof199iq1e9l"},{"post_id":"cj3bpqypb000hsof19kkpo3gh","tag_id":"cj3bpqype000ksof1qj4f0f5w","_id":"cj3bpqypj000wsof14w3hbmzu"},{"post_id":"cj3bpqypb000hsof19kkpo3gh","tag_id":"cj3bpqypi000tsof1hrlkb1hk","_id":"cj3bpqypk000ysof19elufgf5"},{"post_id":"cj3bpqypd000jsof1mx3zo0f2","tag_id":"cj3bpqypf000osof1dnd770ek","_id":"cj3bpqypk000zsof1usemndyd"},{"post_id":"cj3bpqypd000jsof1mx3zo0f2","tag_id":"cj3bpqype000ksof1qj4f0f5w","_id":"cj3bpqypk0010sof1b3nuqmv0"},{"post_id":"cj3bpqypn0011sof1vioa6vof","tag_id":"cj3bpqype000ksof1qj4f0f5w","_id":"cj3bpqypo0012sof1gcwdx393"},{"post_id":"cj3bpqypn0011sof1vioa6vof","tag_id":"cj3bpqypi000tsof1hrlkb1hk","_id":"cj3bpqypp0013sof1l1jg33yi"}],"Tag":[{"name":"docker","_id":"cj3bpqyou0003sof19wk0hvoo"},{"name":"mysql","_id":"cj3bpqyp7000csof17ymvoxlo"},{"name":"学习笔记","_id":"cj3bpqype000ksof1qj4f0f5w"},{"name":"动漫","_id":"cj3bpqypf000msof1p5ftmjzu"},{"name":"算法导论","_id":"cj3bpqypf000osof1dnd770ek"},{"name":"机器学习","_id":"cj3bpqyph000qsof1jasq3kbr"},{"name":"python","_id":"cj3bpqypi000tsof1hrlkb1hk"}]}}